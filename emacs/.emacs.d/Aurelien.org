#+TITLE: AurÃ©lien Bottazini's Emacs configuration
#+OPTIONS: toc:4 h:4
#+PROPERTY: header-args :results silent

*IN_PROGRESS*
I am in the process of refactoring this emacs dotfile.
I want to explain my emacs config strategy to

- Make it easier for others to copy things from it.
- To teach myself better emacs strategies.

#+BEGIN_SRC emacs-lisp :results silent
(setq evil-toggle-key "C-c e")
#+END_SRC

* Setup
  It is important to load
  those first as it can impact the loading of other packages
#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (load custom-file)
#+end_src

  I keep my machine specific settings here.
  For example for the font size: ~(set-face-attribute 'default nil :height 100 )~
#+BEGIN_SRC emacs-lisp
  (if (file-exists-p "~/.emacs.d/.emacs-local")
    (load "~/.emacs.d/.emacs-local"))
#+END_SRC

In my configuration I have some parts that are mac or linux specific.
Those variables make it easier to apply those env specific setup.
#+begin_src emacs-lisp
  (setq *is-linux* (string-equal system-type "gnu/linux"))
  (setq *is-mac* (string-equal system-type "darwin"))
#+end_src

Where to find additional lisp files.
#+begin_src emacs-lisp
  (let ((default-directory  "~/.emacs.d/site-lisp/"))
    (normal-top-level-add-to-load-path '("."))
    (normal-top-level-add-subdirs-to-load-path))
#+end_src

Keymap where i store my global keybindings.
It gives priority to my keybindings over ones in major and minor
modes.
Without this, /aggressive/ minor and major modes tend to override my
keybindings.
#+begin_src emacs-lisp
  (defvar my-keys-minor-mode-map (make-keymap) "my-keys-minor-mode keymap.")
  (define-minor-mode my-keys-minor-mode
    "A minor mode so that my key settings override annoying major modes."
    t " my-keys" 'my-keys-minor-mode-map)
  (my-keys-minor-mode 1)

  (defadvice load (after give-my-keybindings-priority)
    "Try to ensure that my keybindings always have priority."
    (if (not (eq (car (car minor-mode-map-alist)) 'my-keys-minor-mode))
        (let ((mykeys (assq 'my-keys-minor-mode minor-mode-map-alist)))
          (assq-delete-all 'my-keys-minor-mode minor-mode-map-alist)
          (add-to-list 'minor-mode-map-alist mykeys))))
  (ad-activate 'load)
#+end_src
* Cute functions
  #+begin_src emacs-lisp
    (defun sudo ()
      "Use TRAMP to `sudo' the file for current buffer."
      (interactive)
      (when buffer-file-name
        (find-alternate-file
         (concat "/sudo:root@localhost:"
                 buffer-file-name))))

    (defun org-strike-header ()
      "Strikes current org-header using + markers."
      (interactive)
      (beginning-of-line)
      (re-search-forward "\*+ ")
      (insert "+")
      (end-of-line)
      (insert "+"))

    (defun my-reload-dir-locals-for-current-buffer ()
      "Reloads dir locals for the current buffer."
      (interactive)
      (let ((enable-local-variables :all))
        (hack-dir-local-variables-non-file-buffer)))

    (defun my-reload-dir-locals-for-all-buffer-in-this-directory ()
      "For every buffer with the same `default-directory` as the current buffer's, reload dir-locals."
      (interactive)
      (let ((dir default-directory))
        (dolist (buffer (buffer-list))
          (with-current-buffer buffer
            (when (equal default-directory dir))
            (my-reload-dir-locals-for-current-buffer)))))

    (defun filepath-with-line-number-for-current-buffer ()
      "Return a string with Buffer-file-name:line-number.
           Make it easier to prepare commands for tools like rspec"
      (interactive)
      (concat (buffer-file-name) ":" (number-to-string (line-number-at-pos))))

    (defun add-date-to-filename ()
      "Add current date in front of filename for current buffer."
      (interactive)
      (let* ((date (format-time-string "%Y-%m-%d"))
             (buffer-file (buffer-file-name))
             (new-file-name (concat (file-name-directory buffer-file)
                                    date
                                    "-"
                                    (file-name-nondirectory buffer-file)))
             )
        (rename-file buffer-file new-file-name)
        (set-visited-file-name new-file-name)
        (save-buffer)))

    (defun toggle-html-export-on-save ()
      "Enable or disable export HTML when saving current buffer."
      (interactive)
      (when (not (eq major-mode 'org-mode))
        (error "Not an org-mode file!"))
      (if (memq 'org-html-export-to-html after-save-hook)
          (progn (remove-hook 'after-save-hook 'org-html-export-to-html t)
                 (message "Disabled org html export on save"))
        (add-hook 'after-save-hook 'org-publish-current-file nil t)
        (set-buffer-modified-p t)
        (message "Enabled org html export on save")))
  #+end_src

* Initialize Packages
  #+begin_src emacs-lisp
    (setq package-archives
          '(("melpa"       . "http://melpa.milkbox.net/packages/")
            ("marmalade" . "http://marmalade-repo.org/packages/")
            ("gnu"         . "http://elpa.gnu.org/packages/")))

    (setq package-user-dir (concat user-emacs-directory "elpa"))

    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    (defun require-package (package &optional min-version)
      "Ask elpa to install given PACKAGE. You can specify a MIN-VERSION for your PACKAGE."
      (unless (package-installed-p package min-version)
        (package-install package)))

    (require-package 'use-package)
    (require 'use-package)
    (setq use-package-always-ensure t)
  #+end_src



  You can get the time it took for emacs to start with
  #+begin_src emacs-lisp :tangle no
  (emacs-init-time)
  #+end_src

  #+begin_src emacs-lisp
    (defun my-prog-mode-auto-fill-hook ()
      (setq fill-column 80)
      (set (make-local-variable 'comment-auto-fill-only-comments) t)
      (auto-fill-mode t))
    (add-hook 'prog-mode-hook 'my-prog-mode-auto-fill-hook)
  #+end_src

* Better Defaults
  I like setting the path manually as other solutions like ~exec-path-from-shell~
  slow down my Emacs.

  #+begin_src emacs-lisp :results silent
    (setenv "JAVA_HOME" "/Library/Java/JavaVirtualMachines/adoptopenjdk-12.0.2.jdk/Contents/Home")
    (let ((home-folder (getenv "HOME")))
      (setenv "PATH" (concat (concat home-folder "/.config/yarn/global/node_modules/.bin/:")
                             (concat home-folder "/n/bin/:")
                             (concat home-folder "/.local/bin/:")
                             (concat home-folder "/work/dox-compose/bin/:")
                             (concat home-folder "/.rbenv/shims:")
                             (concat home-folder "/.rbenv/bin:")
                             (concat home-folder "/.fzf/bin:")
                             "/usr/bin:"
                             "/usr/local/bin:"
                             "/usr/local/opt/node@10/bin:"
                             "/home/linuxbrew/.linuxbrew/bin/:"
                             "/bin"))

      (setq exec-path `(,(concat home-folder "/.config/yarn/global/node_modules/.bin/")
                        ,(concat home-folder "/work/dox-compose/bin/")
                        ,(concat home-folder "/n/bin/")
                        ,(concat home-folder "/.rbenv/bin/")
                        ,(concat home-folder "/.rbenv/shims/")
                        ,(concat home-folder "/dotfiles/bin/")
                        ,(concat home-folder "/.fzf/bin")
                        ,(concat home-folder "/.local/bin")
                        "/usr/local/opt/node@10/bin/"
                        "/usr/bin"
                        "/usr/local/bin"
                        "~/bin"
                        "/bin/"
                        "/home/linuxbrew/.linuxbrew/bin/"
                        "/usr/local/bin/"
                        "/usr/local/sbin/"
                        "/usr/bin/")))
    (when *is-mac*
      (add-to-list 'exec-path "/usr/local/opt/coreutils/libexec/gnubin"))
  #+end_src

  Keep emacs fast with large files.
  #+begin_src emacs-lisp
    (defun check-large-file-hook ()
      "If a file is over a given size, turn off minor modes."
      (when (> (buffer-size) (* 1024 100)) ;; 100K
        (fundamental-mode)
        (font-lock-mode -1)
        (setq buffer-read-only t)
        (buffer-disable-undo)))

    (add-hook 'find-file-hooks 'check-large-file-hook)
  #+end_src

  #+begin_src emacs-lisp
    (setq help-window-select t)
    (setq inhibit-startup-message t)
    (setq delete-by-moving-to-trash t)
    (setq tab-always-indent 'complete)
    ;; show end of buffer on left fringe
    (setq-default default-indicate-empty-lines nil)
    (make-variable-buffer-local 'compile-command)
    (defalias 'yes-or-no-p 'y-or-n-p)
    (setq ring-bell-function 'ignore)

    (setq backup-by-copying t      ; don't clobber symlinks
          backup-directory-alist
          '((".*" . "~/.local/share/emacs-saves"))    ; don't litter my fs tree
          delete-old-versions t
          kept-new-versions 6
          kept-old-versions 2
          auto-save-default t ;files starting with # are generated by autosave
          auto-save-timeout 60 ; number of seconds before auto-saving
          auto-save-interval 200 ; number of keystrokes before auto-saves
          version-control t) ; use versioned backups
    (setq create-lockfiles nil)
    (setq auto-save-file-name-transforms
          `((".*" ,"~/.local/share/emacs-saves" t)))

    ;; if file has no change, just load any changes
    ;; coming from an external process
    (setq global-auto-revert-non-file-buffers t)
    (global-auto-revert-mode 1)

    ;; sentences end with one space after point
    (setq sentence-end-double-space nil)

    ;;; replace selected text when typing
    (pending-delete-mode 1)

    (prefer-coding-system 'utf-8)
    (modify-coding-system-alist 'process "\\*compilation\\*\\'"   'utf-8)
  #+end_src

  I want error highlights and error bindings in shell modes too.
  #+BEGIN_SRC emacs-lisp
    (add-hook 'shell-mode-hook 'compilation-shell-minor-mode)
  #+END_SRC

  ~C-c C-w~ to copy regex to something usable with emacs-lisp
  ~C-c C-q~ to quit re-builder and to remove highlights
  #+BEGIN_SRC emacs-lisp
  ( require 're-builder)
  (setq reb-re-syntax 'string)
  #+END_SRC

** tabs and whitespace
   By default I disable tabs. In addition I use ~whitespace-mode~
   because sometimes when copy pasting code from external sources
   those external sources have tabs. I want to see those tabs to
   remove them.

   I don't use the ~global-whitespace-mode~ because some emacs mode
   like ~magit~ use tabs.

   You can remove all tabs from your buffer with ~untabify~
   #+begin_src emacs-lisp
     (setq-default
      indent-tabs-mode nil    ;no tabs
      c-basic-offset 2)
     (setq-default whitespace-style '(face trailing tabs tab-mark))
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
     (add-hook 'prog-mode-hook 'whitespace-mode)
     (eval-after-load "whitespace"
       '(diminish 'whitespace-mode))
   #+end_src

** Recent files
#+BEGIN_SRC emacs-lisp
(recentf-mode 1)
(setq recentf-max-menu-items 50)
(setq recentf-max-saved-items 50)
#+END_SRC
* GUI
  #+begin_src emacs-lisp
    (blink-cursor-mode 0)
    (column-number-mode)

    (global-hl-line-mode nil)
    (electric-indent-mode t)

    (electric-pair-mode)
    (defun inhibit-electric-pair-mode-in-minibuffer (char)
      (minibufferp))
    (setq electric-pair-inhibit-predicate #'inhibit-electric-pair-mode-in-minibuffer)

    ;; wrap lines when they reach the end of buffer
    ;; trying to toggle this only manually to see if i like it
    ;; (global-visual-line-mode)

    ;; file path in frame title
    (setq frame-title-format
          '((:eval (if (buffer-file-name)
                       (abbreviate-file-name (buffer-file-name))
                     "%b"))))


    (define-key my-keys-minor-mode-map (kbd "C-c op") 'show-paren-mode)
    (setq blink-matching-paren 'jump-offscreen)

    ;; makes fringe big enough on linux with HDPI
    (fringe-mode 20)
  #+end_src

   #+BEGIN_SRC emacs-lisp
   (use-package diminish
     :config
     (eval-after-load "undo-tree"
       '(diminish 'undo-tree-mode))
     (diminish 'auto-fill-function)
     (diminish 'my-keys-minor-mode)
     (diminish 'eldoc-mode))
   #+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package posframe)
#+END_SRC

** Colors
*** Pantone
    #fff166 101U
    #fccf61 128u
    #f79b2f 130u
    #c97f3a 145u
    #ffa2cb 210u
    #f56d9e 213u
    #dcc6ea 263u
    #bfa1e3 264u
    #9d7ad2 265u
    #adcff1 277u
    #7ab1e8 284u
    #5b8edb 279u
    #8eddeb 304u
    #00b4e4 395u
    #93e8d3 331u
    #97d88a 358u
    #5cb860 360u
    #56944f 362u
    #f1f2f1 11-0601 tpx
    #e8eae8 11-4800 tpx
    #dad9d6 cool g r a y 1 u
    #c5c5c5 cool g r a y 3 u
    #adaeb0 cool g r a y 5 u
    #939598 cool g r a y 8 u

    pastel
    #e4f4e9 9063u
    #c5f2e6 9520u
    #ffcfd8 9284u

    #69615f 440u
    #4c4e56 black7u
    #885a61 195u
    #f65058 r e d 032u
    #bc3e44 3517u
    #34855b 348u
    #546758 350u
    #4982cf 285u
    #3a499c Reflex B l u e U
    #65428a medium p u r p l e
* Windows
   #+BEGIN_SRC emacs-lisp
     (define-key my-keys-minor-mode-map (kbd "C-h") 'evil-window-left)
     (define-key my-keys-minor-mode-map (kbd "C-j") 'evil-window-down)
     (define-key my-keys-minor-mode-map (kbd "C-k") 'evil-window-up)
     (define-key my-keys-minor-mode-map (kbd "C-l") 'evil-window-right)

     (define-key my-keys-minor-mode-map (kbd "C-c \\") 'split-window-right)
     (use-package evil
     :config
     (evil-define-key 'normal my-keys-minor-mode-map (kbd "C-c -") 'split-window-below))
   #+END_SRC

* Clojure
#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :mode "\\.clj\\'"
  :config
  (add-hook 'clojure-mode-hook #'subword-mode)
  (use-package cider))
#+END_SRC
* Ruby
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :mode "\\.ya?ml\\'")

  (use-package ruby-mode
    :mode "\\.rake\\'"
    :mode "Rakefile\\'"
    :mode "\\.gemspec\\'"
    :mode "\\.ru\\'"
    :mode "Gemfile\\'"
    :mode "Guardfile\\'" :mode "Capfile\\'"
    :mode "\\.cap\\'"
    :mode "\\.thor\\'"
    :mode "\\.rabl\\'"
    :mode "Thorfile\\'"
    :mode "Vagrantfile\\'"
    :mode "\\.jbuilder\\'"
    :mode "Podfile\\'"
    :mode "\\.podspec\\'"
    :mode "Puppetfile\\'"
    :mode "Berksfile\\'"
    :mode "Appraisals\\'"
    :mode "\\.rb$"
    :mode "ruby"
    :config

    (add-hook 'ruby-mode-hook 'subword-mode)
    (eval-after-load "subword"
      '(diminish 'subword-mode))
    (use-package ruby-interpolation
      :diminish ruby-interpolation-mode)
    (use-package inf-ruby)

    (use-package ruby-end
      :diminish ruby-end-mode)
    (use-package rspec-mode)

    (use-package ruby-refactor
      :diminish ruby-refactor-mode
      :bind (:map ruby-mode-map
                  ("C-c r m" . ruby-refactor-extract-to-method)
                  ("C-c r c" . ruby-refactor-extract-constant)
                  ("C-c r v" . ruby-refactor-extract-local-variable)
                  ("C-c r l" . ruby-refactor-extract-to-let))
      :config
      (add-hook 'ruby-mode-hook 'ruby-refactor-mode-launch))


    ;; Hitting M-; twice adds an xmpfilter comment. Hitting xmp keybinding will put the output in this comment
    (use-package rcodetools
      :load-path "/site-lisp/rcodetools.el"
      :pin manual
      :ensure nil
      :config
      (defadvice comment-dwim (around rct-hack activate)
        "If comment-dwim is successively called, add => mark."
        (if (and (or (eq major-mode 'enh-ruby-mode)
                     (eq major-mode 'ruby-mode))
                 (eq last-command 'comment-dwim))
            (progn
              (if (eq major-mode 'enh-ruby-mode)
                  (end-of-line))
              (insert "=>"))
          ad-do-it))))
#+END_SRC
* HTML
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode "\\.html\\'")

  (use-package emmet-mode
  :after evil
    :diminish emmet-mode
    :config
    (progn
      (evil-define-key 'insert emmet-mode-keymap (kbd "C-j") 'emmet-expand-line)
      (evil-define-key 'emacs emmet-mode-keymap (kbd "C-j") 'emmet-expand-line))

    (add-hook 'css-mode-hook
              (lambda ()
                (emmet-mode)
                (setq emmet-expand-jsx-className? nil)))

    (add-hook 'sgml-mode-hook
              (lambda ()
                (emmet-mode)
                (setq emmet-expand-jsx-className? nil)))

    (add-hook 'web-mode-hook
              (lambda ()
                (emmet-mode))))
#+END_SRC
* CSS
#+BEGIN_SRC emacs-lisp
(use-package scss-mode
  :mode "\\.scss\\'")

(use-package sass-mode :mode "\\.sass\\'")

(use-package less-css-mode
  :mode "\\.less\\'")
#+END_SRC
* Docker
#+begin_src emacs-lisp
  (use-package docker
   :ensure t
   :bind ("C-c d d". docker)
   :config
      (defadvice docker-image-mode (after docker-image-mode-change-to-emacs-state activate compile)
        "when entering git-timemachine mode, change evil normal state to emacs state"
        (if (evil-normal-state-p)
            (evil-emacs-state)
          (evil-normal-state)))
          )

  ;; (use-package transient)
  ;; (require 'dox-dc)
  ;; (define-key my-keys-minor-mode-map (kbd "C-c d x") (dox-dc))
  ;; (evil-set-initial-state 'dox-dc-mode 'emacs)
#+end_src
* JavaScript
#+BEGIN_SRC emacs-lisp
  (require 'compile)
  (setq compilation-error-regexp-alist-alist
        (cons '(node "^\\([a-zA-Z\.0-9\/-]+\\):\\([0-9]+\\)$"
                     1 ;; file
                     2 ;; line
                     )
              compilation-error-regexp-alist-alist))
  (setq compilation-error-regexp-alist
        (cons 'node compilation-error-regexp-alist))
  (add-hook 'js2-mode-hook
            (lambda ()
              (set (make-local-variable 'compile-command)
                   (format "node %s" (file-name-nondirectory buffer-file-name)))))

  (setq js-indent-level 2)

  (use-package js2-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (add-to-list 'auto-mode-alist '("\\.jsx\\'" . js2-mode))

    (use-package js-comint)

    (setq js2-mode-show-parse-errors nil)
    (setq js2-mode-show-strict-warnings nil)

    (setq-default
     ;; js2-mode
     js2-basic-offset 2
     ;; web-mode
     css-indent-offset 2
     web-mode-markup-indent-offset 2
     web-mode-script-padding 0
     web-mode-css-indent-offset 2
     web-mode-style-padding 2
     web-mode-code-indent-offset 2
     web-mode-attr-indent-offset 2)

    (setq js2-highlight-level 3)
    :config
    (add-hook 'js2-mode-hook 'js2-imenu-extras-mode)
    (add-hook 'js2-mode-hook (lambda() (subword-mode t)))

    (use-package import-js)

    (use-package xref-js2)

    ;; js-mode (which js2 is based on) binds "M-." which conflicts with xref, so
    ;; unbind it.
    (define-key js-mode-map (kbd "M-.") nil)

    (add-hook 'js2-mode-hook (lambda ()
                               (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))
    (use-package prettier-js
      :config
      (setq prettier-args '(
                            "--trailing-comma" "es5"
                            "--single-quote" "true"
                            )
            prettier-js-command "prettier")
      (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
      (add-hook 'js2-mode-hook 'prettier-js-mode))

  (defun enable-minor-mode (my-pair)
    "Enable minor mode if filename match the regexp.  MY-PAIR is a cons cell (regexp . minor-mode)."
    (if (buffer-file-name)
        (if (string-match (car my-pair) buffer-file-name)
            (funcall (cdr my-pair)))))

  (add-hook 'web-mode-hook #'(lambda ()
                               (enable-minor-mode
                                '("\\.jsx?\\'" . prettier-js-mode))))

  (add-hook 'web-mode-hook #'(lambda ()
                               (enable-minor-mode
                                '("\\.vue?\\'" . prettier-js-mode))))

  (add-to-list 'magic-mode-alist '("^import.*React.* from 'react'" . my-jsx-hook) )
  (defun my-jsx-hook ()
    "My Hook for JSX Files"
    (interactive)
    (web-mode)
    (web-mode-set-content-type "jsx")
    (setq imenu-create-index-function 'auray-js-imenu-make-index)
    (flycheck-select-checker 'javascript-eslint)
    (emmet-mode)
    (setq emmet-expand-jsx-className? t)
    (tern-mode t))
    )

  (use-package context-coloring
    :ensure t
    :diminish context-coloring-mode
    :bind (:map my-keys-minor-mode-map ("C-c oc" . context-coloring-mode))
    :config
      (add-hook 'js2-mode-hook #'context-coloring-mode))

  (use-package json-mode
    :mode "\\.json\\'"
    :mode "\\.eslintrc\\'")

  (use-package coffee-mode
    :mode "\\.coffee\\'"
    :config
    (use-package highlight-indentation)
    (add-hook 'coffee-mode-hook '(lambda () (highlight-indentation-mode)))
    (add-hook 'coffee-mode-hook '(lambda () (subword-mode +1)))
    (custom-set-variables '(coffee-tab-width 2)))

  (use-package typescript-mode
    :mode "\\.ts\\'")
#+END_SRC
** Vue
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode "\\.vue\\'"
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-script-padding 0)
    (defun jjpandari/merge-imenu (index-fun)
      (interactive)
      (let ((mode-imenu (funcall index-fun))
            (custom-imenu (imenu--generic-function imenu-generic-expression)))
        (append custom-imenu mode-imenu)))

    (add-hook 'web-mode-hook
              (lambda ()
                (setq imenu-create-index-function (lambda () (jjpandari/merge-imenu 'web-mode-imenu-index))))))

#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config
    (flycheck-add-mode 'javascript-eslint 'web-mode)
    (add-hook 'web-mode-hook 'flycheck-mode)
    (add-hook 'js2-mode-hook 'flycheck-mode)
    (defun my/use-eslint-from-node-modules ()
      (let* ((root (locate-dominating-file
                    (or (buffer-file-name) default-directory)
                    "node_modules"))
             (eslint (and root
                          (expand-file-name "node_modules/eslint/bin/eslint.js"
                                            root))))
        (when (and eslint (file-executable-p eslint))
          (setq-local flycheck-javascript-eslint-executable eslint))))
    (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)


  (define-derived-mode cfn-mode yaml-mode
    "Cloudformation"
    "Cloudformation template mode.")
  (add-to-list 'auto-mode-alist '(".template.yaml\\'" . cfn-mode))
  (add-hook 'cfn-mode-hook 'flycheck-mode)
  (flycheck-define-checker cfn-lint
    "A Cloudformation linter using cfn-python-lint.
              See URL 'https://github.com/awslabs/cfn-python-lint'."
    :command ("cfn-lint" "-f" "parseable" source)
    :error-patterns (
                     (warning line-start (file-name) ":" line ":" column
                              ":" (one-or-more digit) ":" (one-or-more digit) ":"
                              (id "W" (one-or-more digit)) ":" (message) line-end)
                     (error line-start (file-name) ":" line ":" column
                            ":" (one-or-more digit) ":" (one-or-more digit) ":"
                            (id "E" (one-or-more digit)) ":" (message) line-end)
                     )
    :modes (cfn-mode))
  (add-to-list 'flycheck-checkers 'cfn-lint))

  (require 'aurayb-narrow-indirect-vue)
  ;; (define-key my-keys-minor-mode-map (kbd "nj") (aurayb-make-narrow-indirect-vue "script" 'js2-mode))
  ;; (define-key my-keys-minor-mode-map (kbd "nh") (aurayb-make-narrow-indirect-vue "template" 'html-mode))
  ;; (define-key my-keys-minor-mode-map (kbd "ns") (aurayb-make-narrow-indirect-vue "style" 'scss-mode))
  ;; (define-key my-keys-minor-mode-map (kbd "nn") '(lambda () (interactive) (pop-to-buffer-same-window (buffer-base-buffer))))
#+END_SRC
* Run for mode
#+BEGIN_SRC emacs-lisp
(defun run-for-mode ()
    "Run interactive command for the current buffer programming mode"
    (interactive)
    (cond
     ((equal major-mode 'org-mode)
      (org-babel-execute-src-block))
     ((equal major-mode 'ruby-mode)
      (xmp))
     ((equal major-mode 'enh-ruby-mode)
      (xmp))
     ((equal major-mode 'clojure-mode)
      (cider-eval-defun-at-point))
     ((equal major-mode 'clojurescript-mode)
      (cider-eval-defun-at-point))
     ((or (equal major-mode 'emacs-lisp-mode) (equal major-mode 'lisp-interaction-mode))
      (eval-defun nil))
     ((equal major-mode 'js2-mode)
      (run-node-on-buffer))
     (t (error "No run command for that mode"))))


(defun run-bigger-for-mode ()
    "Run interactive command for the current buffer programming mode"
    (interactive)
    (cond
     ((equal major-mode 'org-mode)
      (org-publish-current-file))
     ((equal major-mode 'ruby-mode)
      (xmp))
     ((equal major-mode 'enh-ruby-mode)
      (xmp))
     ((equal major-mode 'clojure-mode)
      (cider-load-buffer))
     ((equal major-mode 'clojurescript-mode)
      (cider-load-buffer))
     ((or (equal major-mode 'emacs-lisp-mode) (equal major-mode 'lisp-interaction-mode))
      (eval-defun nil))
     ((equal major-mode 'js2-mode)
      (progn
        (js-comint-reset-repl)
        (js-comint-send-buffer)
        (other-window -1)))
     (t (error "No run command for that mode"))))

(define-key my-keys-minor-mode-map (kbd "C-c x") 'run-for-mode)
(define-key my-keys-minor-mode-map (kbd "C-c X") 'run-bigger-for-mode)
#+END_SRC
* Bindings
** General
   Shows key combination helper in minibuffer
   #+begin_src emacs-lisp
     (use-package which-key
       :diminish which-key-mode
       :config
       (which-key-mode))
   #+end_src

   Combined with C-M-c (exit-recursive-edit) allows to stop doing
   something, do something else and come back to it later.
   #+begin_src emacs-lisp
    (define-key my-keys-minor-mode-map (kbd "C-M-e") 'recursive-edit)
   #+end_src

   Make grep buffers writable with ~C-c C-p~. Apply changes with ~C-c C-e~
   #+begin_src emacs-lisp
    ;; makes grep buffers writable and apply the changes to files.
    (use-package wgrep :defer t)
   #+end_src

   #+begin_src emacs-lisp
   (use-package paredit
     :diminish paredit-mode
     :bind (:map my-keys-minor-mode-map
            ("C-)" . paredit-forward-slurp-sexp)
            ("C-}" . paredit-forward-bard-sexp))
     :config
     (add-hook 'emacs-lisp-mode-hook #'paredit-mode))

   (use-package expand-region
     :bind (:map my-keys-minor-mode-map ("C-c w" . er/expand-region)))

   (define-key my-keys-minor-mode-map (kbd "C-c a") 'org-agenda)
   (define-key my-keys-minor-mode-map (kbd "C-c R") 'revert-buffer)
   (define-key my-keys-minor-mode-map (kbd "C-c jc") 'org-clock-jump-to-current-clock)
   (define-key my-keys-minor-mode-map (kbd "C-c je") '(lambda () (interactive) (find-file "~/dotfiles/emacs/.emacs.d/Aurelien.org")))
   (define-key my-keys-minor-mode-map (kbd "C-c jp") '(lambda () (interactive) (find-file "~/projects/")))
   (define-key my-keys-minor-mode-map (kbd "C-c jw") '(lambda () (interactive) (find-file **local-writing-folder**)))
   (define-key my-keys-minor-mode-map (kbd "C-c jn") '(lambda () (interactive) (find-file **local-note-file**)))
   (define-key my-keys-minor-mode-map (kbd "C-c jj") 'dired-jump)
   (define-key my-keys-minor-mode-map (kbd "C-c k") 'recompile)
   (define-key my-keys-minor-mode-map (kbd "C-c K") 'compile)

   (define-key my-keys-minor-mode-map (kbd "<f5>") 'ispell-buffer)
   ;;(use-package define-word
   ;;  :config
   ;;  (define-key my-keys-minor-mode-map (kbd "<f6>") 'define-word-at-point))

   ;; (defun lookup-synonyms (word)
   ;;   (interactive (list (save-excursion (car (ispell-get-word nil)))))
   ;;   (browse-url (format "http://en.wiktionary.org/wiki/%s" word)))

   ;; (define-key my-keys-minor-mode-map (kbd "<f7>") 'lookup-synonyms)
   (define-key my-keys-minor-mode-map (kbd "C-c oh") 'evil-search-highlight-persist-remove-all)
   (defun hide-line-numbers ()
     (interactive)
     (setq display-line-numbers (quote nil)))
   (define-key my-keys-minor-mode-map (kbd "C-c olh") 'hide-line-numbers)
   (defun show-line-numbers ()
     (interactive)
     (setq display-line-numbers (quote absolute)))
   (define-key my-keys-minor-mode-map (kbd "C-c oll") 'show-line-numbers)
   (define-key my-keys-minor-mode-map (kbd "C-c ow") 'visual-line-mode)
   (define-key my-keys-minor-mode-map (kbd "C-c of") 'auto-fill-mode)
   (define-key my-keys-minor-mode-map (kbd "C-c os") 'org-strike-header)
   (define-key my-keys-minor-mode-map (kbd "C-c og") 'global-hl-line-mode)
   (use-package rainbow-mode
     :bind (:map my-keys-minor-mode-map
                 ("C-c or" . rainbow-mode)))
   ;; gives each line only one visual line and don't show a continuation on next line
   (set-default 'truncate-lines t)
   (define-key my-keys-minor-mode-map (kbd "C-c ot") 'toggle-truncate-lines)

   (define-key evil-normal-state-map (kbd "[b") 'previous-buffer)
   (define-key evil-normal-state-map (kbd "]b") 'next-buffer)
   (define-key evil-normal-state-map (kbd "]e") 'next-error)
   (define-key evil-normal-state-map (kbd "[e") 'previous-error)

   (use-package windresize
     :bind (:map evil-normal-state-map
                 ("C-w r" . windresize)))
   #+end_src
** Drag stuff
   #+begin_src emacs-lisp
     (use-package drag-stuff
       :diminish t
       :bind (:map my-keys-minor-mode-map
              ("C-M-<up>" . drag-stuff-up)
              ("C-M-<down>" . drag-stuff-down))
       :config
       (drag-stuff-global-mode t))
   #+end_src
#+begin_src emacs-lisp :results silent
  (use-package key-chord
    :after evil
    :config
    (key-chord-mode 1)
    (key-chord-define evil-insert-state-map  "jk" 'evil-normal-state))
#+end_src

  #+begin_src emacs-lisp :results silent
    (use-package evil
      :config
      (evil-define-key 'insert lisp-interaction-mode-map (kbd "C-j") 'eval-print-last-sexp))
  #+end_src
* Tmux Integration and Buffer navigation
   Move between buffers with C-h C-j C-k C-l and makes Emacs terminal
   and tmux work seamlessly.
   #+begin_src emacs-lisp
       ;; (use-package emamux
       ;;   :bind (:map my-keys-minor-mode-map
       ;;               ("C-c c c" . emamux:send-command)
       ;;               ("C-c c l" . emamux:run-last-command)))

       (defun tmux-socket-command-string ()
         (interactive)
         (concat "tmux -S "
                 (replace-regexp-in-string "\n\\'" ""
                                           (shell-command-to-string "echo $TMUX | sed -e 's/,.*//g'"))))

       (defun tmux-move-right ()
         (interactive)
         (condition-case nil
             (evil-window-right 1)
           (error (unless window-system (shell-command (concat
   (tmux-socket-command-string) " select-pane -R") nil)))))

       (defun tmux-move-left ()
         (interactive)
         (condition-case nil
             (evil-window-left 1)
           (error (unless window-system (shell-command (concat
   (tmux-socket-command-string) " select-pane -L") nil)))))

       (defun tmux-move-up ()
         (interactive)
         (condition-case nil
             (evil-window-up 1)
           (error (unless window-system (shell-command (concat
   (tmux-socket-command-string) " select-pane -U") nil)))))

       (defun tmux-move-down ()
         (interactive)
         (condition-case nil
             (evil-window-down 1)
           (error (unless window-system (shell-command (concat
   (tmux-socket-command-string) " select-pane -D") nil)))))

       (define-key my-keys-minor-mode-map (kbd "C-h") 'tmux-move-left)
       (define-key my-keys-minor-mode-map (kbd "C-j") 'tmux-move-down)
       (define-key my-keys-minor-mode-map (kbd "C-k") 'tmux-move-up)
       (define-key my-keys-minor-mode-map (kbd "C-l") 'tmux-move-right)
   #+end_src

* Completion

   #+BEGIN_SRC emacs-lisp :results value
   (use-package company
     :commands (company-mode global-company-mode company-complete
                             company-complete-common company-manual-begin company-grab-line)
     :after evil
     :config
     (setq company-idle-delay nil
           company-tooltip-limit 10
           company-dabbrev-downcase nil
           company-dabbrev-ignore-case nil
           company-dabbrev-code-other-buffers t
           company-tooltip-align-annotations t
           company-require-match 'never
           company-global-modes '(not eshell-mode comint-mode erc-mode message-mode help-mode gud-mode)
           company-frontends '(company-pseudo-tooltip-frontend company-echo-metadata-frontend)
           company-backends '(company-capf company-dabbrev company-ispell company-yasnippet)
           company-transformers '(company-sort-by-occurrence))
     (global-company-mode +1))

     (define-key evil-insert-state-map (kbd "C-c c") 'company-complete)
   ;; helps rank completion candidates based on usage
   (use-package company-statistics
     :after company
     :config
     (setq company-statistics-file "~/.emacs.d/company-stats-cache.el")
     (company-statistics-mode +1))

   (use-package company-dict
     :commands company-dict
     :config
     (defun +company|enable-project-dicts (mode &rest _)
       "Enable per-project dictionaries."
       (if (symbol-value mode)
           (cl-pushnew mode company-dict-minor-mode-list :test #'eq)
         (setq company-dict-minor-mode-list (delq mode company-dict-minor-mode-list))))
     (add-hook 'projectile-after-switch-project-hook #'+company|enable-project-dicts))


     (autoload 'company-capf "company-capf")
     (autoload 'company-yasnippet "company-yasnippet")
     (autoload 'company-dabbrev "company-dabbrev")
     (autoload 'company-dabbrev-code "company-dabbrev-code")
     (autoload 'company-etags "company-etags")
     (autoload 'company-elisp "company-elisp")
     (autoload 'company-files "company-files")
     (autoload 'company-gtags "company-gtags")
     (autoload 'company-ispell "company-ispell")
   #+END_SRC
* Testing things
  #+begin_src emacs-lisp :results silent
      (when (fboundp 'winner-mode)
      (winner-mode 1))
  #+end_src

#+begin_src emacs-lisp :results raw
(setq org-babel-js-function-wrapper "require('util').log(require('util').inspect(function(){%s}()));")
(use-package go-mode)
(use-package web-mode
  :mode "\\.html\\'"
  :mode "\\.gohtml\\'")
#+end_src

#+begin_src emacs-lisp :results silent
(use-package writeroom-mode
  :bind (:map my-keys-minor-mode-map
  ("C-c z" . writeroom-mode)))
#+end_src

#+BEGIN_SRC emacs-lisp :results silent
(setq org-src-preserve-indentation nil
      org-html-indent nil
      org-edit-src-content-indentation 0)
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent
(defun abo-jump-to-note-file ()
  "Jump to org note file for current buffer"
  (interactive)
  (find-file **local-note-file**))

(define-key my-keys-minor-mode-map "\C-cn" 'abo-jump-to-note-file)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun abo-change-line-endings-to-unix ()
  (let ((coding-str (symbol-name buffer-file-coding-system)))
    (when (string-match "-\\(?:dos\\|mac\\)$" coding-str)
      (set-buffer-file-coding-system 'unix))))

(add-hook 'find-file-hooks 'abo-change-line-endings-to-unix)
#+END_SRC

#+begin_src emacs-lisp :results silent
(use-package markdown-mode)
#+end_src
