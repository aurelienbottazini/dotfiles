#+TITLE: Aurelien Bottazini's Emacs configuration
#+OPTIONS: toc:4 h:4
#+PROPERTY: header-args :results silent

It is important to load
those first as it can impact the loading of other packages
#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (load custom-file)
#+end_src

In my configuration I have some parts that are mac or linux specific.
Those variables make it easier to apply those env specific setup.
#+begin_src emacs-lisp
  (setq *is-linux* (string-equal system-type "gnu/linux"))
  (setq *is-mac* (string-equal system-type "darwin"))
#+end_src

Where to find additional lisp files.
#+begin_src emacs-lisp
  (let ((default-directory  "~/.emacs.d/site-lisp/"))
    (normal-top-level-add-to-load-path '("."))
    (normal-top-level-add-subdirs-to-load-path))
#+end_src

Keymap where i store my global keybindings.
It gives priority to my keybindings over ones in major and minor
modes.
Without this, /aggressive/ minor and major modes tend to override my
keybindgins.
#+begin_src emacs-lisp
  (defvar my-keys-minor-mode-map (make-keymap) "my-keys-minor-mode keymap.")
  (define-minor-mode my-keys-minor-mode
    "A minor mode so that my key settings override annoying major modes."
    t " my-keys" 'my-keys-minor-mode-map)
  (my-keys-minor-mode 1)

    (defadvice load (after give-my-keybindings-priority)
      "Try to ensure that my keybindings always have priority."
      (if (not (eq (car (car minor-mode-map-alist)) 'my-keys-minor-mode))
          (let ((mykeys (assq 'my-keys-minor-mode minor-mode-map-alist)))
            (assq-delete-all 'my-keys-minor-mode minor-mode-map-alist)
            (add-to-list 'minor-mode-map-alist mykeys))))
    (ad-activate 'load)
#+end_src

* Cute functions

  #+begin_src emacs-lisp
    (defun sudo ()
      "Use TRAMP to `sudo' the file for current buffer."
      (interactive)
      (when buffer-file-name
        (find-alternate-file
         (concat "/sudo:root@localhost:"
                 buffer-file-name))))

    (defun org-strike-header ()
      "Strikes current org-header using + markers."
      (interactive)
      (beginning-of-line)
      (re-search-forward "\*+ ")
      (insert "+")
      (end-of-line)
      (insert "+"))

    (defun my-reload-dir-locals-for-current-buffer ()
      "Reloads dir locals for the current buffer."
      (interactive)
      (let ((enable-local-variables :all))
        (hack-dir-local-variables-non-file-buffer)))

    (defun my-reload-dir-locals-for-all-buffer-in-this-directory ()
      "For every buffer with the same `default-directory` as the current buffer's, reload dir-locals."
      (interactive)
      (let ((dir default-directory))
        (dolist (buffer (buffer-list))
          (with-current-buffer buffer
            (when (equal default-directory dir))
            (my-reload-dir-locals-for-current-buffer)))))

    (defun filepath-with-line-number-for-current-buffer ()
      "Return a string with Buffer-file-name:line-number.
           Make it easier to prepare commands for tools like rspec"
      (interactive)
      (concat (buffer-file-name) ":" (number-to-string (line-number-at-pos))))

    (defun add-date-to-filename ()
      "Add current date in front of filename for current buffer."
      (interactive)
      (let* ((date (format-time-string "%Y-%m-%d"))
             (buffer-file (buffer-file-name))
             (new-file-name (concat (file-name-directory buffer-file)
                                    date
                                    "-"
                                    (file-name-nondirectory buffer-file)))
             )
        (rename-file buffer-file new-file-name)
        (set-visited-file-name new-file-name)
        (save-buffer)))

    (defun toggle-html-export-on-save ()
      "Enable or disable export HTML when saving current buffer."
      (interactive)
      (when (not (eq major-mode 'org-mode))
        (error "Not an org-mode file!"))
      (if (memq 'org-html-export-to-html after-save-hook)
          (progn (remove-hook 'after-save-hook 'org-html-export-to-html t)
                 (message "Disabled org html export on save"))
        (add-hook 'after-save-hook 'org-publish-current-file nil t)
        (set-buffer-modified-p t)
        (message "Enabled org html export on save")))
  #+end_src

* Initialize Packages
  #+begin_src emacs-lisp
    (setq package-archives
          '(("melpa"       . "http://melpa.milkbox.net/packages/")
            ("marmalade" . "http://marmalade-repo.org/packages/")
            ("gnu"         . "http://elpa.gnu.org/packages/")))

    (setq package-user-dir (concat user-emacs-directory "elpa"))

    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    (defun require-package (package &optional min-version)
      "Ask elpa to install given PACKAGE. You can specify a MIN-VERSION for your PACKAGE."
      (unless (package-installed-p package min-version)
        (package-install package)))

    (require-package 'use-package)
    (require 'use-package)
    (setq use-package-always-ensure t)

  #+end_src

  Show loading time in *messages* buffer. Makes it easier to optimize
  emacs dotfiles
  #+begin_src emacs-lisp
    (defun sanityinc/time-subtract-millis (b a)
      (* 1000.0 (float-time (time-subtract b a))))

    (defvar sanityinc/require-times nil
      "A list of (FEATURE . LOAD-DURATION).
    LOAD-DURATION is the time taken in milliseconds to load FEATURE.")

    (defadvice require (around sanityinc/build-require-times (feature &optional filename noerror) activate)
      "Note in `sanityinc/require-times' the time taken to require each feature."
      (let* ((already-loaded (memq feature features))
             (require-start-time (and (not already-loaded) (current-time))))
        (prog1
            ad-do-it
          (when (and (not already-loaded) (memq feature features))
            (let ((time (sanityinc/time-subtract-millis (current-time) require-start-time)))
              (add-to-list 'sanityinc/require-times
                           (cons feature time)
                           t))))))

    (defun sanityinc/show-init-time ()
      (message "init completed in %.2fms"
               (sanityinc/time-subtract-millis after-init-time before-init-time)))

    (add-hook 'after-init-hook 'sanityinc/show-init-time)
  #+end_src

* Vim / Evil

  Awesome [[https://github.com/noctuid/evil-guide][Evil Guide]]
  #+begin_src emacs-lisp
    (use-package evil
      :ensure t
      :init
      (setq evil-toggle-key "C-`")          ;switch between evil and emacs mode
      (setq evil-mode-line-format nil)
      :config

      (evil-mode 1)

      (use-package evil-surround
        :config
        (global-evil-surround-mode 1))

      (use-package evil-commentary
        :diminish evil-commentary-mode
        :config
        (evil-commentary-mode))

      (use-package evil-visualstar
        :config
        (global-evil-visualstar-mode t))

      (use-package evil-indent-plus
        :config
        (evil-indent-plus-default-bindings))

      (use-package evil-matchit
        :config
        (global-evil-matchit-mode 1))

      (use-package evil-search-highlight-persist
        :config
        (global-evil-search-highlight-persist t))

      (evil-set-initial-state 'deft-mode 'insert)
      (add-hook 'with-editor-mode-hook 'evil-insert-state)
      (evil-define-key 'insert deft-mode-map (kbd "C-p") 'previous-line)
      (evil-define-key 'insert deft-mode-map (kbd "C-n") 'next-line)

      (evil-ex-define-cmd "W" 'save-buffer)
      (bind-keys :map evil-normal-state-map :prefix-map my-leader-map :prefix "SPC"))
  #+end_src

* Better Defaults
  I like setting the path manually as other solutions like ~exec-path-from-shell~
  slow down my emacs.
  #+begin_src emacs-lisp
    (let (home-folder (getenv "HOME"))
      (setenv "PATH" (concat (getenv "HOME") "/.config/yarn/global/node_modules/.bin/:"
                             (getenv "HOME") "/work/dox-compose/bin/:"
                             (getenv "HOME") "/.rbenv/shims:"
                             (getenv "HOME") "/.rbenv/bin:"
                             (getenv "HOME") "/.fzf/bin:"
                             (getenv "PATH"))))

    (setq exec-path '("~/.config/yarn/global/node_modules/.bin/"
                      "~/bin"
                      "~/work/dox-compose/bin/"
                      "~/.rbenv/bin/"
                      "~/.rbenv/shims/"
                      "~/dotfiles/bin/"
                      "~/.fzf/bin"
                      "/usr/local/bin/"
                      "/usr/local/sbin/"
                      "/usr/bin/"))
  #+end_src

  #+begin_src emacs-lisp
    (setq inhibit-startup-message t)
    (setq delete-by-moving-to-trash t)
    (setq tab-always-indent 'complete)
    ;; show end of buffer on left fringe
    (setq-default default-indicate-empty-lines nil)
    (make-variable-buffer-local 'compile-command)
    (defalias 'yes-or-no-p 'y-or-n-p)
    (setq ring-bell-function 'ignore)

    (setq backup-by-copying t      ; don't clobber symlinks
          backup-directory-alist
          '((".*" . "~/.local/share/emacs-saves"))    ; don't litter my fs tree
          delete-old-versions t
          kept-new-versions 6
          kept-old-versions 2
          auto-save-default t ;files starting with # are generated by autosave
          auto-save-timeout 60 ; number of seconds before auto-saving
          auto-save-interval 200 ; number of keystrokes before auto-saves
          version-control t) ; use versioned backups
    (setq create-lockfiles nil)
    (setq auto-save-file-name-transforms
          `((".*" ,"~/.local/share/emacs-saves" t)))

    ;; if file has no change, just load any changes
    ;; coming from an external process
    (setq global-auto-revert-non-file-buffers t)
    (global-auto-revert-mode 1)

    ;; sentences end with one space after point
    (setq sentence-end-double-space nil)

    ;;; replace selected text when typing
    (pending-delete-mode 1)

    (prefer-coding-system 'utf-8)
    (modify-coding-system-alist 'process "\\*compilation\\*\\'"   'utf-8)
  #+end_src

  I want error highlights and error bindings in shell modes too.
  #+BEGIN_SRC emacs-lisp
    (add-hook 'shell-mode-hook 'compilation-shell-minor-mode)
  #+END_SRC

  ~C-c C-w~ to copy regex to something usable with emacs-lisp
  ~C-c C-q~ to quit re-builder and to remove highlights
  #+BEGIN_SRC emacs-lisp
  ( require 're-builder)
  (setq reb-re-syntax 'string)
  (define-key my-leader-map (kbd "odr") 're-builder)
  #+END_SRC

** tabs and whitespace
   By default I disable tabs. In addition I use ~whitespace-mode~
   because sometimes when copy pasting code from external sources
   those external sources have tabs. I want to see those tabs to
   remove them.

   I don't use the ~global-whitespace-mode~ because some emacs mode
   like ~magit~ use tabs.

   You can remove all tabs from your buffer with ~untabify~
   #+begin_src emacs-lisp
     (setq-default
      indent-tabs-mode nil    ;no tabs
      c-basic-offset 2)
     (setq-default whitespace-style '(face trailing tabs tab-mark))
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+end_src

* Dired

  #+begin_src emacs-lisp
    (setq ls-lisp-use-insert-directory-program t) ;same ls-lisp for Dired regardless of the platform

    ;; on mac there is some weird prefixing going on for GNU Tools like ls.
    ;; I favor GNU ls over MacOSX default ls
    (when *is-mac*
      (setq insert-directory-program "gls"))

    (require 'dired )
    (defun my-dired-mode-setup ()
      "to be run as hook for `dired-mode'."
      (dired-hide-details-mode 1))
    (add-hook 'dired-mode-hook 'my-dired-mode-setup)

    (put 'dired-find-alternate-file 'disabled nil)
    (setq dired-dwim-target t)
    (add-hook 'dired-load-hook
              (lambda ()
                (load "dired-x")
                ;; Set dired-x global variables here.  For example:
                ;; (setq dired-guess-shell-gnutar "gtar")
                ;; (setq dired-x-hands-off-my-keys nil)
                (setq dired-recursive-copies (quote always)) ; “always” means no asking
                (setq dired-recursive-deletes (quote top)) ; “top” means ask once
                ))

    (eval-after-load "dired"
      '(progn
         (define-key dired-mode-map "-" 'dired-up-directory)
         (define-key dired-mode-map (kbd "C-u k") 'dired-kill-subdir)
         (define-key dired-mode-map (kbd "SPC") nil)
         (evil-define-key 'normal dired-mode-map
           "gg" 'evil-goto-first-line
           "^" '(lambda () (interactive) (find-alternate-file "..")))))
  #+end_src

* GUI
  #+begin_src emacs-lisp
    (blink-cursor-mode 0)
    (column-number-mode)

    (electric-indent-mode t)
    (electric-pair-mode t)

    ;; wrap lines when they reach the end of buffer
    ;; trying to toggle this only manually to see if i like it
    ;; (global-visual-line-mode)

    ;; file path in frame title
    (setq frame-title-format
          '((:eval (if (buffer-file-name)
                       (abbreviate-file-name (buffer-file-name))
                     "%b"))))

    (show-paren-mode 1)

    ;makes fringe big enough on linux with HDPI
    (fringe-mode 20)
  #+end_src
** Colors
   Changes modeline color depending on Evil state, if buffer is
   modifier etc...
   #+begin_src emacs-lisp
    (add-to-list 'default-frame-alist '(background-color . "#f1f2f1"))
    (add-to-list 'default-frame-alist '(foreground-color . "#000000"))

       (lexical-let ((default-color (cons (face-background 'mode-line)
                                        (face-foreground 'mode-line))))
       (add-hook 'post-command-hook
                 (lambda ()
                   (let ((color (cond ((minibufferp) default-color)
                                      ((bound-and-true-p lispy-mode) '("#9d7ad2" . "#4c4e56"))
                                      ((evil-emacs-state-p)  '("#ffa2cb" . "#4c4e56"))
                                      ((evil-visual-state-p) '("#adcff1" . "#4c4e56"))
                                      ((evil-insert-state-p)  '("#97d88a" . "#4c4e56"))
                                      ((buffer-modified-p)   '("#f79b2f" . "#4c4e56"))
                                      (t default-color)))
                         )

                     (set-face-attribute 'mode-line nil :box `(:line-width 2 :color ,(car color)))
                     (set-face-background 'mode-line (car color))
                     (set-face-foreground 'mode-line-buffer-id (cdr color))
                     (set-face-foreground 'mode-line (cdr color))))))

   #+end_src
** Color reference
*** Pantone
    #+begin_src emacs-lisp
     ;; #fff166 101U
     ;; #fccf61 128u
     ;; #f79b2f 130u
     ;; #c97f3a 145u
     ;; #ffa2cb 210u
     ;; #f56d9e 213u
     ;; #dcc6ea 263u
     ;; #bfa1e3 264u
     ;; #9d7ad2 265u
     ;; #adcff1 277u
     ;; #7ab1e8 284u
     ;; #5b8edb 279u
     ;; #8eddeb 304u
     ;; #00b4e4 395u
     ;; #93e8d3 331u
     ;; #97d88a 358u
     ;; #5cb860 360u
     ;; #56944f 362u
     ;; #f1f2f1 11-0601 tpx
     ;; #e8eae8 11-4800 tpx
     ;; #dad9d6 cool g r a y 1 u
     ;; #c5c5c5 cool g r a y 3 u
     ;; #adaeb0 cool g r a y 5 u
     ;; #939598 cool g r a y 8 u

     ;; pastel
     ;; #e4f4e9 9063u
     ;; #c5f2e6 9520u
     ;; #ffcfd8 9284u


     ;; #69615f 440u
     ;; #4c4e56 black7u
     ;; #885a61 195u
     ;; #f65058 r e d 032u
     ;; #bc3e44 3517u
     ;; #34855b 348u
     ;; #546758 350u
     ;; #4982cf 285u
     ;; #3a499c Reflex B l u e U
     ;; #65428a medium p u r p l e
    #+end_src

* Navigation
** Search Everything
   #+begin_src emacs-lisp
     (use-package counsel
       :config
       (setq counsel-git-cmd "rg --files")
       (setq counsel-rg-base-command
             "rg --smart-case -M 120 --hidden --no-heading --line-number --color never %s .")
       (global-set-key (kbd "M-x") 'counsel-M-x)
       (global-set-key (kbd "C-x C-f") 'counsel-find-file)
       (global-set-key (kbd "<f1> f") 'counsel-describe-function)
       (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
       (global-set-key (kbd "<f1> l") 'counsel-find-library)
       (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
       (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
       (global-set-key (kbd "C-c g") 'counsel-git)
       (global-set-key (kbd "C-c j") 'counsel-git-grep)
       (global-set-key (kbd "C-c k") 'counsel-rg)
       (global-set-key (kbd "C-x l") 'counsel-locate)
       (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))

     (use-package ivy
       :diminish ivy-mode
       :config
       (use-package ivy-hydra)
       (ivy-mode 1)
       (define-key my-keys-minor-mode-map (kbd "C-c C-r") 'ivy-resume)
       (setq ivy-use-selectable-prompt t)

       ;; enable bookmarks and recent-f
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t)
       (setq ivy-initial-inputs-alist nil)
       (defun ivy-switch-buffer-occur ()
         "Occur function for `ivy-switch-buffer' using `ibuffer'."
         (ibuffer nil (buffer-name) (list (cons 'name ivy--old-re))))
       (ivy-set-occur 'ivy-switch-buffer 'ivy-switch-buffer-occur)
       ;;(global-set-key "\C-s" 'counsel-grep-or-swiper)
       (global-set-key "\C-s" 'swiper-isearch)
       (define-key evil-normal-state-map (kbd "/") 'swiper-isearch)

       (setq counsel-grep-base-command
       "rg -i -M 120 --no-heading --line-number --color never '%s' %s")
       (setq ivy-re-builders-alist
             '((t . ivy--regex-plus))))
   #+end_src

** Windows
   #+BEGIN_SRC emacs-lisp
     (define-key my-keys-minor-mode-map (kbd "C-h") 'evil-window-left)
     (define-key my-keys-minor-mode-map (kbd "C-j") 'evil-window-down)
     (define-key my-keys-minor-mode-map (kbd "C-k") 'evil-window-up)
     (define-key my-keys-minor-mode-map (kbd "C-l") 'evil-window-right)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package avy
      :config
      (define-key my-keys-minor-mode-map (kbd "C-;") 'avy-goto-char-timer)
      (define-key my-leader-map (kbd ";") 'avy-goto-char-timer))
   #+END_SRC

* Notes
  #+begin_src emacs-lisp
    (use-package deft
      :defer t
      :config
      (setq deft-extensions '("txt" "tex" "org"))
      (setq deft-directory "~/Dropbox/org/")
      (setq deft-use-filename-as-title t)
      (setq deft-use-filter-string-for-filename t)
      (setq deft-default-extension "org")
      (setq deft-recursive t))
  #+end_src
* Org
  #+begin_src emacs-lisp
    (use-package htmlize)

    (setq org-directory (expand-file-name "~/Dropbox/org"))
    (setq org-default-notes-file (concat org-directory "/GTD.org"))
    (define-key my-keys-minor-mode-map "\C-cc" 'org-capture)
    (define-key my-keys-minor-mode-map "\C-cl" 'org-store-link)

    (defun draft-org-files ()
      (directory-files-recursively "~/Dropbox/org/writing/" ".*\.org"))

    (setq org-refile-targets '((nil :maxlevel . 3)
                               (org-agenda-files :maxlevel . 3)
                               (draft-org-files :maxlevel . 3)))
    (setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
    (setq org-refile-use-outline-path 'file)                  ; Show full paths for refiling
    (setq org-refile-allow-creating-parent-nodes 'confirm)

    (add-hook 'org-mode-hook 'turn-on-auto-fill)

    (setq org-capture-templates
          '(("g" "GTD" entry (file+headline "~/Dropbox/org/GTD.org" "Inbox") "* %?\n")
            ("t" "TDD" checkitem (file "~/Dropbox/org/tdd.org"))))

    (add-hook 'org-capture-mode-hook 'evil-insert-state)

    (setq org-use-speed-commands nil)

    (evil-define-key 'normal org-mode-map
    (kbd "M-l") 'org-shiftmetaright
    (kbd "M-h") 'org-shiftmetaleft
    (kbd "M-k") 'org-move-subtree-up
    (kbd "M-j") 'org-move-subtree-down
    "<" 'org-clock-in
    ">" 'org-clock-out
    "4" 'org-archive-subtree
    "2" 'counsel-org-tag
    "3" 'org-refile
    "t" 'org-todo)

    (add-to-list 'org-modules "org-habit")
    (setq org-log-into-drawer t)

    (setq org-todo-keywords
    '((sequence "TODO" "PR" "QA" "|" "DONE(!)" "CANCELED")))
  #+end_src
** org-babel
   #+begin_src emacs-lisp
  (require 'ob-js)
   (org-babel-do-load-languages 'org-babel-load-languages
                                '(
                                  (shell . t)))
   #+end_src
** org-capture
   #+begin_src emacs-lisp
  ;; emacsclient -ca "" --frame-parameters='(quote (name . "global-org-capture"))' -e "(counsel-org-capture)"
  ;; https://cestlaz.github.io/posts/using-emacs-24-capture-2/
  ;; Bind Key to: emacsclient -e "(make-capture-frame)"
  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame"
    (if (equal "global-org-capture" (frame-parameter nil 'name))
        (progn
          (delete-frame))))

  (defadvice org-capture-destroy
      (after delete-capture-frame activate)
    "Advise capture-destroy to close the frame"
    (if (equal "global-org-capture" (frame-parameter nil 'name))
        (progn
          (delete-frame))))

  ;; make the frame contain a single window. by default org-capture
  ;; splits the window.
  (add-hook 'org-capture-mode-hook
            'delete-other-windows)
   #+end_src
** org-publish
   #+begin_src emacs-lisp
  (require 'ox-publish)
  (setq system-time-locale "C") ;; make sure time local is in english when exporting
  (setq org-html-validation-link nil)
  (setq org-publish-project-alist
        '(
          ("wiki-files"
           :base-directory "~/Dropbox/wiki"
           :base-extension "org"
           :publishing-directory "~/projects/wiki/"
           :recursive t
           :publishing-function org-html-publish-to-html
           :headline-levels 4             ; Just the default for this project.
           :auto-preamble t
           :html-head nil
           :html-head-extra nil
           :body-only nil
           )
          ;; ... add all the components here (see below)...
          ("wiki" :components ("wiki-files")))
        org-export-with-toc nil
        org-html-doctype "html5"
        org-html-head nil
        org-html-head-include-default-style nil
        org-html-head-include-scripts nil
        org-html-html5-fancy t
        org-html-indent t)
   #+end_src
  #+begin_src emacs-lisp
    (use-package palimpsest
      :config
      (add-hook 'org-mode-hook 'palimpsest-mode))
  #+end_src

  Keep emacs fast with large files.
  #+begin_src emacs-lisp
    (defun check-large-file-hook ()
      "If a file is over a given size, turn off minor modes."
      (when (> (buffer-size) (* 1024 100)) ;; 100K
        (fundamental-mode)
        (font-lock-mode -1)
        (setq buffer-read-only t)
        (buffer-disable-undo)))

    (add-hook 'find-file-hooks 'check-large-file-hook)
  #+end_src

  #+begin_src emacs-lisp
    (defun my-prog-mode-auto-fill-hook ()
      (setq fill-column 80)
      (set (make-local-variable 'comment-auto-fill-only-comments) t)
      (auto-fill-mode t))
    (add-hook 'prog-mode-hook 'my-prog-mode-auto-fill-hook)
  #+end_src

* AutoCompletions
  #+BEGIN_SRC emacs-lisp
  (setq hippie-expand-try-functions-list '(try-expand-dabbrev try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill try-complete-file-name-partially try-complete-file-name try-expand-all-abbrevs try-expand-list try-expand-line))
  (require 'mode-local)
  (setq-mode-local elisp-mode hippie-expand-try-functions-list '(try-expand-dabbrev try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill try-complete-file-name-partially try-complete-file-name try-expand-all-abbrevs try-expand-list try-expand-line try-complete-lisp-symbol-partially try-complete-lisp-symbol))
  (define-key evil-insert-state-map (kbd "s-/") 'hippie-expand)
  #+END_SRC
* Bindings
** General
   Shows key combination helper in minibuffer
   #+begin_src emacs-lisp
    (use-package which-key
      :config
      (which-key-mode))
   #+end_src

   Combined with C-M-c (exit-recursive-edit) allows to stop doing
   something, do something else and come back to it later.
   #+begin_src emacs-lisp
    (define-key my-keys-minor-mode-map (kbd "C-M-e") 'recursive-edit)
   #+end_src

   I use spc as my leader key so I want it available everywhere
   #+begin_src emacs-lisp
  (define-key evil-motion-state-map (kbd "SPC") nil)
   #+end_src

   I only use keychords as a shortcut to exit vim insert mode.
   Maybe I could use it for more?
   #+begin_src emacs-lisp
    (use-package key-chord
      :config
      (key-chord-mode 1)
      (key-chord-define evil-insert-state-map  "jk" 'evil-normal-state))
   #+end_src

   Make grep buffers writable with ~C-c C-p~. Apply changes with ~C-c C-e~
   #+begin_src emacs-lisp
    ;; makes grep buffers writable and apply the changes to files.
    (use-package wgrep
      :defer t)
   #+end_src

   #+begin_src emacs-lisp
    (use-package paredit
      :diminish paredit-mode
      :config
      (add-hook 'emacs-lisp-mode-hook #'paredit-mode)
      (define-key  my-keys-minor-mode-map (kbd "C-)") 'paredit-forward-slurp-sexp)
      (define-key my-keys-minor-mode-map (kbd "C-}") 'paredit-forward-barf-sexp))

    (use-package parinfer
      :ensure t
      :bind
      (("C-," . parinfer-toggle-mode))
      :init
      (progn
        (setq parinfer-extensions
              '(defaults       ; should be included.
                 pretty-parens  ; different paren styles for different modes.
                 evil           ; If you use Evil.
                 ;; lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
                 paredit        ; Introduce some paredit commands.
                 smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
                 smart-yank))   ; Yank behavior depend on mode.
        (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
        (add-hook 'common-lisp-mode-hook #'parinfer-mode)
        (add-hook 'lisp-mode-hook #'parinfer-mode)))

    (define-key my-keys-minor-mode-map (kbd "C-u") 'evil-scroll-up)
    (define-key my-leader-map (kbd "u") 'universal-argument)

    (define-key my-leader-map (kbd "b") 'ivy-switch-buffer)

    (use-package expand-region
      :config
      (define-key my-leader-map (kbd "SPC") 'er/expand-region))

    (define-key my-leader-map (kbd "a") 'org-agenda)
    (define-key my-leader-map (kbd "r") 'counsel-recentf)
    (define-key my-leader-map (kbd "R") 'revert-buffer)
    (define-key my-leader-map (kbd "f") 'counsel-rg)
    (define-key my-leader-map (kbd "jc") 'org-clock-jump-to-current-clock)

    (define-key my-leader-map (kbd "jd") '(lambda () (interactive) (find-file "~/Dropbox/org/writing/drafts")))
    (define-key my-leader-map (kbd "je") '(lambda () (interactive) (find-file (concat user-emacs-directory "Aurelien.org"))))
    (define-key my-leader-map (kbd "jg") '(lambda () (interactive) (find-file "~/Dropbox/org/GTD.org")))
    (define-key my-leader-map (kbd "jp") '(lambda () (interactive) (find-file "~/projects/")))
    (define-key my-leader-map (kbd "jw") '(lambda () (interactive) (find-file "~/Dropbox/wiki")))

    (define-key my-leader-map (kbd "jj") 'dired-jump)
    (define-key my-leader-map (kbd "jo") 'counsel-org-goto-all)
    (define-key my-leader-map (kbd "i") 'counsel-imenu)
    (define-key my-leader-map (kbd "b") 'counsel-ibuffer)
    (define-key my-leader-map (kbd "m") 'counsel-bookmark)
    (define-key my-leader-map (kbd "k") 'recompile)
    (define-key my-leader-map (kbd "K") 'compile)

    (define-key my-leader-map (kbd "d") 'deft)
    (define-key my-leader-map (kbd "<f5>") 'ispell-buffer)
    (use-package define-word
      :config
      (define-key my-leader-map (kbd "<f6>") 'define-word-at-point))

    (defun lookup-synonyms (word)
      (interactive (list (save-excursion (car (ispell-get-word nil)))))
      (browse-url (format "http://en.wiktionary.org/wiki/%s" word)))

    (define-key my-leader-map (kbd "<f7>") 'lookup-synonyms)
    (define-key my-leader-map (kbd "oh") 'evil-search-highlight-persist-remove-all)
    (defun hide-line-numbers ()
      (interactive)
      (setq display-line-numbers (quote nil)))
    (define-key my-leader-map (kbd "olh") 'hide-line-numbers)
    (defun show-line-numbers ()
      (interactive)
      (setq display-line-numbers (quote absolute)))
    (define-key my-leader-map (kbd "oll") 'show-line-numbers)
    (define-key my-leader-map (kbd "ow") 'visual-line-mode)
    (define-key my-leader-map (kbd "of") 'auto-fill-mode)
    (define-key my-leader-map (kbd "os") 'org-strike-header)
    (define-key my-leader-map (kbd "og") 'global-hl-line-mode)
    (use-package rainbow-mode
      :bind (:map my-leader-map
                  ("or" . rainbow-mode)))
    ;; gives each line only one visual line and don't show a continuation on next line
    (set-default 'truncate-lines t)
    (define-key my-leader-map (kbd "ot") 'toggle-truncate-lines)

    (define-key evil-normal-state-map (kbd "<mouse-8>") 'previous-buffer)
    (define-key evil-normal-state-map (kbd "<mouse-9>") 'next-buffer)
    (define-key evil-normal-state-map (kbd "[b") 'previous-buffer)
    (define-key evil-normal-state-map (kbd "]b") 'next-buffer)
    (define-key evil-normal-state-map (kbd "]e") 'next-error)
    (define-key evil-normal-state-map (kbd "[e") 'previous-error)

    (use-package windresize
      :bind (:map evil-normal-state-map
                  ("C-w r" . windresize)))

    (global-set-key (kbd "C-c v") 'ivy-push-view)
    (global-set-key (kbd "C-c V") 'ivy-pop-view)
   #+end_src
** Find file in project
   Here is complete setup you could insert into ~/.emacs.d/init.el,

   #+BEGIN_SRC emacs-lisp :tangle no
     ;; if the full path of current file is under SUBPROJECT1 or SUBPROJECT2
     ;; OR if I'm reading my personal issue track document,
     (defun my-setup-develop-environment ()
       (interactive)
       (when (ffip-current-full-filename-match-pattern-p "\\(PROJECT_DIR\\|issue-track.org\\)")
         ;; Though PROJECT_DIR is team's project, I care only its sub-directory "subproj1""
         (setq-local ffip-project-root "~/projs/PROJECT_DIR/subproj1")
         ;; well, I'm not interested in concatenated BIG js file or file in dist/
         (setq-local ffip-find-options "-not -size +64k -not -iwholename '*/dist/*'")
         ;; for this project, I'm only interested certain types of files
         (setq-local ffip-patterns '("*.html" "*.js" "*.css" "*.java" "*.xml" "*.js"))
         ;; maybe you want to search files in `bin' directory?
         (setq-local ffip-prune-patterns (delete "*/bin/*" ffip-prune-patterns))
         ;; exclude `dist/' directory
         (add-to-list 'ffip-prune-patterns "*/dist/*"))
       ;; insert more WHEN statements below this line for other projects
       )

     ;; most major modes inherit from prog-mode, so below line is enough
     (add-hook 'prog-mode-hook 'my-setup-develop-environment)
   #+END_SRC

   All variables may be overridden on a per-directory basis in your
   .dir-locals.el. See (info “(Emacs) Directory Variables”) for
   details.

   You can place .dir-locals.el into your project root directory.

   A sample .dir-locals.el,

   #+BEGIN_SRC emacs-lisp :tangle no
     ((nil . ((ffip-project-root . "~/projs/PROJECT_DIR")
              ;; ignore files bigger than 64k and directory "dist/" when searching
              (ffip-find-options . "-not -size +64k -not -iwholename '*/dist/*'")
              ;; only search files with following extensions
              (ffip-patterns . ("*.html" "*.js" "*.css" "*.java" "*.xml" "*.js"))
              (eval . (progn
                        (require 'find-file-in-project)
                        ;; ignore directory ".tox/" when searching
                        (setq ffip-prune-patterns `("*/.tox/*" ,@ffip-prune-patterns))
                        ;; Do NOT ignore directory "bin/" when searching
                        (setq ffip-prune-patterns `(delete "*/bin/*" ,@ffip-prune-patterns))))
              )))
   #+END_SRC

   To install fd (rust replacement for find), download it
   [[https://github.com/sharkdp/fd/releases][here]] and run ~sudo dpkg -i fd_7.0.0_amd64.deb~. You can then choose
   to use `fd` instead of find.
   #+begin_src emacs-lisp
     (use-package find-file-in-project
      :defer t
      :config

      (add-to-list 'ffip-prune-patterns "*/.git/*")
      (add-to-list 'ffip-prune-patterns "*/dist/*")
      (add-to-list 'ffip-prune-patterns "*/.idea/*")
      (add-to-list 'ffip-prune-patterns "*/.nuxt/*")
      (add-to-list 'ffip-prune-patterns "*/spec/coverage/*")
      (add-to-list 'ffip-prune-patterns "node_modues/*")
      (setq ffip-prefer-ido-mode nil)
      (setq ffip-use-rust-fd t))
      (setq ffip-ignore-filenames '(

      ))
     (define-key my-leader-map (kbd "t") 'find-file-in-project)
     (define-key my-leader-map (kbd "T") 'find-file-in-project-by-selected)
     (setq ffip-ignore-filenames (seq-remove (lambda (astring) (string= astring "*.png")) ffip-ignore-filenames))
     (setq ffip-ignore-filenames (seq-remove (lambda (astring) (string= astring "*.jpg")) ffip-ignore-filenames))
     (setq ffip-ignore-filenames (seq-remove (lambda (astring) (string= astring "*.jpeg")) ffip-ignore-filenames))
     (setq ffip-ignore-filenames (seq-remove (lambda (astring) (string= astring "*.gif")) ffip-ignore-filenames))
     (setq ffip-ignore-filenames (seq-remove (lambda (astring) (string= astring "*.bmp")) ffip-ignore-filenames))
     (setq ffip-ignore-filenames (seq-remove (lambda (astring) (string= astring "*.ico")) ffip-ignore-filenames))
     (define-key evil-normal-state-map (kbd "gf") 'find-file-in-project-at-point)
   #+end_src
** Drag stuff
   #+begin_src emacs-lisp
(use-package drag-stuff
  :config
  (drag-stuff-global-mode t)
  (define-key my-keys-minor-mode-map (kbd "C-M-<up>") 'drag-stuff-up)
  (define-key my-keys-minor-mode-map (kbd "C-M-<down>") 'drag-stuff-down))
   #+end_src
* Diminish
  Don't show some modes to keep my modeline clean.
  #+begin_src emacs-lisp
    (use-package diminish
      :config
      (diminish 'prettier-js-mode)
      (diminish 'subword-mode)
      (diminish 'eldoc-mode)
      (diminish 'auto-revert-mode)
      (diminish 'indium-interaction-mode)
      (diminish 'paredit-everywhere-mode)
      (diminish 'evil-lispy-mode)
      (diminish 'company-mode)
      (diminish 'paredit-mode)
      (diminish 'my-keys-minor-mode)
      (diminish 'ivy-mode)
      (diminish 'undo-tree-mode)
      (diminish 'evil-commentary-mode)
      (diminish 'evil-mc-mode)
      (diminish 'yas-minor-mode)
      (diminish 'which-key-mode)
      (diminish 'whitespace-mode)
      (diminish 'palimpsest-mode)
      (diminish 'flycheck-mode)
      (diminish '0blayout-mode)
      (diminish 'auto-fill-function)
      (diminish 'visual-line-mode))
      (diminish 'ruby-end-mode)
      (diminish 'ruby-interpolation-mode)
      (diminish 'prettier-mode)
      (diminish 'subword-mode)
      (diminish 'abbrev-mode)
  #+end_src

  Process gitsh finished
