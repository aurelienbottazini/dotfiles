#+TITLE: Aurelien Bottazini's Emacs configuration
#+OPTIONS: toc:4 h:4
#+PROPERTY: header-args :results silent

It is important to load
those first as it can impact the loading of other packages
#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (load custom-file)
#+end_src

In my configuration I have some parts that are mac or linux specific.
Those variables make it easier to apply those env specific setup.
#+begin_src emacs-lisp
  (setq *is-linux* (string-equal system-type "gnu/linux"))
  (setq *is-mac* (string-equal system-type "darwin"))
#+end_src

Where to find additional lisp files.
#+begin_src emacs-lisp
  (let ((default-directory  "~/.emacs.d/site-lisp/"))
    (normal-top-level-add-to-load-path '("."))
    (normal-top-level-add-subdirs-to-load-path))
#+end_src

Keymap where i store my global keybindings.
It makes it harder for major modes to minor modes trying to override my personal keybindings.
#+begin_src emacs-lisp
  (defvar my-keys-minor-mode-map (make-keymap) "my-keys-minor-mode keymap.")
  (define-minor-mode my-keys-minor-mode
    "A minor mode so that my key settings override annoying major modes."
    t " my-keys" 'my-keys-minor-mode-map)
  (my-keys-minor-mode 1)

    (defadvice load (after give-my-keybindings-priority)
      "Try to ensure that my keybindings always have priority."
      (if (not (eq (car (car minor-mode-map-alist)) 'my-keys-minor-mode))
          (let ((mykeys (assq 'my-keys-minor-mode minor-mode-map-alist)))
            (assq-delete-all 'my-keys-minor-mode minor-mode-map-alist)
            (add-to-list 'minor-mode-map-alist mykeys))))
    (ad-activate 'load)
#+end_src

* Cute functions

  #+begin_src emacs-lisp
    (defun sudo ()
      "Use TRAMP to `sudo' the current buffer."
      (interactive)
      (when buffer-file-name
        (find-alternate-file
         (concat "/sudo:root@localhost:"
                 buffer-file-name))))

    (defun beautify-json ()
      "Make that json readable."
      (interactive)
      (let ((b (if mark-active (min (point) (mark)) (point-min)))
            (e (if mark-active (max (point) (mark)) (point-max))))
        (shell-command-on-region b e
                                 "python -mjson.tool" (current-buffer) t)))

    (defun org-strike-header ()
      "Strikes current org-header using + markers."
      (interactive)
      (beginning-of-line)
      (re-search-forward "\*+ ")
      (insert "+")
      (end-of-line)
      (insert "+"))

    (defun run-node-on-buffer ()
      "Run node on current buffer or region."
      (interactive)
      (shell-command-on-region (point-min) (point-max) "node"))

    (defun my-reload-dir-locals-for-current-buffer ()
      "Reload dir locals for the current buffer."
      (interactive)
      (let ((enable-local-variables :all))
        (hack-dir-local-variables-non-file-buffer)))

    (defun my-reload-dir-locals-for-all-buffer-in-this-directory ()
      "For every buffer with the same `default-directory` as the current buffer's, reload dir-locals."
      (interactive)
      (let ((dir default-directory))
        (dolist (buffer (buffer-list))
          (with-current-buffer buffer
            (when (equal default-directory dir))
            (my-reload-dir-locals-for-current-buffer)))))

    (defun filepath-with-line-number-for-current-buffer ()
      "Return a string with Buffer-file-name:line-number.
    Make it easier to prepare commands for tools like rspec"
      (interactive)
      (concat (buffer-file-name) ":" (number-to-string (line-number-at-pos))))
  #+end_src

* Initialize Packages
  #+begin_src emacs-lisp
    (setq package-archives
          '(("melpa"       . "http://melpa.milkbox.net/packages/")
            ("marmalade" . "http://marmalade-repo.org/packages/")
            ("gnu"         . "http://elpa.gnu.org/packages/")))

    (setq package-user-dir (concat user-emacs-directory "elpa"))

    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    (defun require-package (package &optional min-version)
      "Ask elpa to install given PACKAGE. You can specify a MIN-VERSION for your PACKAGE."
      (unless (package-installed-p package min-version)
        (package-install package)))

    (require-package 'use-package)
    (require 'use-package)
    (setq use-package-always-ensure t)

  #+end_src

  Show loading time in *messages* buffer. Make it easier to optimize
  emacs dotfiles
  #+begin_src emacs-lisp
    (defun sanityinc/time-subtract-millis (b a)
      (* 1000.0 (float-time (time-subtract b a))))

    (defvar sanityinc/require-times nil
      "A list of (FEATURE . LOAD-DURATION).
    LOAD-DURATION is the time taken in milliseconds to load FEATURE.")

    (defadvice require (around sanityinc/build-require-times (feature &optional filename noerror) activate)
      "Note in `sanityinc/require-times' the time taken to require each feature."
      (let* ((already-loaded (memq feature features))
             (require-start-time (and (not already-loaded) (current-time))))
        (prog1
            ad-do-it
          (when (and (not already-loaded) (memq feature features))
            (let ((time (sanityinc/time-subtract-millis (current-time) require-start-time)))
              (add-to-list 'sanityinc/require-times
                           (cons feature time)
                           t))))))

    (defun sanityinc/show-init-time ()
      (message "init completed in %.2fms"
               (sanityinc/time-subtract-millis after-init-time before-init-time)))

    (add-hook 'after-init-hook 'sanityinc/show-init-time)
  #+end_src

* Better Defaults
  I like setting the path manually as other solutions like ~exec-path-from-shell~
  slow down my emacs.
  #+begin_src emacs-lisp
    (let (home-folder (getenv "HOME"))
      (setenv "PATH" (concat (getenv "HOME") "/.config/yarn/global/node_modules/.bin/:"
                             (getenv "HOME") "/work/dox-compose/bin/:"
                             (getenv "HOME") "/.nvm/versions/node/v8.9.1/bin/:"
                             (getenv "HOME") "/.nvm/versions/node/v8.11.1/bin/:"
                             (getenv "HOME") "/.rbenv/shims:"
                             (getenv "HOME") "/.rbenv/bin:"
                             (getenv "HOME") "/.fzf/bin:"
                             (getenv "PATH"))))

    (setq exec-path '("~/.config/yarn/global/node_modules/.bin/"
                      "~/work/dox-compose/bin/"
                      "~/.nvm/versions/node/v8.11.1/bin/"
                      "~/.nvm/versions/node/v8.9.1/bin/"
                      "~/.rbenv/bin/"
                      "~/.rbenv/shims/"
                      "~/dotfiles/bin/"
                      "~/.fzf/bin"
                      "/usr/local/bin/"
                      "/usr/local/sbin/"
                      "/usr/bin/"
                      "/bin/"
                      "/usr/sbin/"
                      "/sbin/"))
  #+end_src

  #+begin_src emacs-lisp
    (setq inhibit-startup-message t)
    (setq delete-by-moving-to-trash t)

    ;; show end of buffer on left fringe
    (setq-default default-indicate-empty-lines nil)

    (defalias 'yes-or-no-p 'y-or-n-p)
    (setq ring-bell-function 'ignore)

    (setq backup-by-copying t      ; don't clobber symlinks
          backup-directory-alist
          '((".*" . "~/.local/share/emacs-saves"))    ; don't litter my fs tree
          delete-old-versions t
          kept-new-versions 6
          kept-old-versions 2
          auto-save-default t ;files starting with # are generated by autosave
          auto-save-timeout 60 ; number of seconds before auto-saving
          auto-save-interval 200 ; number of keystrokes before auto-saves
          version-control t) ; use versioned backups
    (setq create-lockfiles nil)
    (setq auto-save-file-name-transforms
          `((".*" ,"~/.local/share/emacs-saves" t)))

    ;; if file has no change, just load any changes
    ;; coming from an external process
    (global-auto-revert-mode 1)

    ;; sentences end with one space after point
    (setq sentence-end-double-space nil)

    ;;; replace selected text when typing
    (pending-delete-mode 1)

    (prefer-coding-system 'utf-8)
    (modify-coding-system-alist 'process "\\*compilation\\*\\'"   'utf-8)

    (when (or *is-mac* *is-linux*)
      (use-package xclip
        :config
        (xclip-mode 1)))
  #+end_src

  I want error highlights and binding for those in shell modes too.
  #+BEGIN_SRC emacs-lisp
    (add-hook 'shell-mode-hook 'compilation-shell-minor-mode)
  #+END_SRC

** tabs and whitespace
   By default I disable tabs.
   In addition I have ~whitespace-mode~ because sometimes when copy pasting code from
   external sources those external sources have tabs.

   I don't use the ~global-whitespace-mode~ because some emacs mode
   like ~magit~ use tabs.

   You can remove all tabs from your buffer with ~untabify~
   #+begin_src emacs-lisp
     (setq-default
      indent-tabs-mode nil    ;no tabs
      c-basic-offset 2)
     (setq-default whitespace-style '(face trailing tabs tab-mark))
     (defun ab-turn-on-whitespace-mode ()
       (progn (whitespace-mode) (diminish 'whitespace-mode)))
     (add-hook 'prog-mode-hook 'ab-turn-on-whitespace-mode)
     (add-hook 'org-mode-hook 'ab-turn-on-whitespace-mode)
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+end_src

* Vim / Evil

  Awesome [[https://github.com/noctuid/evil-guide][Evil Guide]]
  #+begin_src emacs-lisp
    (use-package evil
      :ensure t
      :init
      (setq evil-toggle-key "C-`")          ;switch between evil and emacs mode
      (setq evil-mode-line-format nil)
      :config

      (evil-mode 1)

      (use-package evil-surround
        :config
        (global-evil-surround-mode 1))

      (use-package evil-commentary
        :diminish evil-commentary-mode
        :config
        (evil-commentary-mode))

      (use-package evil-fringe-mark
        :config
        (setq-default evil-fringe-mark-show-special t))

      (use-package evil-visualstar
        :config
        (global-evil-visualstar-mode t))

      (use-package evil-indent-plus
        :config
        (evil-indent-plus-default-bindings))

      (use-package evil-matchit
        :config
        (global-evil-matchit-mode 1))

      (use-package evil-search-highlight-persist
        :config
        (global-evil-search-highlight-persist t))

      (evil-set-initial-state 'deft-mode 'insert)
      (add-hook 'with-editor-mode-hook 'evil-insert-state)
      (evil-define-key 'insert deft-mode-map (kbd "C-p") 'previous-line)
      (evil-define-key 'insert deft-mode-map (kbd "C-n") 'next-line)

      (evil-ex-define-cmd "W" 'save-buffer)
      (bind-keys :map evil-normal-state-map :prefix-map my-leader-map :prefix "SPC"))
  #+end_src

* Dired

  #+begin_src emacs-lisp
    (setq ls-lisp-use-insert-directory-program t) ;same ls-lisp for Dired regardless of the platform

    ;; on mac there is some weird prefixing going on for GNU Tools like ls.
    ;; I favor GNU ls over MacOSX default ls
    (when *is-mac*
      (setq insert-directory-program "gls"))

    (require 'dired )
    (defun my-dired-mode-setup ()
      "to be run as hook for `dired-mode'."
      (dired-hide-details-mode 1))
    (add-hook 'dired-mode-hook 'my-dired-mode-setup)

    (put 'dired-find-alternate-file 'disabled nil)
    (setq dired-dwim-target t)
    (add-hook 'dired-load-hook
              (lambda ()
                (load "dired-x")
                ;; Set dired-x global variables here.  For example:
                ;; (setq dired-guess-shell-gnutar "gtar")
                ;; (setq dired-x-hands-off-my-keys nil)
                (setq dired-recursive-copies (quote always)) ; “always” means no asking
                (setq dired-recursive-deletes (quote top)) ; “top” means ask once
                ))

    (eval-after-load "dired"
      '(progn
         (define-key dired-mode-map "-" 'dired-up-directory)
         (define-key dired-mode-map (kbd "C-u k") 'dired-kill-subdir)
         (define-key dired-mode-map (kbd "SPC") nil)
         (define-key dired-mode-map "e" 'ora-ediff-files)
         (define-key dired-mode-map "Y" 'ora-dired-rsync)
         (evil-define-key 'normal dired-mode-map
           "gg" 'evil-goto-first-line
           "^" '(lambda () (interactive) (find-alternate-file ".."))))
      )

    (defun dired-dwim-target-directory ()
      ;; Try to guess which target directory the user may want.
      ;; If there is a dired buffer displayed in one of the next windows,
      ;; use its current subdir, else use current subdir of this dired buffer.
      (let ((this-dir (and (eq major-mode 'dired-mode)
                           (dired-current-directory))))
        ;; non-dired buffer may want to profit from this function, e.g. vm-uudecode
        (if dired-dwim-target
            (let* ((other-win (get-window-with-predicate
                               (lambda (window)
                                 (with-current-buffer (window-buffer window)
                                   (eq major-mode 'dired-mode)))
                               nil
                               'visible)) ; <========================
                   (other-dir (and other-win
                                   (with-current-buffer (window-buffer other-win)
                                     (and (eq major-mode 'dired-mode)
                                          (dired-current-directory))))))
              (or other-dir this-dir))
          this-dir)))


    (defun ora-ediff-files ()
      (interactive)
      (let ((files (dired-get-marked-files))
            (wnd (current-window-configuration)))
        (if (<= (length files) 2)
            (let ((file1 (car files))
                  (file2 (if (cdr files)
                             (cadr files)
                           (read-file-name
                            "file: "
                            (dired-dwim-target-directory)))))
              (if (file-newer-than-file-p file1 file2)
                  (ediff-files file2 file1)
                (ediff-files file1 file2))
              (add-hook 'ediff-after-quit-hook-internal
                        (lambda ()
                          (setq ediff-after-quit-hook-internal nil)
                          (set-window-configuration wnd))))
          (error "no more than 2 files should be marked"))))


    ;;;###autoload
    (defun ora-dired-rsync (dest)
      (interactive
       (list
        (expand-file-name
         (read-file-name
          "Rsync to:"
          (dired-dwim-target-directory)))))
      ;; store all selected files into "files" list
      (let ((files (dired-get-marked-files
                    nil current-prefix-arg))
            ;; the rsync command
            (tmtxt/rsync-command
             "rsync -arvz --progress "))
        ;; add all selected file names as arguments
        ;; to the rsync command
        (dolist (file files)
          (setq tmtxt/rsync-command
                (concat tmtxt/rsync-command
                        (shell-quote-argument file)
                        " ")))
        ;; append the destination
        (setq tmtxt/rsync-command
              (concat tmtxt/rsync-command
                      (shell-quote-argument dest)))
        ;; run the async shell command
        (async-shell-command tmtxt/rsync-command "*rsync*")
        ;; finally, switch to that window
        (other-window 1)))
  #+end_src

* GUI
  #+begin_src emacs-lisp
    (when window-system
      (when *is-linux*
        ;; (set-frame-font "-*-Operator Mono-light-normal-normal-*-28-*-*-*-m-0-iso10646-1"))
        (set-frame-font "-*-PragmataPro Liga-normal-normal-normal-*-28-*-*-*-m-0-iso10646-1"))
      (when *is-mac*
        (set-frame-font "-*-PragmataPro Liga-normal-normal-normal-*-14-*-*-*-m-0-iso10646-1"))
        (set-fontset-font t 'unicode "Noto Emoji" nil 'prepend))

    (add-to-list 'default-frame-alist '(font . "PragmataPro Liga-12"))
    ;; (add-to-list 'default-frame-alist '(font . "-*-Operator Mono-light-normal-normal-*-28-*-*-*-m-0-iso10646-1"))

    (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
    (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

    (global-hl-line-mode)
    (blink-cursor-mode 0)
    (column-number-mode)

    (electric-indent-mode t)
    (electric-pair-mode t)

    ;; wrap lines when they reach the end of buffer
    ;; trying to toggle this only manually to see if i like it
    ;; (global-visual-line-mode)

    ;; file path in frame title
    (setq frame-title-format
          '((:eval (if (buffer-file-name)
                       (abbreviate-file-name (buffer-file-name))
                     "%b"))))

    (show-paren-mode 1)

    (fringe-mode 20)                        ;makes fringe big enough on linux with HDPI
  #+end_src
** Colors
   Changes modeline color depending on Evil state, if buffer is
   modifier etc...
   #+begin_src emacs-lisp
    (add-to-list 'default-frame-alist '(background-color . "#f1f2f1"))
    (add-to-list 'default-frame-alist '(foreground-color . "#000000"))

       (lexical-let ((default-color (cons (face-background 'mode-line)
                                        (face-foreground 'mode-line))))
       (add-hook 'post-command-hook
                 (lambda ()
                   (let ((color (cond ((minibufferp) default-color)
                                      ((bound-and-true-p lispy-mode) '("#9d7ad2" . "#4c4e56"))
                                      ((evil-emacs-state-p)  '("#ffa2cb" . "#4c4e56"))
                                      ((evil-visual-state-p) '("#adcff1" . "#4c4e56"))
                                      ((evil-insert-state-p)  '("#97d88a" . "#4c4e56"))
                                      ((buffer-modified-p)   '("#f79b2f" . "#4c4e56"))
                                      (t default-color)))
                         )

                     (set-face-attribute 'mode-line nil :box `(:line-width 2 :color ,(car color)))
                     (set-face-background 'mode-line (car color))
                     (set-face-foreground 'mode-line-buffer-id (cdr color))
                     (set-face-foreground 'mode-line (cdr color))))))

   #+end_src
** Color reference
*** Solarized colors
base03    #002b36  8/4 brblack  234 #1c1c1c 15 -12 -12   0  43  54 193 100  21
base02    #073642  0/4 black    235 #262626 20 -12 -12   7  54  66 192  90  26
base01    #586e75 10/7 brgreen  240 #585858 45 -07 -07  88 110 117 194  25  46
base00    #657b83 11/7 bryellow 241 #626262 50 -07 -07 101 123 131 195  23  51
base0     #839496 12/6 brblue   244 #808080 60 -06 -03 131 148 150 186  13  59
base1     #93a1a1 14/4 brcyan   245 #8a8a8a 65 -05 -02 147 161 161 180   9  63
base2     #eee8d5  7/7 white    254 #e4e4e4 92 -00  10 238 232 213  44  11  93
base3     #fdf6e3 15/7 brwhite  230 #ffffd7 97  00  10 253 246 227  44  10  99
yellow    #b58900  3/3 yellow   136 #af8700 60  10  65 181 137   0  45 100  71
orange    #cb4b16  9/3 brred    166 #d75f00 50  50  55 203  75  22  18  89  80
red       #dc322f  1/1 red      160 #d70000 50  65  45 220  50  47   1  79  86
magenta   #d33682  5/5 magenta  125 #af005f 50  65 -05 211  54 130 331  74  83
violet    #6c71c4 13/5 brmagenta 61 #5f5faf 50  15 -45 108 113 196 237  45  77
blue      #268bd2  4/4 blue      33 #0087ff 55 -10 -45  38 139 210 205  82  82
cyan      #2aa198  6/6 cyan      37 #00afaf 60 -35 -05  42 161 152 175  74  63
green     #859900  2/2 green     64 #5f8700 60 -20  65 133 153   0  68 100  60

*** Pantone
   #+begin_src emacs-lisp
     ;; #fff166 101U
     ;; #fccf61 128u
     ;; #f79b2f 130u
     ;; #c97f3a 145u
     ;; #ffa2cb 210u
     ;; #f56d9e 213u
     ;; #dcc6ea 263u
     ;; #bfa1e3 264u
     ;; #9d7ad2 265u
     ;; #adcff1 277u
     ;; #7ab1e8 284u
     ;; #5b8edb 279u
     ;; #8eddeb 304u
     ;; #00b4e4 395u
     ;; #93e8d3 331u
     ;; #97d88a 358u
     ;; #5cb860 360u
     ;; #56944f 362u
     ;; #f1f2f1 11-0601 tpx
     ;; #e8eae8 11-4800 tpx
     ;; #dad9d6 cool g r a y 1 u
     ;; #c5c5c5 cool g r a y 3 u
     ;; #adaeb0 cool g r a y 5 u
     ;; #939598 cool g r a y 8 u

     ;; pastel
     ;; #e4f4e9 9063u
     ;; #c5f2e6 9520u
     ;; #ffcfd8 9284u


     ;; #69615f 440u
     ;; #4c4e56 black7u
     ;; #885a61 195u
     ;; #f65058 r e d 032u
     ;; #bc3e44 3517u
     ;; #34855b 348u
     ;; #546758 350u
     ;; #4982cf 285u
     ;; #3a499c Reflex B l u e U
     ;; #65428a medium p u r p l e
   #+end_src

* Navigation
** Search Everything

   #+begin_src emacs-lisp
     (use-package counsel
       :config
       (setq counsel-git-cmd "rg --files")
       (setq counsel-rg-base-command
             "rg -i -M 120 --no-heading --line-number --color never %s .")
       (global-set-key (kbd "M-x") 'counsel-M-x)
       (global-set-key (kbd "C-x C-f") 'counsel-find-file)
       (global-set-key (kbd "<f1> f") 'counsel-describe-function)
       (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
       (global-set-key (kbd "<f1> l") 'counsel-find-library)
       (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
       (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
       (global-set-key (kbd "C-c g") 'counsel-git)
       (global-set-key (kbd "C-c j") 'counsel-git-grep)
       (global-set-key (kbd "C-c k") 'counsel-rg)
       (global-set-key (kbd "C-x l") 'counsel-locate)
       (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))

     (use-package ivy
       :diminish ivy-mode
       :config
       (use-package ivy-hydra)
       (ivy-mode 1)
       (define-key my-keys-minor-mode-map (kbd "C-c C-r") 'ivy-resume)
       (setq ivy-use-selectable-prompt t)

       ;; enable bookmarks and recent-f
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t)
       (setq ivy-initial-inputs-alist nil)
       (defun ivy-switch-buffer-occur ()
         "Occur function for `ivy-switch-buffer' using `ibuffer'."
         (ibuffer nil (buffer-name) (list (cons 'name ivy--old-re))))
       (ivy-set-occur 'ivy-switch-buffer 'ivy-switch-buffer-occur)
       (global-set-key "\C-s" 'counsel-grep-or-swiper)
       (define-key evil-normal-state-map (kbd "/") 'counsel-grep-or-swiper)
       (setq counsel-grep-base-command
       "rg -i -M 120 --no-heading --line-number --color never '%s' %s")
       (setq ivy-re-builders-alist
             '((t . ivy--regex-plus))))
   #+end_src

** Project navigation

   [[https://projectile.readthedocs.io/en/latest/projects/#adding-custom-project-types][Custom project types]]
   #+begin_src emacs-lisp
     (use-package projectile
       :init
       (setq projectile-switch-project-action 'projectile-dired)
       (setq projectile-enable-caching nil)
       (setq projectile-completion-system 'ivy)
       :bind (:map my-leader-map
                   ("p" . projectile-commander))
       :config
       (use-package counsel-projectile)
       (projectile-mode)
       (setq projectile-mode-line
             '(:eval (list " P["
                           (propertize (projectile-project-name)
                                       'face '(:slant italic :weight bold))
                           "]")))
       )

     (use-package dumb-jump
       :bind (:map evil-normal-state-map
                   ("gd" . dumb-jump-go)
                   ("gD" . dumb-jump-go-other-window))
       :init
       (setq dumb-jump-selector 'ivy))
       #+end_src
** Tags
#+begin_src emacs-lisp
  (use-package counsel-etags
   :bind (:map my-leader-map
   ("e" . counsel-etags-find-tag-at-point)))
#+end_src
* AutoCompletions
  #+begin_src emacs-lisp
    (use-package company
      :diminish company-mode
      :init
      (add-hook 'after-init-hook 'global-company-mode)
      (setq company-show-numbers t)
      :config
      (defun ora-company-number ()
        "Forward to `company-complete-number'.
    Unless the number is potentially part of the candidate.
    In that case, insert the number."
        (interactive)
        (let* ((k (this-command-keys))
               (re (concat "^" company-prefix k)))
          (if (cl-find-if (lambda (s) (string-match re s))
                          company-candidates)
              (self-insert-command 1)
            (company-complete-number (string-to-number k)))))
      (let ((map company-active-map))
        (mapc
         (lambda (x)
           (define-key map (format "%d" x) 'ora-company-number))
         (number-sequence 0 9))
        (define-key map " " (lambda ()
                              (interactive)
                              (company-abort)
                              (self-insert-command 1)))
        (define-key map (kbd "<return>") nil))

      (let ((map company-active-map))
        (define-key map (kbd "C-n") 'company-select-next)
        (define-key map (kbd "C-p") 'company-select-previous)
        (define-key map (kbd "C-f") 'company-complete-selection)
        (define-key map (kbd "TAB") 'company-complete-selection)
        (define-key map (kbd "<tab>") 'company-complete-selection))

      (define-key my-keys-minor-mode-map (kbd "C-x C-o") 'company-complete)

      (setq company-idle-delay nil)
      (setq company-backends '(company-files company-capf (company-dabbrev-code company-yasnippet)))

      (use-package company-dict
        :config
        (setq company-dict-dir (concat user-emacs-directory "dict/"))
        (add-to-list 'company-backends 'company-dict))
      )

    (use-package yasnippet
      :bind (:map my-leader-map
                  ("vs" . yas-describe-tables))
      :diminish yas-minor-mode
      :init
      (setq yas-snippet-dirs
            '("~/.emacs.d/snippets"))
      :config
      (yas-global-mode 1)
      (add-hook 'term-mode-hook (lambda()
                                  (yas-minor-mode -1))))

    (use-package yatemplate
      :config
      (auto-insert-mode t)
      (yatemplate-fill-alist))
  #+end_src
* VCS / Git
  I don't like popup windows when resolving merge conflicts.
  This prevents windows to popup and keeps everything in the same frame.
  #+begin_src emacs-lisp
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
    (add-hook 'ediff-after-quit-hook-internal 'winner-undo)
    (setq ediff-split-window-function 'split-window-vertically)
  #+end_src

** Tig
   Tig is a terminal ncurses based viewer for Git. You can even commit
   from it, navigate history, add custom commands...
   It is *extremely fast*.
   #+begin_src emacs-lisp
   (defun ab-run-tig ()
   "Start tig in current projectile project. Use st as a terminal."
     (interactive)
     (projectile-with-default-dir (projectile-project-root)
       (start-process "tig" nil "st" "-c" "tig" "tig")))
   (define-key my-leader-map (kbd "gg") 'ab-run-tig)

   #+end_src

** Magit
   #+begin_src emacs-lisp
   (use-package magit
     :bind (:map my-leader-map
                 ("gb" . magit-blame)
                 ("gs" . magit-status)
                 ("gh" . magit-log-buffer-file))
     :config
     (use-package fullframe
       :config
       (fullframe magit-status magit-mode-quit-window))

     (use-package diff-hl
       :config
       (add-hook 'prog-mode-hook 'diff-hl-mode)
       (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)))

   (use-package git-link)
   (define-key my-leader-map (kbd "gl") 'git-link)
   (with-eval-after-load 'magit
     (define-key magit-status-mode-map (kbd "SPC") nil)
     )
   (use-package git-timemachine)
   (define-key my-leader-map (kbd "gt") 'git-timemachine-toggle)

   (defadvice git-timemachine-mode (after git-timemachine-change-to-emacs-state activate compile)
     "when entering git-timemachine mode, change evil normal state to emacs state"
     (if (evil-normal-state-p)
         (evil-emacs-state)
       (evil-normal-state)))

   (ad-activate 'git-timemachine-mode)
   #+end_src

* Org
  #+begin_src emacs-lisp
    (add-hook 'org-mode-hook (lambda () (define-key evil-normal-state-map (kbd "TAB") 'org-cycle)))

    (setq org-directory (expand-file-name "~/Dropbox/org"))
    (setq org-default-notes-file (concat org-directory "/GTD.org"))
    (define-key my-keys-minor-mode-map "\C-cc" 'org-capture)
    (define-key my-keys-minor-mode-map "\C-cl" 'org-store-link)

    (defun draft-org-files ()
      (directory-files-recursively "~/Dropbox/org/writing/" ".*\.org"))

    (setq org-refile-targets '((nil :maxlevel . 3)
                               (org-agenda-files :maxlevel . 3)
                               (draft-org-files :maxlevel . 3)))
    (setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
    (setq org-refile-use-outline-path 'file)                  ; Show full paths for refiling
    (setq org-refile-allow-creating-parent-nodes 'confirm)

    (add-hook 'org-mode-hook 'turn-on-auto-fill)

    (require 'org-mu4e)
    ;;store link to message if in header view, not to header query
    (setq org-mu4e-link-query-in-headers-mode nil)

    (setq org-capture-templates
    '(("g" "GTD" entry (file+headline "~/Dropbox/org/GTD.org" "Inbox")
    "* %?\n")))

    (add-hook 'org-capture-mode-hook 'evil-insert-state)

    (setq org-use-speed-commands nil)

    (evil-define-key 'normal org-mode-map
    (kbd "TAB") 'org-cycle
    (kbd "M-l") 'org-shiftmetaright
    (kbd "M-h") 'org-shiftmetaleft
    (kbd "M-k") 'org-move-subtree-up
    (kbd "M-j") 'org-move-subtree-down
    "<" 'org-clock-in
    ">" 'org-clock-out
    "4" 'org-archive-subtree
    "2" 'counsel-org-tag
    "3" 'org-refile
    "t" 'org-todo)

    (add-to-list 'org-modules "org-habit")
    (setq org-log-into-drawer t)

    (setq org-todo-keywords
    '((sequence "TODO" "PR" "QA" "|" "DONE(!)" "CANCELED")))
  #+end_src


** org-babel
#+begin_src emacs-lisp
  (require 'ob-js)
#+end_src
** org-capture
#+begin_src emacs-lisp
  ;; emacsclient -ca "" --frame-parameters='(quote (name . "global-org-capture"))' -e "(counsel-org-capture)"
  ;; https://cestlaz.github.io/posts/using-emacs-24-capture-2/
  ;; Bind Key to: emacsclient -e "(make-capture-frame)"
  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame"
    (if (equal "global-org-capture" (frame-parameter nil 'name))
        (progn
          (delete-frame))))

  (defadvice org-capture-destroy
      (after delete-capture-frame activate)
    "Advise capture-destroy to close the frame"
    (if (equal "global-org-capture" (frame-parameter nil 'name))
        (progn
          (delete-frame))))

  ;; make the frame contain a single window. by default org-capture
  ;; splits the window.
  (add-hook 'org-capture-mode-hook
            'delete-other-windows)
#+end_src
* Email
  #+begin_src emacs-lisp
  (when *is-mac*
    (setq mu4e-html2text-command "/usr/local/bin/w3m -T text/html")
    (setq mu4e-get-mail-command "/usr/local/bin/mbsync -a")
    (add-to-list 'load-path (expand-file-name "/usr/local/Cellar/mu/1.0/share/emacs/site-lisp/mu/mu4e"))
    )

  (when *is-linux*
    (setq mu4e-html2text-command "/usr/bin/w3m -T text/html")
    (setq mu4e-get-mail-command "/usr/bin/mbsync -a")
    (add-to-list 'load-path (expand-file-name "/usr/share/emacs/site-lisp/mu4e"))
    )

  (require 'epa-file)
  (require 'mu4e)

  (add-to-list 'mu4e-view-actions '("Browser View" . mu4e-action-view-in-browser) t)

  (setq mu4e-maildir (expand-file-name "~/Maildir/fastmail"))
  (setq mu4e-sent-messages-behavior 'sent)
  (setq mu4e-sent-folder "/Sent Items"
        mu4e-drafts-folder "/Drafts"
        mu4e-trash-folder "/Trash"
        mu4e-refile-folder "/Archive")

  (setq mu4e-maildir-shortcuts
        '(("/INBOX" . ?i)
          ("/@Action" . ?a)
          ("/@waiting" . ?w)
          ("/Sent Items" . ?s)))

  (setq mu4e-change-filenames-when-moving t)

  (setq message-send-mail-function 'smtpmail-send-it
        starttls-use-gnutls t
        smtpmail-starttls-credentials
        '(("mail.messagingengine.com" 587 nil nil))
        smtpmail-default-smtp-server "mail.messagingengine.com"
        smtpmail-smtp-server "mail.messagingengine.com"
        ;; smtpmail-auth-credentials
        ;; command to encrypt authinfo, you can delete authinfo after that:
        ;; gpg --output ~/.authinfo.gpg --symmetric ~/.authinfo
        ;; (expand-file-name "~/.authinfo.gpg")
        smtpmail-smtp-service 587)

  (setq user-mail-address "aurelien@bottazini.com")

  (setq mu4e-view-show-images t)
  ;; use imagemagick, if available
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  (defun my-browse-url-new-app (url &optional new-window)
    "Open URL in firefox."
    (interactive (browse-url-interactive-arg "URL: "))
    (unless
        (string= ""
                 (shell-command-to-string
                  (concat "chromium-browser --new-window --app=" url)))
      (message "Starting firefox...")))

  (setq browse-url-browser-function 'my-browse-url-new-app)
  #+end_src
* Notes
  #+begin_src emacs-lisp
    (use-package markdown-mode)
    (use-package deft
      :config
      (setq deft-extensions '("txt" "tex" "org"))
      (setq deft-directory "~/Dropbox/org/")
      (setq deft-use-filename-as-title nil)
      (setq deft-use-filter-string-for-filename t)
      (setq deft-default-extension "org")
      (setq deft-recursive t))
  #+end_src
* Modes
  #+begin_src emacs-lisp
    (use-package palimpsest
      :config
      (add-hook 'org-mode-hook 'palimpsest-mode)
      )
  #+end_src
  #+begin_src emacs-lisp
    (use-package dockerfile-mode
      :mode "\\Dockerfile\\'")

    (add-to-list 'auto-mode-alist '("\\.xsessionrc\\'" . shell-script-mode))

    (use-package haskell-mode)
    (use-package graphql-mode
      :mode "\\.gql\\'")
  #+end_src

  Keep emacs fast with large files.
  #+begin_src emacs-lisp
    (defun check-large-file-hook ()
      "If a file is over a given size, turn off minor modes."
      (when (> (buffer-size) (* 1024 100)) ;; 100K
        (fundamental-mode)
        (font-lock-mode -1)
        (setq buffer-read-only t)
        (buffer-disable-undo)))

    (add-hook 'find-file-hooks 'check-large-file-hook)
  #+end_src

  #+begin_src emacs-lisp
    (defun my-prog-mode-auto-fill-hook ()
      (setq fill-column 80)
      (set (make-local-variable 'comment-auto-fill-only-comments) t)
      (auto-fill-mode t))
    (add-hook 'prog-mode-hook 'my-prog-mode-auto-fill-hook)
  #+end_src

** lisp
   #+begin_src emacs-lisp
  (use-package evil-lispy
    :diminish evil-lispy-mode
    :config
    (add-hook 'emacs-lisp-mode-hook #'evil-lispy-mode)
    (add-hook 'clojure-mode-hook #'evil-lispy-mode))
   #+end_src
** Clojure
   #+begin_src emacs-lisp
     (use-package clojure-mode
       :mode "\\.clj\\'"
       :config
       (add-hook 'clojure-mode-hook #'subword-mode)

       (use-package cider))
   #+end_src

** CSS
   #+begin_src emacs-lisp
     (defun imenu-setup ()
       (progn
         (setq imenu-case-fold-search nil)
         (setq imenu-auto-rescan t)
         (setq imenu-space-replacement " ")
         (setq css-indent-offset 2)
         (imenu-add-menubar-index)
         ))

     (defun my-css-mode-setup ()
       (setq imenu-generic-expression
             '(("Selectors" "^[[:blank:]]*\\(.*[^ ]\\) *{" 1)))
       (imenu-setup))

     (add-hook 'css-mode-hook 'my-css-mode-setup)

     (use-package scss-mode
       :mode "\\.scss\\'"
       :config
       (add-hook 'scss-mode-hook '(lambda ()
                                    (setq imenu-generic-expression
                                          '(("Selectors" "^[[:blank:]]*\\(.*[^ ]\\) *{" 1)))
                                    (imenu-setup))))

     (use-package sass-mode
       :mode "\\.sass\\'"
       :config
       (add-hook 'sass-mode-hook
                 '(lambda ()
                    (setq imenu-generic-expression
                          '(("Imports" "@import\\(.*[^ ]\\)" 1)))
                    (imenu-setup)))
       (add-hook 'sass-mode-hook 'my-css-mode-setup)
       (add-hook 'sass-mode-hook 'highlight-indent-guides-mode))

     (use-package less-css-mode
       :mode "\\.less\\'"
       )
   #+end_src

** Javascript
   #+BEGIN_SRC emacs-lisp
     (setq compilation-error-regexp-alist-alist
           (cons '(node "^\\([a-zA-Z\.0-9\/-]+\\):\\([0-9]+\\)$"
                        1 ;; file
                        2 ;; line
                        )
                 compilation-error-regexp-alist-alist))
     (setq compilation-error-regexp-alist
           (cons 'node compilation-error-regexp-alist))
     (add-hook 'js2-mode-hook
               (lambda ()
                 (set (make-local-variable 'compile-command)
                      (format "node %s" (file-name-nondirectory buffer-file-name)))))
   #+END_SRC
   #+begin_src emacs-lisp
     (use-package web-mode
       :mode "\\.vue\\'"
       :config
       (setq web-mode-markup-indent-offset 2)
       (setq web-mode-css-indent-offset 2)
       (setq web-mode-code-indent-offset 2)
       (setq web-mode-script-padding 2)
       )

     (setq js-indent-level 2)

     (use-package js2-mode
       :mode "\\.js\\'"
       :mode "\\.jsx\\'"
       :init

       (use-package js-comint)

       (setq js2-mode-show-parse-errors nil)
       (setq js2-mode-show-strict-warnings nil)

       (setq-default
        ;; js2-mode
        js2-basic-offset 2
        ;; web-mode
        css-indent-offset 2
        web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-attr-indent-offset 2)

       (setq js2-highlight-level 3)
       :config
       (add-hook 'js2-mode-hook 'js2-imenu-extras-mode)
       (add-hook 'js2-mode-hook (lambda() (subword-mode t)))

       (use-package import-js)

       (setq javascript-common-imenu-regex-list
             '(
               ("Class" "class[ \t]+\\([a-zA-Z0-9_$.]+\\)[ \t]*" 1)
               ("Describe" "describe('\\([a-zA-Z0-9_$./ ]+\\)'*" 1)
               ("It" "it('\\([a-zA-Z0-9_$./ ]+\\)'*" 1)
               ("Function" "function[ \t]+\\([a-zA-Z0-9_$.]+\\)[ \t]*(" 1)
               ("Const" "const[ \t]+\\([a-zA-Z0-9_$.]+\\)[ \t]* =" 1)
               ("Function" "^[ \t]*\\([a-zA-Z0-9_$.]+\\)[ \t]*=[ \t]*function[ \t]*(" 1)
               ;; {{ es6 beginning
               ("Function" "^[ \t]*\\([A-Za-z_$][A-Za-z0-9_$]+\\)[ \t]*([a-zA-Z0-9, ]*) *\{ *$" 1) ;; es6 fn1 () { }
               ("Function" "^[ \t]*\\([A-Za-z_$][A-Za-z0-9_$]+\\)[ \t]*=[ \t]*(?[a-zA-Z0-9, ]*)?[ \t]*=>" 1) ;; es6 fn1 = (e) =>
               ;; }}
               ))

       (defun auray-js-imenu-make-index ()
         (save-excursion
           (imenu--generic-function javascript-common-imenu-regex-list)))

       (use-package prettier-js
         :config
         (setq prettier-args '(
                               "--trailing-comma" "es5"
                               "--single-quote" "true"
                               )
               prettier-js-command (concat (getenv "HOME") "/.yarn/bin/prettier"))

         (add-hook 'js2-mode-hook 'prettier-js-mode))

       (defun auray-js-mode-hook ()
         (setq imenu-create-index-function 'auray-js-imenu-make-index)
         )
       )

     (add-hook 'js2-mode-hook 'auray-js-mode-hook)

     (defun enable-minor-mode (my-pair)
       "Enable minor mode if filename match the regexp.  MY-PAIR is a cons cell (regexp . minor-mode)."
       (if (buffer-file-name)
           (if (string-match (car my-pair) buffer-file-name)
               (funcall (cdr my-pair)))))

     (add-hook 'web-mode-hook #'(lambda ()
                                  (enable-minor-mode
                                   '("\\.jsx?\\'" . prettier-js-mode))))

     (add-hook 'web-mode-hook #'(lambda ()
                                  (enable-minor-mode
                                   '("\\.vue?\\'" . prettier-js-mode))))

     (add-to-list 'magic-mode-alist '("^import.*React.* from 'react'" . my-jsx-hook) )
     (defun my-jsx-hook ()
       "My Hook for JSX Files"
       (interactive)
       (web-mode)
       (web-mode-set-content-type "jsx")
       (setq imenu-create-index-function 'auray-js-imenu-make-index)
       (flycheck-select-checker 'javascript-eslint)
       (emmet-mode)
       (setq emmet-expand-jsx-className? t)
       (tern-mode t))

     (use-package context-coloring
       :diminish context-coloring-mode
       :config
       (add-hook 'emacs-lisp-mode-hook #'context-coloring-mode)
       (add-hook 'eval-expression-minibuffer-setup-hook #'context-coloring-mode)
       (add-hook 'js2-mode-hook #'context-coloring-mode)
       )

     (use-package json-mode
       :mode "\\.json\\'"
       :mode "\\.eslintrc\\'"
       )

     (use-package coffee-mode
       :mode "\\.coffee\\'"
       :config
       (use-package highlight-indentation)
       (add-hook 'coffee-mode-hook '(lambda () (highlight-indentation-mode)))
       (add-hook 'coffee-mode-hook '(lambda () (subword-mode +1)))
       (custom-set-variables '(coffee-tab-width 2)))

     (use-package typescript-mode
       :mode "\\.ts\\'"
       )
   #+end_src

** Ruby
   #+begin_src emacs-lisp
     (use-package yaml-mode
       :mode "\\.ya?ml\\'")

     (use-package ruby-mode
       :mode "\\.rake\\'"
       :mode "Rakefile\\'"
       :mode "\\.gemspec\\'"
       :mode "\\.ru\\'"
       :mode "Gemfile\\'"
       :mode "Guardfile\\'" :mode "Capfile\\'"
       :mode "\\.cap\\'"
       :mode "\\.thor\\'"
       :mode "\\.rabl\\'"
       :mode "Thorfile\\'"
       :mode "Vagrantfile\\'"
       :mode "\\.jbuilder\\'"
       :mode "Podfile\\'"
       :mode "\\.podspec\\'"
       :mode "Puppetfile\\'"
       :mode "Berksfile\\'"
       :mode "Appraisals\\'"
       :mode "\\.rb$"
       :mode "ruby"
       :config

       (add-hook 'ruby-mode-hook 'subword-mode)
       ;; I modify the syntax table to specify ":" as punctuation (and not part of a symbol)
       ;; make it easier to work with global gnu tags
       ;; (eval-after-load 'ruby-mode '(modify-syntax-entry ?: "." ruby-mode-syntax-table))
       ;; (define-category ?U "Uppercase")
       ;; (define-category ?u "Lowercase")
       ;; (modify-category-entry (cons ?A ?Z) ?U)
       ;; (modify-category-entry (cons ?a ?z) ?u)
       ;; (make-variable-buffer-local 'evil-cjk-word-separating-categories)
       ;; (add-hook 'subword-mode-hook
       ;;           (lambda ()
       ;;             (if subword-mode
       ;;                 (push '(?u . ?U) evil-cjk-word-separating-categories)
       ;;               (setq evil-cjk-word-separating-categories
       ;;                     (default-value 'evil-cjk-word-separating-categories)))))

       (use-package bundler)

       (use-package ruby-interpolation)
       (use-package inf-ruby)

       (use-package ruby-end)
       (use-package rspec-mode)

       ;; Hitting M-; twice adds an xmpfilter comment. Hitting xmp keybinding will put the output in this comment
       (use-package rcodetools
         :load-path "/site-lisp/rcodetools.el"
         :pin manual
         :ensure nil
         :config
         (defadvice comment-dwim (around rct-hack activate)
           "If comment-dwim is successively called, add => mark."
           (if (and (or (eq major-mode 'enh-ruby-mode)
                        (eq major-mode 'ruby-mode))
                    (eq last-command 'comment-dwim))
               (progn
                 (if (eq major-mode 'enh-ruby-mode)
                     (end-of-line))
                 (insert "=>"))
             ad-do-it))
         )
       )
   #+end_src

** Html
   #+begin_src emacs-lisp
     (use-package web-mode
       :mode "\\.html\\'")

     (use-package emmet-mode
       :diminish emmet-mode
       :config
       (progn
         (evil-define-key 'insert emmet-mode-keymap (kbd "C-j") 'emmet-expand-line)
         (evil-define-key 'emacs emmet-mode-keymap (kbd "C-j") 'emmet-expand-line))

       (add-hook 'css-mode-hook
                 (lambda ()
                   (emmet-mode)
                   (setq emmet-expand-jsx-className? nil)
                   ))

       (add-hook 'sgml-mode-hook
                 (lambda ()
                   (emmet-mode)
                   (setq emmet-expand-jsx-className? nil)
                   ))

       (add-hook 'web-mode-hook
                 (lambda ()
                   (emmet-mode)
                   )))
   #+end_src

** Tests
   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t
       :init (global-flycheck-mode))

     (use-package coverlay
       :config
       (define-key my-leader-map (kbd "cc") 'coverlay-mode)
       (define-key my-leader-map (kbd "cl") 'coverlay-load-file)
       (define-key my-leader-map (kbd "cr") 'coverlay-reload-file)
       (define-key my-leader-map (kbd "cw") 'coverlay-watch-file)
       (define-key my-leader-map (kbd "cs") 'coverlay-display-stats)
       (define-key my-leader-map (kbd "ct") 'coverlay-toggle-overlays))
   #+end_src

** Rust
#+begin_src emacs-lisp
(use-package rust-mode)
#+end_src
* Bindings

  Shows key combination helper in minibuffer
  #+begin_src emacs-lisp
    (use-package which-key
      :config
      (which-key-mode))

  #+end_src

  Combined with C-M-c (exit-recursive-edit) allows to stop doing
  something, do something else and come back to it later.
  #+begin_src emacs-lisp
    (define-key my-keys-minor-mode-map (kbd "C-M-e") 'recursive-edit)
  #+end_src

  I use spc as my leader key so I want it available everywhere
  #+begin_src emacs-lisp
  (define-key evil-motion-state-map (kbd "SPC") nil)
  #+end_src

  #+begin_src emacs-lisp
    ;; makes grep buffers writable and apply the changes to files.
    (use-package wgrep)


    (use-package paredit
      :diminish paredit-mode
      :config
      (use-package paredit-everywhere
        :config
        (add-hook 'prog-mode-hook 'paredit-everywhere-mode))
      (add-hook 'emacs-lisp-mode-hook #'paredit-mode)
      (add-hook 'clojure-mode-hook #'paredit-mode))

    (use-package avy)
    (define-key my-keys-minor-mode-map (kbd "C-;") 'avy-goto-word-1)
    (define-key my-keys-minor-mode-map (kbd "s-p") 'counsel-projectile)
    (define-key my-keys-minor-mode-map (kbd "C-u") 'evil-scroll-up)
    (define-key my-leader-map (kbd "u") 'universal-argument)

    (define-key my-leader-map (kbd "1") 'projectile-run-async-shell-command-in-root)
    (define-key my-leader-map (kbd "b") 'ivy-switch-buffer)

    (use-package expand-region
      :config
      (define-key my-leader-map (kbd "SPC") 'er/expand-region))

    (define-key my-leader-map (kbd "a") 'org-agenda)
    (define-key my-leader-map (kbd "r") 'counsel-recentf)
    (define-key my-leader-map (kbd "R") 'revert-buffer)
    (define-key my-leader-map (kbd "f") 'counsel-rg)
    (define-key my-leader-map (kbd "jc") 'org-clock-jump-to-current-clock)
    (define-key my-leader-map (kbd "jd") '(lambda () (interactive) (find-file "~/Dropbox/org/drafts")))
    (define-key my-leader-map (kbd "je") '(lambda () (interactive) (find-file (concat user-emacs-directory "Aurelien.org"))))
    (define-key my-leader-map (kbd "jg") '(lambda () (interactive) (find-file "~/Dropbox/org/GTD.org")))
    (define-key my-leader-map (kbd "jj") 'dired-jump)
    (define-key my-leader-map (kbd "jo") 'counsel-org-goto-all)
    (define-key my-leader-map (kbd "i") 'counsel-imenu)
    (define-key my-leader-map (kbd "m") 'counsel-bookmark)
    (define-key my-leader-map (kbd "k") 'recompile)
    (define-key my-leader-map (kbd "K") 'compile)

    (use-package drag-stuff
      :diminish drag-stuff-mode
      :config
      (defhydra hydra-drag-stuff (global-map "<f9>")
        "drag-stuff"
        ("k" drag-stuff-up)
        ("j" drag-stuff-down)
        ("h" drag-stuff-right)
        ("l" drag-stuff-left)))

    (define-key my-leader-map (kbd "oh") 'evil-search-highlight-persist-remove-all)
    (use-package rainbow-mode)
    (define-key my-leader-map (kbd "or") 'rainbow-mode)
    (defun hide-line-numbers ()
      (interactive)
      (setq display-line-numbers (quote nil)))
    (define-key my-leader-map (kbd "olh") 'hide-line-numbers)
    (defun relative-line-numbers ()
      (interactive)
      (setq display-line-numbers (quote relative)))
    (define-key my-leader-map (kbd "olr") 'relative-line-numbers)
    (defun show-line-numbers ()
      (interactive)
      (setq display-line-numbers (quote absolute)))
    (define-key my-leader-map (kbd "oll") 'show-line-numbers)
    (define-key my-leader-map (kbd "ow") 'visual-line-mode)
    (define-key my-leader-map (kbd "of") 'auto-fill-mode)
    (define-key my-leader-map (kbd "os") 'org-strike-header)
    ;; gives each line only one visual line and don't show a continuation on next line
    (set-default 'truncate-lines t)
    (define-key my-leader-map (kbd "ot") 'toggle-truncate-lines)

    (define-key evil-normal-state-map (kbd "]b") 'next-buffer)
    (define-key evil-normal-state-map (kbd "[b") 'previous-buffer)
    (define-key evil-normal-state-map (kbd "]e") 'next-error)
    (define-key evil-normal-state-map (kbd "[e") 'previous-error)

    (when (fboundp 'winner-mode)
      (winner-mode 1)
      (define-key evil-normal-state-map (kbd "]w") 'winner-redo)
      (define-key evil-normal-state-map (kbd "[w") 'winner-undo))

    (use-package origami
      :bind (:map evil-normal-state-map
                  ("zh" . origami-close-all-nodes)
                  ("zc" . origami-close-node)
                  ("zo" . origami-open-node)
                  ("zv" . origami-open-all-nodes))
      :config
      (global-origami-mode))

    (use-package windresize
      :bind (:map evil-normal-state-map
                  ("C-w r" . windresize)))

    (global-set-key (kbd "C-c v") 'ivy-push-view)
    (global-set-key (kbd "C-c V") 'ivy-pop-view)
  #+end_src
** Alternative files
   User rules can be setup using directory local variables, for
   example, create a file .dir-locals.el, and following rules:

   Every rule is a list. The first element (car) is a regular
   expression. The rest elements (cdr) are replacements. If a file path
   match the regular expression, all the replacements are used as
   alternative files. In following example, spec/hello_spec.coffee has
   alternative file assets/test.coffee.

   ((nil
   (alternative-files-rules . (("spec/\\(.*\\)_spec.coffee" "assets/\\1.coffee")
                               ("assets/\\(.*\\).coffee" "spec/\\1_spec.coffee")))))
   #+begin_src emacs-lisp
     (require 'alternative-files)
     (define-key my-leader-map (kbd "s") 'alternative-files-find-file)
     (define-key my-leader-map (kbd "S") 'alternative-files-create-file)
   #+end_src

** Find file in project
   Here is complete setup you could insert into ~/.emacs.d/init.el,

   #+BEGIN_SRC emacs-lisp :tangle no
     ;; if the full path of current file is under SUBPROJECT1 or SUBPROJECT2
     ;; OR if I'm reading my personal issue track document,
     (defun my-setup-develop-environment ()
       (interactive)
       (when (ffip-current-full-filename-match-pattern-p "\\(PROJECT_DIR\\|issue-track.org\\)")
         ;; Though PROJECT_DIR is team's project, I care only its sub-directory "subproj1""
         (setq-local ffip-project-root "~/projs/PROJECT_DIR/subproj1")
         ;; well, I'm not interested in concatenated BIG js file or file in dist/
         (setq-local ffip-find-options "-not -size +64k -not -iwholename '*/dist/*'")
         ;; for this project, I'm only interested certain types of files
         (setq-local ffip-patterns '("*.html" "*.js" "*.css" "*.java" "*.xml" "*.js"))
         ;; maybe you want to search files in `bin' directory?
         (setq-local ffip-prune-patterns (delete "*/bin/*" ffip-prune-patterns))
         ;; exclude `dist/' directory
         (add-to-list 'ffip-prune-patterns "*/dist/*"))
       ;; insert more WHEN statements below this line for other projects
       )

     ;; most major modes inherit from prog-mode, so below line is enough
     (add-hook 'prog-mode-hook 'my-setup-develop-environment)
   #+END_SRC

   All variables may be overridden on a per-directory basis in your
   .dir-locals.el. See (info “(Emacs) Directory Variables”) for
   details.

   You can place .dir-locals.el into your project root directory.

   A sample .dir-locals.el,

   #+BEGIN_SRC emacs-lisp :tangle no
     ((nil . ((ffip-project-root . "~/projs/PROJECT_DIR")
              ;; ignore files bigger than 64k and directory "dist/" when searching
              (ffip-find-options . "-not -size +64k -not -iwholename '*/dist/*'")
              ;; only search files with following extensions
              (ffip-patterns . ("*.html" "*.js" "*.css" "*.java" "*.xml" "*.js"))
              (eval . (progn
                        (require 'find-file-in-project)
                        ;; ignore directory ".tox/" when searching
                        (setq ffip-prune-patterns `("*/.tox/*" ,@ffip-prune-patterns))
                        ;; Do NOT ignore directory "bin/" when searching
                        (setq ffip-prune-patterns `(delete "*/bin/*" ,@ffip-prune-patterns))))
              )))
   #+END_SRC

   To install fd (rust replacement for find), download it
   [[https://github.com/sharkdp/fd/releases][here]] and run ~sudo dpkg -i fd_7.0.0_amd64.deb~. You can then choose
   to use `fd` instead of find.
   #+begin_src emacs-lisp
     (use-package find-file-in-project
      :config
      (add-to-list 'ffip-prune-patterns "*/dist/*")
      (add-to-list 'ffip-prune-patterns "*/.idea/*")
      (add-to-list 'ffip-prune-patterns "*/spec/coverage/*")
      (setq ffip-use-rust-fd nil))
     (define-key my-leader-map (kbd "t") 'find-file-in-project-by-selected)
   #+end_src
** Tmux Integration and Buffer navigation
   Move between buffers with C-h C-j C-k C-l and makes Emacs terminal
   and tmux work seamlessly.
   #+begin_src emacs-lisp
     (use-package emamux
       :bind (:map my-leader-map
                   ("cc" . emamux:send-command)
                   ("cl" . emamux:run-last-command)))

     (defun tmux-socket-command-string ()
       (interactive)
       (concat "tmux -S "
               (replace-regexp-in-string "\n\\'" ""
                                         (shell-command-to-string "echo $TMUX | sed -e 's/,.*//g'"))))

     (defun tmux-move-right ()
       (interactive)
       (condition-case nil
           (evil-window-right 1)
         (error (unless window-system (shell-command (concat (tmux-socket-command-string) " select-pane -R") nil)))))

     (defun tmux-move-left ()
       (interactive)
       (condition-case nil
           (evil-window-left 1)
         (error (unless window-system (shell-command (concat (tmux-socket-command-string) " select-pane -L") nil)))))

     (defun tmux-move-up ()
       (interactive)
       (condition-case nil
           (evil-window-up 1)
         (error (unless window-system (shell-command (concat (tmux-socket-command-string) " select-pane -U") nil)))))

     (defun tmux-move-down ()
       (interactive)
       (condition-case nil
           (evil-window-down 1)
         (error (unless window-system (shell-command (concat (tmux-socket-command-string) " select-pane -D") nil)))))

     (define-key my-keys-minor-mode-map (kbd "C-h") 'tmux-move-left)
     (define-key my-keys-minor-mode-map (kbd "C-j") 'tmux-move-down)
     (define-key my-keys-minor-mode-map (kbd "C-k") 'tmux-move-up)
     (define-key my-keys-minor-mode-map (kbd "C-l") 'tmux-move-right)
   #+end_src

   Fixes some iterm keys
   #+begin_src emacs-lisp
     (defadvice terminal-init-xterm (after map-S-up-escape-sequence activate)
       (define-key input-decode-map "\e[1;40" (kbd "C-("))
       (define-key input-decode-map "\e[1;41" (kbd "C-)"))
       (define-key input-decode-map "\e[1;42" (kbd "C-;"))

       (define-key input-decode-map "\e[1;123" (kbd "C-{"))
       (define-key input-decode-map "\e[1;125" (kbd "C-}")))
   #+end_src
** Multiedit and cursors

   #+begin_src emacs-lisp
  (use-package iedit
    :config
    (define-key my-keys-minor-mode-map (kbd "<f6>") 'iedit-mode))
  (use-package evil-mc
    :diminish
    :config
    (global-evil-mc-mode 1)
    (defhydra hydra-cursors (global-map "<f7>")
      "multiple cursors"
      ("m" evil-mc-make-and-goto-next-match)
      ("s" evil-mc-skip-and-goto-next-match)
      ("a" evil-mc-make-all-cursors)
      ("u" evil-mc-undo-all-cursors)
      ("h" evil-mc-cursor-here)
      ("p" evil-mc-pause-cursors)
      ("r" evil-mc-resume-cursors)))
  (define-key my-keys-minor-mode-map (kbd "<f8>") 'deft)

  (use-package evil-multiedit
    :config
    ;; Highlights all matches of the selection in the buffer.
    (define-key evil-visual-state-map "R" 'evil-multiedit-match-all)

    ;; Match the word under cursor (i.e. make it an edit region). Consecutive presses will
    ;; incrementally add the next unmatched match.
    (define-key evil-normal-state-map (kbd "M-d") 'evil-multiedit-match-and-next)
    ;; Match selected region.
    (define-key evil-visual-state-map (kbd "M-d") 'evil-multiedit-match-and-next)
    ;; Insert marker at point
    (define-key evil-insert-state-map (kbd "M-d") 'evil-multiedit-toggle-marker-here)

    ;; Same as M-d but in reverse.
    (define-key evil-normal-state-map (kbd "M-D") 'evil-multiedit-match-and-prev)
    (define-key evil-visual-state-map (kbd "M-D") 'evil-multiedit-and-prev)

    ;; OPTIONAL: If you prefer to grab symbols rather than words, use
    ;; `evil-multiedit-match-symbol-and-next` (or prev).

    ;; Restore the last group of multiedit regions.
    (define-key evil-visual-state-map (kbd "C-M-D") 'evil-multiedit-restore)

    ;; RET will toggle the region under the cursor
    (define-key evil-multiedit-state-map (kbd "RET") 'evil-multiedit-toggle-or-restrict-region)

    ;; ...and in visual mode, RET will disable all fields outside the selected region
    (define-key evil-motion-state-map (kbd "RET") 'evil-multiedit-toggle-or-restrict-region)

    ;; For moving between edit regions
    (define-key evil-multiedit-state-map (kbd "C-n") 'evil-multiedit-next)
    (define-key evil-multiedit-state-map (kbd "C-p") 'evil-multiedit-prev)
    (define-key evil-multiedit-insert-state-map (kbd "C-n") 'evil-multiedit-next)
    (define-key evil-multiedit-insert-state-map (kbd "C-p") 'evil-multiedit-prev)

    ;; Ex command that allows you to invoke evil-multiedit with a regular expression, e.g.
    (evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match))
   #+end_src
** Run command for mode
   Run compilation or interactive command for mode.
   #+begin_src emacs-lisp
     (defun run-for-mode ()
         "Run interactive command for the current buffer programming mode"
         (interactive)
         (cond
          ((equal major-mode 'org-mode)
           (org-babel-execute-src-block))
          ((equal major-mode 'ruby-mode)
           (xmp))
          ((equal major-mode 'enh-ruby-mode)
           (xmp))
          ((equal major-mode 'clojure-mode)
           (cider-eval-defun-at-point))
          ((equal major-mode 'emacs-lisp-mode)
           (eval-defun nil))
          ((equal major-mode 'js2-mode)
           (run-node-on-buffer))
          (t (error "No run command for that mode"))))


     (defun run-bigger-for-mode ()
         "Run interactive command for the current buffer programming mode"
         (interactive)
         (cond
          ((equal major-mode 'org-mode)
           (org-babel-execute-src-block))
          ((equal major-mode 'ruby-mode)
           (xmp))
          ((equal major-mode 'enh-ruby-mode)
           (xmp))
          ((equal major-mode 'clojure-mode)
           (cider-load-buffer))
          ((equal major-mode 'emacs-lisp-mode)
           (eval-defun nil))
          ((equal major-mode 'js2-mode)
           (progn
             (js-comint-reset-repl)
             (js-comint-send-buffer)
             (other-window -1)))
          (t (error "No run command for that mode"))))

     (define-key my-leader-map (kbd "x") 'run-for-mode)
     (define-key my-leader-map (kbd "X") 'run-bigger-for-mode)
   #+end_src

* Diminish
  Don't show some modes to keep my modeline clean.
  #+begin_src emacs-lisp
    (use-package diminish
      :config
      (diminish 'prettier-js-mode)
      (diminish 'subword-mode)
      (diminish 'eldoc-mode)
      (diminish 'auto-revert-mode)
      (diminish 'indium-interaction-mode)
      (diminish 'paredit-everywhere-mode)
      (diminish 'evil-lispy-mode)
      (diminish 'company-mode)
      (diminish 'paredit-mode)
      (diminish 'my-keys-minor-mode)
      (diminish 'ivy-mode)
      (diminish 'undo-tree-mode)
      (diminish 'evil-commentary-mode)
      (diminish 'evil-mc-mode)
      (diminish 'yas-minor-mode)
      (diminish 'which-key-mode)
      (diminish 'whitespace-mode)
      (diminish 'palimpsest-mode)
      (diminish 'flycheck-mode)
      (diminish '0blayout-mode)
      (diminish 'auto-fill-function)
      (diminish 'visual-line-mode))
      (diminish 'ruby-end-mode)
      (diminish 'ruby-interpolation-mode)
      (diminish 'prettier-mode)
      (diminish 'subword-mode)
      (diminish 'abbrev-mode)
  #+end_src

* Ligatures
  #+begin_src emacs-lisp
    ;; For emacs25
    (setq prettify-symbols-unprettify-at-point 'right-edge)

    (defconst pragmatapro-prettify-symbols-alist
      (mapcar (lambda (s)
                `(,(car s)
                  .
                  ,(vconcat
                    (apply 'vconcat (make-list (- (length (car s)) 1) (vector (decode-char 'ucs #X0020) '(Br . Bl))))
                    (vector (decode-char 'ucs (cadr s))))))
              '(("[ERROR]"   #XE380)
                ("[DEBUG]"   #XE381)
                ("[INFO]"    #XE382)
                ("[WARN]"    #XE383)
                ("[WARNING]" #XE384)
                ("[ERR]"     #XE385)
                ("[FATAL]"   #XE386)
                ("[TRACE]"   #XE387)
                ("[FIXME]"   #XE388)
                ("[TODO]"    #XE389)
                ("[BUG]"     #XE38A)
                ("[NOTE]"    #XE38B)
                ("[HACK]"    #XE38C)
                ("[MARK]"    #XE38D)
                ("!!"        #XE900)
                ("!="        #XE901)
                ("!=="       #XE902)
                ("!!!"       #XE903)
                ("!≡"        #XE904)
                ("!≡≡"       #XE905)
                ("!>"        #XE906)
                ("#("        #XE920)
                ("#_"        #XE921)
                ("#{"        #XE922)
                ("#?"        #XE923)
                ("#>"        #XE924)
                ("##"        #XE925)
                ("%="        #XE930)
                ("%>"        #XE931)
                ("<~"        #XE932)
                ("&%"        #XE940)
                ("&&"        #XE941)
                ("&*"        #XE942)
                ("&+"        #XE943)
                ("&-"        #XE944)
                ("&/"        #XE945)
                ("&="        #XE946)
                ("&&&"       #XE947)
                ("&>"        #XE948)
                ("***"       #XE960)
                ("*="        #XE961)
                ("*/"        #XE962)
                ("*>"        #XE963)
                ("++"        #XE970)
                ("+++"       #XE971)
                ("+="        #XE972)
                ("+>"        #XE973)
                ("++="       #XE974)
                ("--"        #XE980)
                ("-<"        #XE981)
                ("-<<"       #XE982)
                ("-="        #XE983)
                ("->"        #XE984)
                ("->>"       #XE985)
                ("---"       #XE986)
                ("-->"       #XE987)
                ("-+-"       #XE988)
                ("-\\/"      #XE989)
                (".."        #XE990)
                ("..."       #XE991)
                ("..<"       #XE992)
                (".>"        #XE993)
                (".~"        #XE994)
                (".="        #XE995)
                ("/*"        #XE9A0)
                ("//"        #XE9A1)
                ("/>"        #XE9A2)
                ("/="        #XE9A3)
                ("/=="       #XE9A4)
                ("///"       #XE9A5)
                ("/**"       #XE9A6)
                ("::"        #XE9B0)
                (":="        #XE9B1)
                (":≡"        #XE9B2)
                (":>"        #XE9B3)
                (":=>"       #XE9B4)
                (":("        #XE9B5)
                (":-("       #XE9B6)
                (":)"        #XE9B7)
                (":-)"       #XE9B8)
                (":/"        #XE9B9)
                (":\\"       #XE9BA)
                (":3"        #XE9BB)
                (":D"        #XE9BC)
                (":P"        #XE9BD)
                (":>:"       #XE9BE)
                (":<:"       #XE9BF)
                ("<$>"       #XE9C0)
                ("<*"        #XE9C1)
                ("<*>"       #XE9C2)
                ("<+>"       #XE9C3)
                ("<-"        #XE9C4)
                ("<<"        #XE9C5)
                ("<<<"       #XE9C6)
                ("<<="       #XE9C7)
                ("<="        #XE9C8)
                ("<=>"       #XE9C9)
                ("<>"        #XE9CA)
                ("<|>"       #XE9CB)
                ("<<-"       #XE9CC)
                ("<|"        #XE9CD)
                ("<=<"       #XE9CE)
                ("<~"        #XE9CF)
                ("<~~"       #XE9D0)
                ("<<~"       #XE9D1)
                ("<$"        #XE9D2)
                ("<+"        #XE9D3)
                ("<!>"       #XE9D4)
                ("<@>"       #XE9D5)
                ("<#>"       #XE9D6)
                ("<%>"       #XE9D7)
                ("<^>"       #XE9D8)
                ("<&>"       #XE9D9)
                ("<?>"       #XE9DA)
                ("<.>"       #XE9DB)
                ("</>"       #XE9DC)
                ("<\\>"      #XE9DD)
                ("<\">"      #XE9DE)
                ("<:>"       #XE9DF)
                ("<~>"       #XE9E0)
                ("<**>"      #XE9E1)
                ("<<^"       #XE9E2)
                ("<!"        #XE9E3)
                ("<@"        #XE9E4)
                ("<#"        #XE9E5)
                ("<%"        #XE9E6)
                ("<^"        #XE9E7)
                ("<&"        #XE9E8)
                ("<?"        #XE9E9)
                ("<."        #XE9EA)
                ("</"        #XE9EB)
                ("<\\"       #XE9EC)
                ("<\""       #XE9ED)
                ("<:"        #XE9EE)
                ("<->"       #XE9EF)
                ("<!--"      #XE9F0)
                ("<--"       #XE9F1)
                ("<~<"       #XE9F2)
                ("<==>"      #XE9F3)
                ("==<"       #XEA00)
                ("=="        #XEA01)
                ("==="       #XEA02)
                ("==>"       #XEA03)
                ("=>"        #XEA04)
                ("=~"        #XEA05)
                ("=>>"       #XEA06)
                ("=/="       #XEA07)
                ("≡≡"        #XEA10)
                ("≡≡≡"       #XEA11)
                ("≡:≡"       #XEA12)
                (">-"        #XEA20)
                (">="        #XEA21)
                (">>"        #XEA22)
                (">>-"       #XEA23)
                (">=="       #XEA24)
                (">>>"       #XEA25)
                (">=>"       #XEA26)
                (">>^"       #XEA27)
                ("??"        #XEA40)
                ("?~"        #XEA41)
                ("?="        #XEA42)
                ("?>"        #XEA43)
                ("???"       #XEA44)
                ("^="        #XEA48)
                ("^."        #XEA49)
                ("^?"        #XEA4A)
                ("^.."       #XEA4B)
                ("^<<"       #XEA4C)
                ("^>>"       #XEA4D)
                ("^>"        #XEA4E)
                ("\\\\"      #XEA50)
                ("\\>"       #XEA51)
                ("\\/-"      #XEA52)
                ("@>"        #XEA57)
                ("|="        #XEA60)
                ("||"        #XEA61)
                ("|>"        #XEA62)
                ("|||"       #XEA63)
                ("|+|"       #XEA64)
                ("|->"       #XEA65)
                ("|-->"      #XEA66)
                ("|=>"       #XEA67)
                ("|==>"      #XEA68)
                ("~="        #XEA70)
                ("~>"        #XEA71)
                ("~~>"       #XEA72)
                ("~>>"       #XEA73)
                ("\">"       #XEA90))))

    (defun add-pragmatapro-prettify-symbols-alist ()
      (dolist (alias pragmatapro-prettify-symbols-alist)
        (push alias prettify-symbols-alist)))

    ;; I use kitty as a terminal and it already supports ligatures
    (when (display-graphic-p)
      (add-hook 'prog-mode-hook
                #'add-pragmatapro-prettify-symbols-alist)
      (global-prettify-symbols-mode +1))
  #+end_src
