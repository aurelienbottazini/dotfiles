#+PROPERTY: header-args    :results silent

I have a lot of memory so let's increase the gc limit
while in the minibuffer for expensive operations

#+begin_src emacs-lisp
(defun my-minibuffer-gc-setup-hook ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun my-minibuffer-gc-exit-hook ()
  (setq gc-cons-threshold 800000))

(add-hook 'minibuffer-setup-hook #'my-minibuffer-gc-setup-hook)
(add-hook 'minibuffer-exit-hook #'my-minibuffer-gc-exit-hook)

(my-minibuffer-gc-setup-hook)

#+end_src

* About

  *Feel free to copy anything you want.*

  Some settings are present in my ~custom.el~. I try to merge them
  into my org-babel file from time to time.

  #+BEGIN_SRC emacs-lisp :exports both
  (emacs-version)
  #+END_SRC

** Inspiration

     + https://github.com/eschulte/emacs24-starter-kit
     + https://github.com/sachac/.emacs.d/
     + https://github.com/purcell/emacs.d
     + https://github.com/bbatsov/prelude
     + https://github.com/cjohansen/.emacs.d
     + https://github.com/magnars/.emacs.d
     + https://github.com/dimitri/emacs-kicker

* Encoding

  I want UTF-8 everywhere.
  #+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (setq buffer-file-coding-system 'utf-8)
  (setq erc-server-coding-system '(utf-8 . utf-8))
  (setq locale-coding-system 'utf-8)
  (setq org-export-coding-system (quote utf-8))
  (setq org-export-html-coding-system (quote utf-8))
  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
  (if (boundp 'buffer-file-coding-system)
      (setq-default buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8))
  (modify-coding-system-alist 'process "\\*compilation\\*\\'"   'utf-8)
  #+End_SRC

  Making sure emacs language environment variables are also
  specifying UTF-8. When starting Emacs with a GUI, it is not
  always the case.
  Great explanation of emacs environment variables [[http://ergoemacs.org/emacs/emacs_env_var_paths.html][here]].
  #+BEGIN_SRC emacs-lisp
    (setenv "LANG" "fr_FR.UTF-8")
    (setenv "LC_ALL" "fr_FR.UTF-8")
  #+END_SRC

  Before everything loading my custom setting file
  #+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (load custom-file)
  #+END_SRC

* Packages

  An helper to install missing packages.

  #+BEGIN_SRC emacs-lisp
    (defun require-package (package &optional min-version)
      "Ask elpa to install given PACKAGE."
      (unless (package-installed-p package min-version)
        (package-install package)))

    (setq package-archives
          '(
            ("org"         . "http://orgmode.org/elpa/")
            ("melpa"       . "http://melpa.milkbox.net/packages/")
            ("gnu"         . "http://elpa.gnu.org/packages/")))
    (setq package-user-dir (concat user-emacs-directory "elpa"))
    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    (require-package 'use-package)
    (require 'use-package)
    (setq use-package-always-ensure t)
  #+END_SRC

* Initialization


  Useful variables to know in which environment I am in.
  #+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)

  (setq *is-a-windows* (eq system-type 'windows-nt))
  (setq *is-a-mac* (eq system-type 'darwin))
  ;; my computer is fast, don't halt redrawing if a new input event arrives
  (setq redisplay-dont-pause t)
  (let ((default-directory  "~/.emacs.d/site-lisp/"))
    (normal-top-level-add-to-load-path '("."))
    (normal-top-level-add-subdirs-to-load-path))
  #+END_SRC

  Should use default Mac OS X browser on Mac.
  #+BEGIN_SRC emacs-lisp
  (when *is-a-mac*
    (setq browse-url-browser-function (quote browse-url-default-macosx-browser)))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
(setq user-full-name "Aurelien Bottazini"
      user-mail-address "aurelien@bottazini.com")
  #+END_SRC

  Getting right into the action. No initial message and clean
  scratch buffer.
  #+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
  #+END_SRC
** save, delete & restore

   Delete trailing white-space when saving buffer.
   #+BEGIN_SRC emacs-lisp
   (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC


   #+BEGIN_SRC emacs-lisp
   (savehist-mode 1)                       ;saves minibuffer history
   ;; (desktop-save-mode 1)                     ;save opened buffers
                                           ;between emacs sessions
   ;; (setq desktop-restore-eager 5) ; restore only 5 buffers at once
   #+END_SRC


   #+BEGIN_SRC emacs-lisp
   (recentf-mode 1)                        ;remembering recent files
   (setq recentf-max-saved-items 200
         recentf-max-menu-items 50)
   #+END_SRC


   #+BEGIN_SRC emacs-lisp
   (setq backup-by-copying t      ; don't clobber symlinks
         backup-directory-alist
         '((".*" . "~/.local/share/emacs-saves"))    ; don't litter my fs tree
         delete-old-versions t
         kept-new-versions 6
         kept-old-versions 2
         auto-save-default t ;files starting with # are generated by autosave
         auto-save-timeout 60 ; number of seconds before auto-saving
         auto-save-interval 200 ; number of keystrokes before auto-saves
         version-control t) ; use versioned backups

   (setq auto-save-file-name-transforms
         `((".*" ,"~/.local/share/emacs-saves" t)))

   #+END_SRC

   Deleted files go to OS’s trash folder.
   #+BEGIN_SRC emacs-lisp
   (setq delete-by-moving-to-trash t)
   #+END_SRC

   Updating time-stamp on save if one is present
   #+BEGIN_SRC emacs-lisp
   (add-hook 'before-save-hook 'time-stamp)
   #+END_SRC

** Env variables and Exec path

#+begin_src emacs-lisp
  (setenv "NODE_PATH"
          (concat
           (getenv "HOME") "/node_modules" ":"
           (getenv "NODE_PATH")
           )
          )
#+end_src

  Picking ~PATH~ from shell
  #+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize)
    )
  #+END_SRC

  Furthermore, on mac, /path_helper/ is messing with the path. I commented the
  calls to path helper in /etc/profile/ and /etc/zshenv/

** Strange functionality
   “Dangerous” functionality enabled (disabled by default or with a warning).
   #+BEGIN_SRC emacs-lisp
     (put 'narrow-to-region 'disabled nil)
     (put 'upcase-region 'disabled nil)
     (put 'dired-find-alternate-file 'disabled nil)
     (put 'downcase-region 'disabled nil)
     (put 'set-goal-column 'disabled nil)
   #+END_SRC
* Custom Functions

  #+begin_src emacs-lisp
    (require 'cl)
    (defun sluggify (str)
      (downcase
       (replace-regexp-in-string
        " " "-" str)))

    (defun new-post (title)
      (interactive "MTitle: ")
      (let ((slug (sluggify title))
            (date (current-time)))
        (find-file (concat "/Users/aurelienbottazini/projects/aurelienbottazini.com/_posts/"
                           (format-time-string "%Y-%m-%d") "-" slug
                           ".md"))
        ))

     (defun copy-to-clipboard-git-link()
       (interactive)
       (setq x-select-enable-clipboard t)
       (git-link nil nil nil)
       (setq x-select-enable-clipboard nil))

     (defun visit-term-buffer ()
       "Create or visit a terminal buffer."
       (interactive)
       (if (not (get-buffer "*my-ansi-term*"))
           (ansi-term "/usr/local/bin/fish" "my-ansi-term")
         (switch-to-buffer "*my-ansi-term*")
         ))


    (defun js-jump-to (current from to format-name)
      (find-file
       (cl-loop with parts = (reverse current)
                with fname = (file-name-sans-extension (cl-first parts))
                for (name . rest) on (cl-rest parts)
                until (string-equal name from)
                collect name into names
                finally (cl-return
                         (mapconcat 'identity
                                    (nconc (reverse rest)
                                           (list to)
                                           (reverse names)
                                           (list (funcall format-name fname) )) "/" )))))

    (defun js-format-impl-name (fname)
      (format "%s.jsx" (replace-regexp-in-string "-test" "" fname)))

    (defun js-format-test-name (fname)
      (format "%s-test.js" fname))

    (defun js-jump-to-implementation-or-test ()
      (interactive)
      (let ((current (split-string (buffer-file-name) "/")))
        (cond
         ((member "__tests__" current) (js-jump-to current "__tests__" "src" 'js-format-impl-name))
         ((member "src" current)  (js-jump-to current "src" "__tests__" 'js-format-test-name))
         (t (error "not within a test or lib directory"))
         )))

     (defun xah-next-user-buffer ()
       "Switch to the next user buffer.
     “user buffer” is determined by `xah-user-buffer-q'.
     URL `http://ergoemacs.org/emacs/elisp_next_prev_user_buffer.html'
     Version 2016-06-19"
       (interactive)
       (next-buffer)
       (let ((i 0))
         (while (< i 20)
           (if (not (xah-user-buffer-q))
               (progn (next-buffer)
                      (setq i (1+ i)))
             (progn (setq i 100))))))

     (defun xah-previous-user-buffer ()
       "Switch to the previous user buffer.
     “user buffer” is determined by `xah-user-buffer-q'.
     URL `http://ergoemacs.org/emacs/elisp_next_prev_user_buffer.html'
     Version 2016-06-19"
       (interactive)
       (previous-buffer)
       (let ((i 0))
         (while (< i 20)
           (if (not (xah-user-buffer-q))
               (progn (previous-buffer)
                      (setq i (1+ i)))
             (progn (setq i 100))))))

     (defun xah-user-buffer-q ()
       "Return t if current buffer is a user buffer, else nil.
     Typically, if buffer name starts with *, it's not considered a user buffer.
     This function is used by buffer switching command and close buffer command, so that next buffer shown is a user buffer.
     You can override this function to get your idea of “user buffer”.
     version 2016-06-18"
       (interactive)
       (if (string-equal "*" (substring (buffer-name) 0 1))
           nil
         (if (string-equal major-mode "dired-mode")
             nil
           (if (string-equal major-mode "magit-mode")
               nil
             t
             ))))
  #+end_src
* Indent
  No tabs
  #+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  #+END_SRC

  Auto-indent
  #+BEGIN_SRC emacs-lisp
  (electric-indent-mode 1)
  #+END_SRC

  (use-package aggressive-indent
   :diminish aggressive-indent-mode
   :config
   (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
   (add-hook 'css-mode-hook #'aggressive-indent-mode)
   (add-hook 'scss-mode-hook #'aggressive-indent-mode)
   (add-hook 'js2-mode-hook #'aggressive-indent-mode))

* UI

  Keeps the cursor at a reasonable place when scrolling
#+BEGIN_SRC emacs-lisp
(use-package smooth-scrolling
 :config
 (smooth-scrolling-mode t)
)
#+END_SRC

  #+BEGIN_SRC emacs-lisp
    (add-hook 'after-init-hook '(lambda () (diminish 'my-keys-minor-mode)))
    (global-hl-line-mode 1)
    (blink-cursor-mode 0)
    (column-number-mode)
  #+END_SRC


  y and n instead of yes or no
  #+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

  Whenever an external process changes a file underneath emacs, and there
  was no unsaved changes in the corresponding buffer, just revert its
  content to reflect what's on-disk.
  #+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode 1)
  (diminish 'auto-revert-mode)
  #+END_SRC

  Better print menus.
  #+BEGIN_SRC emacs-lisp
  (use-package printing
   :config
   (pr-update-menus t))
  #+END_SRC

  One space after a period makes a sentence. Not two. Allows sentence
  based commands to work properly.
  #+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)    ; Fix M-e
  #+END_SRC

  To be able to execute commands while in the minibuffer
  #+BEGIN_SRC emacs-lisp
  (setq enable-recursive-minibuffers t)
  #+END_SRC

  Follow symlinks without asking
  #+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
  ;; (setq vc-follow-symlinks (quote ask))
  #+END_SRC

  Enable integration between terminal emacs and mac clipboard
  #+begin_src emacs-lisp
    (unless window-system
    (use-package pbcopy
    :config
    (turn-on-pbcopy)))
  #+end_src

  In insert mode, typing while a text is selected will replace that text
#+begin_src emacs-lisp
  (pending-delete-mode 1)
#+end_src

** Fonts

#+BEGIN_SRC emacs-lisp
    (when window-system
      ;; (set-default-font "-*-Operator Mono-Medium-normal-normal-*-14-*-*-*-m-0-iso10646-1")
      (set-default-font "-*-PragmataPro-normal-normal-*-16-*-*-*-m-0-iso10646-1")
     )
#+END_SRC

   custom symbols for pragmata pro
   #+begin_src emacs-lisp
     (load "pragmatapro-prettify-symbols" )
   #+end_src


** Visual interface

  #+begin_src emacs-lisp
  (global-hl-line-mode)
  #+end_src
  No bell
  #+BEGIN_SRC emacs-lisp
       (setq ring-bell-function 'ignore)
  #+END_SRC

  I want to hide extra bars. I like my Emacs clean. I don't use the
  mouse and I want to do everything through the keyboard
  #+BEGIN_SRC emacs-lisp
     (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
     (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
     (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
;;     (when (string-match "apple-darwin" system-configuration)
       ;; on mac, there's always a menu bar drown, don't have it empty
 ;;      (when window-system
  ;;       (menu-bar-mode 1)))
  #+END_SRC


  Show end of buffer with /q/ left fringe.
  #+BEGIN_SRC emacs-lisp
     (setq default-indicate-empty-lines t)
  #+END_SRC

  Different buffer names when a new buffer has the same name as
  an existing one.
  #+BEGIN_SRC emacs-lisp
    ;; (require 'uniquify)
     (setq uniquify-buffer-name-style 'forward)
  #+END_SRC


  File path in frame title.
  #+BEGIN_SRC emacs-lisp
     (setq frame-title-format
           '((:eval (if (buffer-file-name)
                        (abbreviate-file-name (buffer-file-name))
                      "%b"))))
  #+END_SRC

* Registers
  List of frequently visited files. I can access them using
  ~C-x r j <letter>~.
  #+BEGIN_SRC emacs-lisp
  (dolist
      (r `((?e (file . ,(concat user-emacs-directory "emacs-config.org")))
           (?t (file . ,(expand-file-name "~/.tmux.conf")))
           (?g (file . ,(expand-file-name "~/Dropbox/org/gtd.org")))
           (?i (file . ,(expand-file-name "~/Dropbox/org/inbox.org")))
           (?w (file . ,(expand-file-name "~/projects/aurelienbottazini.com/_org")))
           (?j (file . ,(expand-file-name "~/projects/training-heaven/src/training.js")))
           (?s (file . ,(expand-file-name "~/projects/training-heaven/src/training.scss")))
           ))
    (set-register (car r) (cadr r)))
  #+END_SRC
* text-mode

  #+BEGIN_SRC emacs-lisp
    (add-hook 'text-mode-hook
              (lambda ()
                (electric-pair-mode +1)))
  #+END_SRC
* org-mode

  #+BEGIN_SRC emacs-lisp

        ;; easier completion when refiling org-mode
        (setq org-fontify-whole-heading-line t)
        (setq org-startup-indented nil)
        (setq org-indent-mode nil)
        (setq org-indent-indentation-per-level 2)
        (setq org-src-fontify-natively t)
        (setq org-completion-use-ido t)
        (setq org-outline-path-complete-in-steps nil)
        (setq org-refile-use-outline-path 'file)
        (setq org-clock-persist 'history)
        (setcar (nthcdr 4 org-emphasis-regexp-components) 2)
        ;; Targets include current file and any file contributing to the agenda - up to 2 levels deep
        (setq org-refile-targets (quote ((nil :maxlevel . 2)
                                         (org-agenda-files :maxlevel . 2))))
        (setq org-todo-keywords
              '((sequence "TODO(t)" "MAYBE(m)"  "WAITING(w!)" "|" "DONE(d!)")))
        (setq org-tag-alist '(("next" . ?n)
                              ("maybe" . ?m)
                              ("waiting" . ?w)
                              ("read" . ?r)))
        (setq org-confirm-babel-evaluate nil)
        (setq org-html-doctype "html5")
        (setq org-html-html5-fancy t)
        (setq org-html-allow-name-attribute-in-anchors nil) ; does not validate with wc3 validator
        (setq org-html-head-include-default-style nil)
        (setq org-html-head-extra nil)
        (setq org-html-head-include-scripts nil)

        (setq org-html-head "
          <link rel=\"stylesheet\" type=\"text/css\" href=\"http://aurelienbottazini.com/css/org-export.min.css\">
          <script src=\"http://aurelienbottazini.com/js/org-export.min.js\"></script>")
        :config
        ;;(add-hook 'org-mode-hook '(lambda ()
        ;;                          (turn-on-flyspell)
        ;;                          (writegood-mode t)))
        (add-hook 'org-mode-hook 'turn-on-auto-fill)
        (defadvice org-refile (after save-refiled-buffer activate compile)
          "saves all org buffers after using refile"
          (org-save-all-org-buffers))
        (org-clock-persistence-insinuate)

        (use-package org-bullets
          :config
          (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
          (set-display-table-slot standard-display-table
                                  'selective-display (string-to-vector "  ••• ")))

        ;; For colorized source codes with html export
        (use-package htmlize
          :config
          (setq org-html-htmlize-output-type (quote css)))
  #+END_SRC

* Multiple cursors

  D: clear the region
  C: clear to end-of-region and go into insert mode
  A: go into insert mode at end-of-region
  I: go into insert mode at start-of-region
  V: select the region
  $: go to end-of-region
  0/^: go to start-of-region
  gg/G: go to the first/last region

  #+begin_src emacs-lisp
  (use-package evil-multiedit
    :config
    ;; Highlights all matches of the selection in the buffer.
    (define-key evil-visual-state-map "R" 'evil-multiedit-match-all)

    ;; Match the word under cursor (i.e. make it an edit region). Consecutive presses will
    ;; incrementally add the next unmatched match.
    (define-key evil-normal-state-map (kbd "M-d") 'evil-multiedit-match-and-next)
    ;; Match selected region.
    (define-key evil-visual-state-map (kbd "M-d") 'evil-multiedit-match-and-next)

    ;; Same as M-d but in reverse.
    (define-key evil-normal-state-map (kbd "M-D") 'evil-multiedit-match-and-prev)
    (define-key evil-visual-state-map (kbd "M-D") 'evil-multiedit-match-and-prev)

    ;; OPTIONAL: If you prefer to grab symbols rather than words, use
    ;; `evil-multiedit-match-symbol-and-next` (or prev).

    ;; Restore the last group of multiedit regions.
    (define-key evil-visual-state-map (kbd "C-M-D") 'evil-multiedit-restore)

    ;; RET will toggle the region under the cursor
    (define-key evil-multiedit-state-map (kbd "RET") 'evil-multiedit-toggle-or-restrict-region)

    ;; ...and in visual mode, RET will disable all fields outside the selected region
    (define-key evil-visual-state-map (kbd "RET") 'evil-multiedit-toggle-or-restrict-region)

    ;; For moving between edit regions
    (define-key evil-multiedit-state-map (kbd "C-n") 'evil-multiedit-next)
    (define-key evil-multiedit-state-map (kbd "C-p") 'evil-multiedit-prev)
    (define-key evil-multiedit-insert-state-map (kbd "C-n") 'evil-multiedit-next)
    (define-key evil-multiedit-insert-state-map (kbd "C-p") 'evil-multiedit-prev)

    ;; Ex command that allows you to invoke evil-multiedit with a regular expression, e.g.
    (evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match)
    )
  #+end_src

* Vim

  https://github.com/noctuid/evil-textobj-anyblock

  #+BEGIN_SRC emacs-lisp
    ;;(setq evil-motion-state-modes (append evil-emacs-state-modes evil-motion-state-modes))
    ;;  (setq evil-emacs-state-modes nil)

    (use-package evil
      :init
      (fset 'evil-visual-update-x-selection 'ignore)
      (setq x-select-enable-clipboard nil)

      :config
      (evil-mode 1)
      (defmacro define-and-bind-text-object (key start-regex end-regex)
        (let ((inner-name (make-symbol "inner-name"))
              (outer-name (make-symbol "outer-name")))
          `(progn
             (evil-define-text-object ,inner-name (count &optional beg end type)
               (evil-select-paren ,start-regex ,end-regex beg end type count nil))
             (evil-define-text-object ,outer-name (count &optional beg end type)
               (evil-select-paren ,start-regex ,end-regex beg end type count t))
             (define-key evil-inner-text-objects-map ,key (quote ,inner-name))
             (define-key evil-outer-text-objects-map ,key (quote ,outer-name)))))

      (define-and-bind-text-object "r" "\\(^\s*def .*\\|^.* do.*\\)\n" "^\s*end\n")

      (use-package evil-surround
        :config
        (global-evil-surround-mode 1))

      (use-package evil-commentary
        :diminish evil-commentary-mode
        :config
        (evil-commentary-mode))

      (use-package evil-visualstar
        :config
        (global-evil-visualstar-mode t))

      (use-package evil-indent-plus
        :config
        (evil-indent-plus-default-bindings))


      (use-package evil-search-highlight-persist
        :config
        (global-evil-search-highlight-persist t))

        (use-package evil-matchit
        :config
        (global-evil-matchit-mode 1))
      )
  #+END_SRC

* prog-mode(s)
  #+begin_src emacs-lisp
    (setq comment-auto-fill-only-comments t)
  #+end_src

** beautify code
#+begin_src emacs-lisp
  (use-package web-beautify)
#+end_src
** See diff in fringe
#+begin_src emacs-lisp
  (use-package diff-hl
  :config
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
  (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)
  )
#+end_src
** web-mode
  #+begin_src emacs-lisp

    (use-package web-mode
      :config
      (add-to-list 'auto-mode-alist '("\\.html$" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.htm$" . web-mode))

      (add-hook 'web-mode-hook
                (lambda ()
                  (emmet-mode)
                  (setq emmet-expand-jsx-className? nil)
                  ;; (setq-local imenu-create-index-function #'ggtags-build-imenu-index)
                  ))
     )

  #+end_src
** Lisp
   On the fly lisp evaluation
#+begin_src emacs-lisp
(use-package litable)
#+end_src

** CSS
   #+BEGIN_SRC emacs-lisp
  (defun my-css-mode-setup ()
    (setq imenu-generic-expression
          '(("Selectors" "^[[:blank:]]*\\(.*[^ ]\\) *{" 1)))
    (setq imenu-case-fold-search nil)
    (setq imenu-auto-rescan t)
    (setq imenu-space-replacement " ")
    (setq css-indent-offset 2)
    (imenu-add-menubar-index))
  (add-hook 'css-mode-hook 'my-css-mode-setup)
   #+END_SRC

** SCSS
   #+BEGIN_SRC emacs-lisp
   (autoload 'scss-mode "scss-mode")
   (add-to-list 'auto-mode-alist '("\\.scss$" . scss-mode))
   (add-hook 'scss-mode-hook 'my-css-mode-setup)
   #+END_SRC

** LESS
   #+begin_src emacs-lisp
  (use-package less-css-mode)
   #+end_src

** shell
   #+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\zshrc$" . shell-script-mode))
  (add-to-list 'auto-mode-alist '("\\zsh$" . shell-script-mode))

  (use-package fish-mode)
   #+END_SRC

** markdown
   #+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :init
    (require 'livedown)
    (evil-define-key 'normal markdown-mode-map
      (kbd "C-c p") 'livedown:preview)

    :config
    (add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
    (setq markdown-imenu-generic-expression
          '(("title"  "^\\(.*\\)[\n]=+$" 1)
            ("h2-"    "^\\(.*\\)[\n]-+$" 1)
            ("h1"   "^# \\(.*\\)$" 1)
            ("h2"   "^## \\(.*\\)$" 1)
            ("h3"   "^### \\(.*\\)$" 1)
            ("h4"   "^#### \\(.*\\)$" 1)
            ("h5"   "^##### \\(.*\\)$" 1)
            ("h6"   "^###### \\(.*\\)$" 1)
            ("fn"   "^\\[\\^\\(.*\\)\\]" 1)
            ))

    (add-hook 'markdown-mode-hook
              (lambda ()
                (setq imenu-generic-expression markdown-imenu-generic-expression)
                (writegood-mode t))))



   #+END_SRC

** JavaScript

   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode
       :config
       ;;(require 'js2-imenu-extras)
       ;;(js2-imenu-extras-setup +1)
       (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
       (add-to-list 'auto-mode-alist '("\\.jsx\\'" . js2-mode))
       (add-hook 'js2-mode-hook 'js2-imenu-extras-mode)
       (add-hook 'js2-mode-hook (lambda() (subword-mode t)
         (diminish 'subword-mode)
        ))

       (setq-default
        ;; js2-mode
        js2-basic-offset 2
        ;; web-mode
        css-indent-offset 2
        web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-attr-indent-offset 2)

       (setq js2-highlight-level 3)
)

     ;; conmmands to _beautify_ js, css and html
     (use-package js2-refactor
       :diminish js2-refactor-mode
       :config
       (js2r-add-keybindings-with-prefix "<f12>"))
     (add-hook 'js2-mode-hook 'js2-refactor-mode)
     (use-package tern
       :diminish tern-mode
       :config
       (add-hook 'js2-mode-hook (lambda () (tern-mode t))))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package babel-repl
       :config
       (require 'comint)
       (add-to-list 'comint-preoutput-filter-functions
                    (lambda (output)
                      (replace-regexp-in-string "\033\\[[0-9]+[A-Z]" "" output)))

       (setq babel-repl-cli-arguments '("--presets=es2015"
                                        ;; "--eval=\"require('repl').start({replMode: require('repl').REPL_MODE_STRICT, ignoreUndefined: true})\""
       ))
       (setq babel-repl-cli-program "org-babel-node")
  ;;(define-key evil-insert-state-map "{" 'paredit-open-curly)
  ;;(define-key evil-insert-state-map "}" 'paredit-close-curly)
       ;; (evil-leader/set-key-for-mode 'js2-mode "x" 'babel-repl-send-buffer)
      )
   #+END_SRC

** JSON

#+begin_src emacs-lisp
  (use-package json-mode
   :config
    (add-to-list 'auto-mode-alist '("\\.json\\'" . json-mode))
    (add-to-list 'auto-mode-alist '("\\.eslintrc\\'" . json-mode)))
#+end_src

** Coffeescript
#+begin_src emacs-lisp
  (use-package coffee-mode
    :config
    (add-hook 'coffee-mode-hook '(lambda () (highlight-indentation-mode)))
    (add-hook 'coffee-mode-hook '(lambda () (subword-mode +1)))
    (custom-set-variables '(coffee-tab-width 2)))

  (use-package highlight-indentation)
#+end_src
** Typescript
   #+begin_src emacs-lisp
   (use-package typescript-mode)
   #+end_src
** JSX
  #+begin_src emacs-lisp
    (add-to-list 'magic-mode-alist '("^import.*React.* from 'react'" . my-jsx-hook) )
    (defun my-jsx-hook ()
      "My Hook for JSX Files"
      (interactive)
      (web-mode)
      (web-mode-set-content-type "jsx")
      (flycheck-select-checker 'javascript-eslint)
      (emmet-mode)
      (setq emmet-expand-jsx-className? t)
      (tern-mode t))

  #+end_src
** Ruby

   #+BEGIN_SRC emacs-lisp
          (use-package yaml-mode
           :config
           (add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-mode)))

          (use-package ruby-mode
           :config
          (add-to-list 'auto-mode-alist '("\\.rake\\'" ruby-mode))
          (add-to-list 'auto-mode-alist '("Rakefile\\'" . ruby-mode))
          (add-to-list 'auto-mode-alist '("\\.gemspec\\'" . ruby-mode))
          (add-to-list 'auto-mode-alist '("\\.ru\\'" . ruby-mode))
          (add-to-list 'auto-mode-alist '("Gemfile\\'" . ruby-mode))
          (add-to-list 'auto-mode-alist '("Guardfile\\'" . ruby-mode))
          (add-to-list 'auto-mode-alist '("Capfile\\'" . ruby-mode))
          (add-to-list 'auto-mode-alist '("\\.cap\\'" . ruby-mode))
          (add-to-list 'auto-mode-alist '("\\.thor\\'" . ruby-mode))
          (add-to-list 'auto-mode-alist '("\\.rabl\\'" . ruby-mode))
          (add-to-list 'auto-mode-alist '("Thorfile\\'" . ruby-mode))
          (add-to-list 'auto-mode-alist '("Vagrantfile\\'" . ruby-mode))
          (add-to-list 'auto-mode-alist '("\\.jbuilder\\'" . ruby-mode))
          (add-to-list 'auto-mode-alist '("Podfile\\'" . ruby-mode))
          (add-to-list 'auto-mode-alist '("\\.podspec\\'" . ruby-mode))
          (add-to-list 'auto-mode-alist '("Puppetfile\\'" . ruby-mode))
          (add-to-list 'auto-mode-alist '("Berksfile\\'" . ruby-mode))
          (add-to-list 'auto-mode-alist '("Appraisals\\'" . ruby-mode))
          (add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
          (add-to-list 'interpreter-mode-alist '("ruby" . ruby-mode))

          (eval-after-load 'ruby-mode '(modify-syntax-entry ?: "." ruby-mode-syntax-table))
          (eval-after-load 'ruby-mode
            '(progn
               (defun ruby-mode-defaults ()
                 (inf-ruby-minor-mode +1)
                 ;; CamelCase aware editing operations
                 (subword-mode +1))))

          ;; (use-package enh-ruby-mode
          ;; :config
          ;; (add-hook 'enh-ruby-mode-hook (lambda ()
          ;; (run-hooks 'ruby-mode-hook))))

          ;; I modify the syntax table to specify ":" as punctuation (and not part of a symbol)
          ;; make it easier to work with global gnu tags
          (define-category ?U "Uppercase")
          (define-category ?u "Lowercase")
          (modify-category-entry (cons ?A ?Z) ?U)
          (modify-category-entry (cons ?a ?z) ?u)
          (make-variable-buffer-local 'evil-cjk-word-separating-categories)
          (add-hook 'subword-mode-hook
                    (lambda ()
                      (if subword-mode
                          (push '(?u . ?U) evil-cjk-word-separating-categories)
                        (setq evil-cjk-word-separating-categories
                              (default-value 'evil-cjk-word-separating-categories)))))

          (eval-after-load 'ruby-mode
            '(progn
               ;; use the standard Dired bindings as a base
               (evil-define-key 'normal ruby-mode-map
                 "[m" 'ruby-beginning-of-defun
                 "]m" 'ruby-end-of-defun
                 )))

          (add-hook 'ruby-mode-hook
                   (lambda ()
                     (set (make-local-variable imenu-generic-expression)
                          '(("Methods"  "^\\( *\\(def\\) +.+\\)"          1)
                            ))))
          ;
          ;(add-hook 'ruby-mode-hook 'rspec-mode)
     )

          (use-package bundler)

          (use-package ruby-interpolation)
          (use-package inf-ruby)

   #+END_SRC

   #+BEGIN_SRC emacs-lisp
  (use-package rspec-mode)
   #+END_SRC

   Hitting ~M-;~ twice adds an xmpfilter comment.
   Hitting xmp keybinding will put the output in this comment
   #+begin_src emacs-lisp
  (use-package rcodetools
   :load-path "/site-lisp/rcodetools.el"
   :pin manual
   :ensure nil
   :config
 ;;(evil-leader/set-key-for-mode 'enh-ruby-mode "x"  'xmp)
   )
   #+end_src

** Haml
   #+BEGIN_SRC emacs-lisp
 (use-package haml-mode
  :config
  (add-hook 'haml-mode-hook '(lambda () (highlight-indentation-mode))))
   #+END_SRC

** Docker

   #+begin_src emacs-lisp
  (use-package dockerfile-mode)
   #+end_src

** Elm
#+begin_src emacs-lisp
  (use-package elm-mode)
#+end_src

** Neo4j

#+begin_src emacs-lisp
  (use-package cypher-mode)
#+end_src

** emmet-mode
   #+begin_src emacs-lisp
    (use-package emmet-mode
      :diminish emmet-mode
      :config
      (progn
        (evil-define-key 'insert emmet-mode-keymap (kbd "C-j") 'emmet-expand-line)
        (evil-define-key 'emacs emmet-mode-keymap (kbd "C-j") 'emmet-expand-line))

      (add-hook 'css-mode-hook
                (lambda ()
                  (emmet-mode)
                  (setq emmet-expand-jsx-className? nil)
                  ))

      (add-hook 'sgml-mode-hook
                (lambda ()
                  (emmet-mode)
                  (setq emmet-expand-jsx-className? nil)
                  ))


      )
   #+end_src
** relative-line-numbers
#+begin_src emacs-lisp
      (use-package relative-line-numbers
        :init
        (setq relative-line-numbers-format 'better-relative-number-format)
        :config
        (add-hook 'prog-mode-hook 'relative-line-numbers-mode)
        (defun better-relative-number-format (offset)
          "Another formatting function"
          (format "%3d " (abs offset)))
        )
#+end_src

** context-coloring
#+begin_src emacs-lisp
  (use-package context-coloring
    :diminish context-coloring-mode
    :config
    (add-hook 'js2-mode-hook #'context-coloring-mode)
    (add-hook 'emacs-lisp-mode-hook #'context-coloring-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'context-coloring-mode)
  )
#+end_src

* Code checker
  On the fly code checking with [[http://flycheck.readthedocs.org/en/latest/guide/introduction.html][FlyCheck]]

  On a large screen you can use ~flycheck-list-errors~ to open a
  buffer listing your errors next to your code.

  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :diminish flycheck-mode
      :config
      (add-hook 'after-init-hook #'global-flycheck-mode)
      (flycheck-add-mode 'javascript-eslint 'web-mode)
      )
    (defun my/use-eslint-from-node-modules ()
      (let* ((root (locate-dominating-file
                    (or (buffer-file-name) default-directory)
                    "node_modules"))
             (eslint (and root
                          (expand-file-name "node_modules/eslint/bin/eslint.js"
                                            root))))
        (when (and eslint (file-executable-p eslint))
          (setq-local flycheck-javascript-eslint-executable eslint))))

    (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
  #+END_SRC


  Don't forget to install:
  + Ruby
    To respect [[https://github.com/bbatsov/ruby-style-guide][Github ruby style guide]]
    ~$ gem install rubocop~
    If you use a tool like rbenv to install locally a specific version
    of ruby, don't forget to re-install /rubocop/.
  + Javascript
    Syntax checkers seem to have trouble running at the same time. You
    can use ~flycheck-select-checker~ to switch between them.
    - closurelinter (gjslint. Google javascript style guide)
      https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml

      ~$ sudo easy_install http://closure-linter.googlecode.com/files/closure_linter-latest.tar.gz~
    - jshint
      ~$ npm install -g jshint~
  + HTML
    To support HTML5. https://w3c.github.io/tidy-html5/
    ~$ brew install tidy-html5~
  + Coffee Script
    ~Install npm install -g coffeelint~

* Bindings

** Mac Adjustements
  Adjusting command, control and option keys on mac.
  #+BEGIN_SRC emacs-lisp
   (when *is-a-mac*
     (setq mac-command-modifier 'meta)
     (setq mac-option-modifier 'none)
     (setq mac-right-control-modifier 'hyper)
     (setq mac-right-option-modifier 'none)
     (setq mac-right-command-modifier 'super)
     ;;(setq ns-function-modifier 'hyper)
 (setq default-input-method "MacOSX"))
  #+END_SRC

** my-keys-minor-mode

  Defining my key-map where I define my keys and give them top priorities.
  #+BEGIN_SRC emacs-lisp
 (defvar my-keys-minor-mode-map (make-keymap) "my-keys-minor-mode keymap.")
 (define-minor-mode my-keys-minor-mode
   "A minor mode so that my key settings override annoying major modes."
   t " my-keys" 'my-keys-minor-mode-map)
 (my-keys-minor-mode 1)

     (defadvice load (after give-my-keybindings-priority)
       "Try to ensure that my keybindings always have priority."
       (if (not (eq (car (car minor-mode-map-alist)) 'my-keys-minor-mode))
           (let ((mykeys (assq 'my-keys-minor-mode minor-mode-map-alist)))
             (assq-delete-all 'my-keys-minor-mode minor-mode-map-alist)
             (add-to-list 'minor-mode-map-alist mykeys))))
 (ad-activate 'load)
  #+END_SRC

#+begin_src emacs-lisp
  (define-key my-keys-minor-mode-map (kbd "C-c n")   'evil-normal-state)
  (define-key my-keys-minor-mode-map (kbd "C-c e")   'evil-emacs-state)
  (define-key my-keys-minor-mode-map (kbd "C-c m")   'evil-motion-state)
  (define-key my-keys-minor-mode-map (kbd "M-/")     'hippie-expand)
  (use-package helm)
  (define-key my-keys-minor-mode-map (kbd "M-x")     'helm-M-x)
  (define-key my-keys-minor-mode-map (kbd "C-x C-f") 'helm-find-files)
  (define-key my-keys-minor-mode-map (kbd "M-?")     'help-command)

     (setq x-select-enable-clipboard nil)
     (defun copy-to-clipboard()
       (interactive)
       (setq x-select-enable-clipboard t)
       (kill-ring-save (region-beginning) (region-end))
       (setq x-select-enable-clipboard nil))
     (defun paste-from-clipboard ()
       (interactive)
       (setq x-select-enable-clipboard t)
       (yank)
       (setq x-select-enable-clipboard nil))
     (define-key my-keys-minor-mode-map (kbd "M-c")     'copy-to-clipboard)
     (define-key my-keys-minor-mode-map (kbd "M-v")     'paste-from-clipboard)


     (define-key my-keys-minor-mode-map (kbd "<f5>") 'revert-buffer)
     (define-key my-keys-minor-mode-map (kbd "<f6>") 'langtool-check)
     (define-key my-keys-minor-mode-map (kbd "<f7>") 'langtool-correct-buffer)
     (define-key my-keys-minor-mode-map (kbd "<f8>") 'ispell-buffer)
#+end_src
** which-key
   Get a visual aid for key sequences.
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
      :diminish which-key-mode
      :config
      (which-key-mode))
   #+END_SRC

** Better undo
   Supercharge C-x u. Use ~d~ to see a diff
   #+begin_src emacs-lisp
   (use-package undo-tree
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode))
   #+end_src
** Vim commands
   #+begin_src emacs-lisp
      (evil-ex-define-cmd "W"     'evil-write-all)
   #+end_src
** Vim normal mode
#+begin_src emacs-lisp

  (use-package helm-projectile)
  (define-key evil-normal-state-map (kbd "C-p") 'helm-projectile-find-file)

    (define-key evil-normal-state-map (kbd "C-w t") 'make-frame-command)
    (define-key evil-normal-state-map (kbd "C-w x") 'delete-frame)
    (use-package windresize
      :config
      (define-key evil-normal-state-map (kbd "C-w r") 'windresize))


    (define-key evil-normal-state-map (kbd "M-a") 'mark-whole-buffer)
    (define-key evil-normal-state-map (kbd "g t") 'other-frame)

    (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-page-up)

    (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)


    (use-package origami)
    (global-origami-mode)
    (define-key evil-normal-state-map (kbd "[s") 'flycheck-previous-error)
    (define-key evil-normal-state-map (kbd "]s") 'flycheck-next-error)
    (define-key evil-normal-state-map (kbd "]d") 'dumb-jump-go)

    (define-key evil-normal-state-map (kbd "[e") 'previous-error)
    (define-key evil-normal-state-map (kbd "]e") 'next-error)
    (define-key evil-normal-state-map (kbd "[p") 'evilmi-jump-items)
    (define-key evil-normal-state-map (kbd "]p") 'evilmi-jump-items)
    (define-key evil-normal-state-map (kbd "]t") 'helm-etags-select)
    (define-key evil-normal-state-map (kbd "zh") 'origami-close-all-nodes)
    (define-key evil-normal-state-map (kbd "zc") 'origami-close-node)
    (define-key evil-normal-state-map (kbd "zo") 'origami-open-node)
    (define-key evil-normal-state-map (kbd "zv") 'origami-open-all-nodes)

    (define-key evil-normal-state-map (kbd "]w") 'winner-redo)
    (define-key evil-normal-state-map (kbd "[w") 'winner-undo)
    (define-key evil-normal-state-map (kbd "]b") 'xah-next-user-buffer)
    (define-key evil-normal-state-map (kbd "[b") 'xah-previous-user-buffer)
#+end_src

*** dired-mode-map
#+begin_src emacs-lisp
  (eval-after-load 'dired
    '(progn
       ;; use the standard Dired bindings as a base
       (evil-define-key 'normal dired-mode-map
         "-" 'dired-up-directory
         )))
#+end_src
*** org-mode-map
    #+begin_src emacs-lisp
        (evil-declare-key 'normal org-mode-map
          "gk" 'outline-up-heading
          "gj" 'outline-next-visible-heading
          "H" 'org-beginning-of-line ; smarter behaviour on headlines etc.
          "L" 'org-end-of-line ; smarter behaviour on headlines etc.
          "t" 'org-todo ; mark a TODO item as DONE
          ",c" 'org-cycle
          (kbd "TAB") 'org-cycle
          ",e" 'org-export-dispatch
          ",n" 'outline-next-visible-heading
          ",p" 'outline-previous-visible-heading
          ",t" 'org-set-tags-command
          ",s" 'org-tags-view
          ",u" 'outline-up-heading
          "$" 'org-end-of-line ; smarter behaviour on headlines etc.
          "^" 'org-beginning-of-line ; ditto
          "-" 'org-ctrl-c-minus ; change bullet style
          "<" 'org-metaleft ; out-dent
          ">" 'org-metaright ; indent
          )

      ;; (evil-leader/set-key-for-mode 'org-mode
      ;;   (kbd "C-c t")  'org-show-todo-tree
      ;;   (kbd "C-c a")  'org-agenda
      ;;   (kbd "C-c c")  'org-archive-subtree-default
      ;;   (kbd "C-c r")  'org-refile
      ;;   )
    #+end_src
** Vim insert mode
#+begin_src emacs-lisp
  (use-package key-chord
    :config
    (key-chord-mode 1)
    (key-chord-define evil-insert-state-map  "jk" 'evil-normal-state)
    (key-chord-define evil-insert-state-map  "kj" 'evil-normal-state))

  (defun my-expand-lines ()
    (interactive)
    (let ((hippie-expand-try-functions-list
           '(try-expand-line)))
      (call-interactively 'hippie-expand)))

  (define-key evil-insert-state-map (kbd "C-x C-l") 'my-expand-lines)
  (define-key evil-insert-state-map (kbd "C-x C-o") 'company-complete)

  (defun my-expand-files ()
    (interactive)
    (let ((hippie-expand-try-functions-list
           '(try-complete-file-name)))
      (call-interactively 'hippie-expand)))

  (define-key evil-insert-state-map (kbd "C-x C-f") 'my-expand-files)
#+end_src
** Vim Leader
   #+begin_src emacs-lisp
     (use-package helm
       :config
       (use-package helm-ag)
       (use-package helm-projectile
         :config
         (helm-projectile-on)
         )
       )

     (use-package evil-leader
       :init
       (setq evil-toggle-key "C-c e")
       :config
       (global-evil-leader-mode))
     (evil-leader/set-leader "<SPC>")

     (evil-leader/set-key "gb" 'magit-blame)
     (evil-leader/set-key "gs" 'magit-status)
     (use-package git-link
       :config
       (evil-leader/set-key "gl" 'git-link))

     (evil-leader/set-key "gh" 'magit-log-buffer-file)
     (evil-leader/set-key "b" 'ivy-switch-buffer)

     (use-package swoop
       :config
       (require 'swoop)
       )
     (evil-leader/set-key "S" 'swoop-multi)
     (evil-leader/set-key "c" 'shell-command)
     (defun browse-lodash-docs ()
       (interactive)
       (browse-url "https://lodash.com/docs"))
     (evil-leader/set-key "dl" 'browse-lodash-docs)
     (defun browse-ramdajs-docs ()
       (interactive)
       (browse-url "http://ramdajs.com/docs"))
     (evil-leader/set-key "dr" 'browse-ramdajs-docs)
     (evil-leader/set-key "e" 'dired-jump)
     (evil-leader/set-key "f" 'helm-projectile-ag)
     (use-package ag
      :config
     (evil-leader/set-key "F" 'ag))
     (evil-leader/set-key "h" 'helm-recentf)
     (evil-leader/set-key "i" 'helm-imenu)
     (evil-leader/set-key "j" 'avy-goto-char-timer)
     (evil-leader/set-key "m" 'bookmark-set)
     (use-package expand-region)
     (evil-leader/set-key "n" 'er/expand-region)
     (evil-leader/set-key "oh" 'evil-search-highlight-persist-remove-all)
     (use-package projectile
       :config
       (setq projectile-switch-project-action 'projectile-dired)
       (evil-leader/set-key "p" 'projectile-commander)
       )
     (evil-leader/set-key "r" 'jump-to-register)
     (evil-leader/set-key "sc" 'emamux:run-command)
     (evil-leader/set-key "sl" 'emamux:run-last-command)

     (evil-leader/set-key "t" 'js-jump-to-implementation-or-test)
     (evil-leader/set-key "u" 'universal-argument)
     (evil-leader/set-key "vs" 'yas-describe-tables)
     (evil-leader/set-key "vt" 'visit-term-buffer)
     (evil-leader/set-key "x" 'counsel-M-x)

     (evil-leader/set-key "w" 'swoop)

     (evil-leader/set-key "1" 'shell-command)
     (evil-leader/set-key "5" 'evilmi-jump-items)
   #+end_src
** Tmux
   #+BEGIN_SRC emacs-lisp
     (defun tmux-socket-command-string ()
       (interactive)
       (concat "tmux -S "
               (replace-regexp-in-string "\n\\'" ""
                                         (shell-command-to-string "echo $TMUX | sed -e 's/,.*//g'"))))

     (use-package emamux)
     (defun tmux-socket-command-string ()
       (interactive)
       (concat "tmux -S "
               (replace-regexp-in-string "\n\\'" ""
                                         (shell-command-to-string "echo $TMUX | sed -e 's/,.*//g'"))))


     (defun tmux-move-left ()
       (interactive)
       (condition-case nil
           (evil-window-left 1)
         (error (unless window-system (shell-command (concat (tmux-socket-command-string) " select-pane -L") nil)))))

     (defun tmux-move-right ()
       (interactive)
       (condition-case nil
           (evil-window-right 1)
         (error (unless window-system (shell-command (concat (tmux-socket-command-string) " select-pane -R") nil)))))

     (defun tmux-move-up ()
       (interactive)
       (condition-case nil
           (evil-window-up 1)
         (error (unless window-system (shell-command (concat (tmux-socket-command-string) " select-pane -U") nil)))))

     (defun tmux-move-down ()
       (interactive)
       (condition-case nil
           (evil-window-down 1)
         (error (unless window-system (shell-command (concat (tmux-socket-command-string) " select-pane -D") nil)))))
     (define-key evil-normal-state-map (kbd "C-h") 'tmux-move-left)
     (define-key evil-normal-state-map (kbd "C-j") 'tmux-move-down)
     (define-key evil-normal-state-map (kbd "C-k") 'tmux-move-up)
     (define-key evil-normal-state-map (kbd "C-l") 'tmux-move-right)

   #+END_SRC
* Jumping Around:
** Avy
  #+begin_src emacs-lisp
  (use-package avy)
  #+end_src
** ggtags
#+begin_src emacs-lisp
  ;; (use-package ggtags
  ;;  :diminish ggtags-mode
  ;;  :config
  ;;  ;;(add-hook 'prog-mode-hook 'ggtags-mode)
  ;; )
#+end_src
** dumb jump
#+begin_src emacs-lisp
  (use-package dumb-jump)
#+end_src
* Dired
  buffed up dired (emacs). Dired is for directory listing,
  navigation and manipulation inside emacs.
  #+BEGIN_SRC emacs-lisp
    (add-hook 'dired-load-hook
              (lambda ()
                (load "dired-x")
                ;; Set dired-x global variables here.  For example:
                ;; (setq dired-guess-shell-gnutar "gtar")
                ;; (setq dired-x-hands-off-my-keys nil)
                (setq dired-dwim-target t)

                (setq dired-recursive-copies (quote always)) ; “always” means no asking
                (setq dired-recursive-deletes (quote top)) ; “top” means ask once
                ))
    (setq ls-lisp-use-insert-directory-program t)
    (setq insert-directory-program "gls")   ; --dired option not
                                            ; supported by ls, gnu ls
                                            ; seems better
    (defun dired-finder-folder ()
      (interactive)
      (shell-command "open ."))
    (add-hook 'dired-mode-hook 'auto-revert-mode)

    ;; if window is splitted copy files to split pane as default destination

    (defun xah-dired-mode-setup ()
      "to be run as hook for `dired-mode'."
      (dired-hide-details-mode 1))

    (add-hook 'dired-mode-hook 'xah-dired-mode-setup)
  #+END_SRC

* Spell Check
  https://joelkuiper.eu/spellcheck_emacs

** ~flyspell~

   Requires you to install ~hunspell~ with
   ~brew install hunspell~ and to download dictionaries for it.
   https://wiki.openoffice.org/wiki/Dictionaries.
   #+BEGIN_SRC emacs-lisp
  (when (executable-find "hunspell")
    (setq-default ispell-program-name "hunspell")
    (setq ispell-really-hunspell t)
    ;; making sure I load the correctly dictionary for hunspell
    (setq ispell-dictionary "en_US_aurelien"))

   (setq flyspell-prog-text-faces '(font-lock-comment-face font-lock-doc-face))
   #+End_SRC

** ~languagetool~

   ~brew install languagetool~
   #+BEGIN_SRC emacs-lisp
(use-package langtool
 :config
(setq langtool-language-tool-jar "/usr/local/Cellar/languagetool/2.8/libexec/languagetool-commandline.jar"
      langtool-mother-tongue "en"
      ;; rules: https://www.languagetool.org/languages/
      langtool-disabled-rules '("WHITESPACE_RULE"
                                "EN_UNPAIRED_BRACKETS"
                                "COMMA_PARENTHESIS_WHITESPACE")))
   #+END_SRC

** ~writegood~

   Mainly to use ~M-x writegood-reading-ease~

   | Reading ease score |                                                     |
   |--------------------+-----------------------------------------------------|
   | 90.0–100.0         | easily understood by an average 11-year-old student |
   | 60.0–70.0          | easily understood by 13- to 15-year-old students    |
   | 0.0–30.0           | best understood by university graduates             |

   Reader's Digest magazine has a readability index of about 65. Time
   magazine scores about 52
   #+BEGIN_SRC emacs-lisp
  (use-package writegood-mode)
   #+END_SRC

** Synonyms
   #+begin_src emacs-lisp
  (use-package synosaurus)
   #+end_src
* Rest client mode
  To debug/test APIs!
#+begin_src emacs-lisp
(use-package restclient
 :config
 (add-to-list 'auto-mode-alist '("\\.rest" . restclient-mode)))
#+end_src
* IRC
  I use ~erc~ to chat on IRC.

  Setting nickname and default IRC server.
  #+BEGIN_SRC emacs-lisp
  (setq erc-nick "Aurel")
  (setq erc-server "irc.freenode.org")
  #+END_SRC


  Hiding some IRC messages.
  #+BEGIN_SRC emacs-lisp
  (setq erc-hide-list (quote ("JOIN" "QUIT" "left")))
  #+END_SRC

* ido
#+begin_src emacs-lisp
  (use-package ido
    :init
    (setq ido-everywhere t)
    :config
    (ido-mode t))

  ;; Push mark when using ido-imenu
  (defvar push-mark-before-goto-char nil)

  (defadvice goto-char (before push-mark-first activate)
    (when push-mark-before-goto-char
      (push-mark)))

  (defun ido-imenu-push-mark ()
    (interactive)
    (let ((push-mark-before-goto-char t))
      (ido-imenu)))
#+end_src
* Autotyping / Completion
  https://www.gnu.org/software/emacs/manual/html_node/autotype/

** Abbrevs

   #+begin_src emacs-lisp
  (setq abbrev-file-name
        (concat user-emacs-directory "abbrev_defs"))
  (setq save-abbrevs t)
  (setq default-abbrev-mode t)
  (diminish 'abbrev-mode)
   #+end_src

** Yasnippets

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
      :diminish yas-minor-mode
      :config
     (setq yas-snippet-dirs
       '("~/.emacs.d/snippets"))
     (yas-global-mode 1)
     (add-hook 'term-mode-hook (lambda()
        (yas-minor-mode -1)))
     )
   #+END_SRC

** Company
   #+begin_src emacs-lisp
     (use-package company
       :diminish company-mode
       :config
       (use-package company-web)
       (use-package company-tern)
       (use-package company-restclient)
       (use-package company-statistics
        :config
        (add-hook 'after-init-hook 'company-statistics-mode))
       (eval-after-load 'company
         '(progn
            (define-key company-active-map (kbd "TAB") 'company-complete-selection)
            (define-key company-active-map (kbd "C-p") 'company-select-previous)
            (define-key company-active-map (kbd "C-n") 'company-select-next)
            ))
       (global-company-mode t)
       (setq company-minimum-prefix-length 2)
       (setq company-backends '((company-dabbrev-code company-yasnippet company-tern company-restclient company-css company-web-html company-files))))
   #+end_src
** Templates
   #+begin_src emacs-lisp
   (use-package yatemplate
    :init
    (auto-insert-mode t)
    (setq auto-insert t)
    :config
    (setq auto-insert-alist nil)
    (setq auto-insert-query nil)
    (yatemplate-fill-alist))
   #+end_src
** Hippie expand
   #+begin_src emacs-lisp
  (setq hippie-expand-try-functions-list '(
                                           try-expand-dabbrev-visible
                                           try-expand-dabbrev
                                           try-expand-dabbrev-from-kill
                                           try-complete-file-name
                                           try-expand-dabbrev-all-buffers
                                           try-expand-list))
   #+end_src
* Colors

** Vim
#+begin_src emacs-lisp
 (setq evil-emacs-state-cursor  '("#DC8CC3" box))
 (setq evil-normal-state-cursor '("#94bff3" box))
 (setq evil-visual-state-cursor '("#f0dfaf" box))
 (setq evil-insert-state-cursor '("#94bff3" bar))
 (setq evil-motion-state-cursor '("#afd8af" box))
#+end_src

** Theme
  #+begin_src emacs-lisp
    (setq custom-theme-directory "~/.emacs.d/themes")
    ;; (unless window-system
    ;;   (progn
    (use-package zenburn-theme
      :config
      (load-theme 'zenburn)
      (set-face-attribute 'mode-line-inactive nil :background "#494949")
      (set-face-attribute 'evil-search-highlight-persist-highlight-face nil :background "#dc8cc3" :foreground "#2b2b2b")
      ;; (set-face-attribute 'flycheck-error nil :foreground "#dfaf8f" :underline (:color foreground-color :style wave :weight bold))
      (set-face-attribute 'highlight-indentation-current-column-face nil :background "#383838")
      (set-face-attribute 'highlight-indentation-face nil :background "#494949")
      ;; (set-face-attribute 'relative-line-numbers-current-line nil :inherit relative-line-numbers :foreground "#94bff3" :weight semi-light)
      ;; (set-face-attribute 'term nil :background "#3f3f3f" :foreground "#d9d9d6")
      (set-face-attribute 'vertical-border nil :background "#494949" :foreground "#494949"))
  #+end_src

  #+begin_src emacs-lisp
    (lexical-let ((default-color (cons (face-background 'mode-line)
                                       (face-foreground 'mode-line))))
      (add-hook 'post-command-hook
                (lambda ()
                  (let ((color (cond ((minibufferp) default-color)
                                     ((evil-insert-state-p) '("#f0dfaf" . "#2b2b2b"))
                                     ((evil-emacs-state-p)  '("#dc8cc3" . "#2b2b2b"))
                                     ((evil-visual-state-p)  '("#94bff3" . "#2b2b2b"))
                                     ((buffer-modified-p)   '("#ac7373" . "#2b2b2b"))
                                     (t default-color))))
                    (set-face-background 'mode-line (car color))
                    (set-face-foreground 'mode-line-buffer-id (cdr color))
                    (set-face-foreground 'mode-line (cdr color))))))

  #+end_src

** Rainbow mode
  Hexadecimal strings colored with corresponding colors in certain
  modes
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-mode
      :config
      (add-hook 'scss-mode-hook 'rainbow-mode)
      (add-hook 'css-mode-hook 'rainbow-mode)
      (add-hook 'web-mode-hook 'rainbow-mode)
      (add-hook 'less-mode-hook 'rainbow-mode)
      (add-hook 'html-mode-hook 'rainbow-mode)
      )
  #+END_SRC

* Smartparens | Paredit

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :diminish smartparens-strict-mode
    :config
    (use-package evil-smartparens)
    (add-hook 'prog-mode-hook 'smartparens-strict-mode)
    (add-hook 'prog-mode-hook 'evil-smartparens-mode)
    (require 'smartparens-config)
    (defun my-web-mode-hook ()
      (setq web-mode-enable-auto-pairing nil))

    (add-hook 'web-mode-hook  'my-web-mode-hook)

    (defun sp-web-mode-is-code-context (id action context)
      (and (eq action 'insert)
           (not (or (get-text-property (point) 'part-side)
                    (get-text-property (point) 'block-side)))))

    (sp-local-pair 'web-mode "<" nil :when '(sp-web-mode-is-code-context))
    (define-key evil-normal-state-map (kbd "C-(") 'sp-backward-slurp-sexp)
    (define-key evil-normal-state-map (kbd "C-)") 'sp-forward-slurp-sexp)
    (define-key evil-normal-state-map (kbd "C-{") 'sp-backward-barf-sexp)
    (define-key evil-normal-state-map (kbd "C-}") 'sp-forward-barf-sexp)
    )
  ;; (use-package paredit
  ;;   :diminish paredit-mode
  ;;   :config
  ;;   ;; Enable paredit for a couple for non lisp modes; tweak
  ;;   ;; paredit-space-for-delimiter-predicates to avoid inserting spaces
  ;;   ;; before open parens.
  ;;   (dolist (mode '(emacs-lisp lisp javascript js2))
  ;;     (add-hook (intern (format "%s-mode-hook" mode))
  ;;               '(lambda ()
  ;;                  (add-to-list (make-local-variable 'paredit-space-for-delimiter-predicates)
  ;;                               (lambda (_ _) nil))
  ;;                  (enable-paredit-mode))))
  ;;   (add-hook 'lisp-mode-hook 'paredit-mode))
#+END_SRC

* magit

#+BEGIN_SRC emacs-lisp
(use-package magit
 :config
 (use-package evil-magit)
)
#+END_SRC

* Wiki
** Org Tips
   +[[http://orgmode.org/manual/Specific-header-arguments.html#Specific-header-arguments][ List of Code block arguments]]
   + [[http://orgmode.org/worg/org-contrib/babel/header-args.html][Header Args]]
   + http://orgmode.org/manual/Breaking-down-tasks.html
   + Disable ~_~ subscripts with ~C-C C-x \~
   + ~C-c ~~ to alternate between org-table and table.el
   + Sometimes you want to escape some characters
     (~|~ inside org-tables)
     http://orgmode.org/worg/org-symbols.html
   + Good tutorial :: http://doc.norang.ca/org-mode.html
   + Markup: http://orgmode.org/manual/Structural-markup-elements.html
   + To add tags ~C-c C-c~ or ~C-c C-q~
   + ~C-c C-w~ org refile
   + archive with ~C-c $~
   + M-C-enter insert heading after current one
   + M-S-enter insert heading before current one
   + ~C-c C-s~ to schedule
   + C-Super-enter insert current heading
   + ~C-c [~ and ~C-c ]~ add and remove agenda files. ~C-c `~ cycle through
     agenda
   + [[http://orgmode.org/manual/Agenda-commands.html][Agenda Commands are amazing]]
     F for agenda-follow-mode
     d focus on day
     w focus on week
     v m view month
     f forward
     b backward
     r reload
     S-Left item date backward
     S-Right item date forward
   + ~Spc a < t~ to see todo view for buffer and ~number r~ to select a type of todo
     ~m~ to mark them and ~B~ to perform an action on them.
** Find and replace
   + rgrep
   + ~regex-builder~ to visually build your regex
   + ~query-replace-regex~, ~replace-regex~
   + Errors
     You can navigate trough “errors” with previous-error ~M-g p~ and next-error
     ~M-g n~. You can edit “errors” directly in /all/ buffer.
** Windows configurations
   Navigate between windows configurations with C-c Left/Right Arrow
   #+begin_src emacs-lisp
  (winner-mode 1)
   #+end_src

** Cool mode
*** follow-mode
*** indirect buffer
*** Palimpset mode
    C-c C-r send selected text to the bottom
    C-c C-q send selected text to trash file
    #+begin_src emacs-lisp
  (use-package palimpsest)
    #+end_src
*** writeroom-mode

    #+begin_src emacs-lisp
  (use-package writeroom-mode)
  (defun writer-toogle ()
    "switches between writer-mode and normal mode"
    (interactive)
    (if (bound-and-true-p variable-pitch-mode)
        (progn
          (writeroom-mode -1)
          (variable-pitch-mode -1))
      (progn
        (writeroom-mode t)
        (variable-pitch-mode t))))
    #+end_src
* Exit setup hook

#+BEGIN_SRC emacs-lisp
(my-minibuffer-gc-exit-hook)

#+END_SRC
