-*- coding: utf-8 -*-
#+PROPERTY: header-args    :results silent
* Encoding

  I want UTF-8 everywhere.
  #+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (setq buffer-file-coding-system 'utf-8)
  (setq erc-server-coding-system '(utf-8 . utf-8))
  (setq locale-coding-system 'utf-8)
  (setq org-export-coding-system (quote utf-8))
  (setq org-export-html-coding-system (quote utf-8))
  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
  (if (boundp 'buffer-file-coding-system)
      (setq-default buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8))
  #+End_SRC

  Making sure emacs language environment variables are also
  specifying UTF-8. When starting Emacs with a GUI, it is not
  always the case.
  Great explanation of emacs environment variables [[http://ergoemacs.org/emacs/emacs_env_var_paths.html][here]].
  #+BEGIN_SRC emacs-lisp
    (setenv "LANG" "fr_FR.UTF-8")
    (setenv "LC_ALL" "fr_FR.UTF-8")
  #+END_SRC

  Before everything loading my custom setting file
  #+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (load custom-file)
  #+END_SRC

* Packages

  An helper to install missing packages.


  #+BEGIN_SRC emacs-lisp
(defun require-package (package &optional min-version)
  "Ask elpa to install given PACKAGE."
  (unless (package-installed-p package min-version)
    (package-install package)))

(setq package-archives
      '(("gnu"         . "http://elpa.gnu.org/packages/")
        ("org"         . "http://orgmode.org/elpa/")
        ("marmalade"   . "http://marmalade-repo.org/packages/")
        ("melpa"       . "http://melpa.milkbox.net/packages/")))
(setq package-user-dir (concat user-emacs-directory "elpa"))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(require-package 'use-package)
(require 'use-package)
(setq use-package-always-ensure t)
  #+END_SRC

#+begin_src emacs-lisp
  (setenv "NODE_PATH"
          (concat
           (getenv "HOME") "/node_modules" ":"
           (getenv "NODE_PATH")
           )
          )

  (use-package deft)
#+end_src

* Git
  #+BEGIN_SRC emacs-lisp
   (use-package magit)
  #+END_SRC

* text-mode

  #+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook
            (lambda ()
              (electric-pair-mode +1)))
  #+END_SRC

* About

  *Feel free to copy anything you want.*

  Some settings are present in my ~custom.el~. I try to merge them
  into my org-babel file from time to time.

  #+BEGIN_SRC emacs-lisp :exports both
  (emacs-version)
  #+END_SRC

* Inspiration

    + https://github.com/eschulte/emacs24-starter-kit
    + https://github.com/sachac/.emacs.d/
    + https://github.com/purcell/emacs.d
    + https://github.com/bbatsov/prelude
    + https://github.com/cjohansen/.emacs.d
    + https://github.com/magnars/.emacs.d
    + https://github.com/dimitri/emacs-kicker

* Initialization

  Auto-indent
  #+BEGIN_SRC emacs-lisp
  (electric-indent-mode 1)
  #+END_SRC

  Useful variables to know in which environment I am in.
  #+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)

  (setq *is-a-windows* (eq system-type 'windows-nt))
  (setq *is-a-mac* (eq system-type 'darwin))
  ;; my computer is fast, don't halt redrawing if a new input event arrives
  (setq redisplay-dont-pause t)
  (let ((default-directory  "~/.emacs.d/site-lisp/"))
    (normal-top-level-add-to-load-path '("."))
    (normal-top-level-add-subdirs-to-load-path))
  #+END_SRC

  Should use default Mac OS X browser on Mac.
  #+BEGIN_SRC emacs-lisp
  (when *is-a-mac*
    (setq browse-url-browser-function (quote browse-url-default-macosx-browser)))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
(setq user-full-name "Aurelien Bottazini"
      user-mail-address "aurelien@bottazini.com")
  #+END_SRC

  Getting right into the action. No initial message and clean
  scratch buffer.
  #+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
  #+END_SRC

* Exec path
  Picking ~PATH~ from shell
  #+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-env "DOCKER_HOST")
    (exec-path-from-shell-copy-env "DOCKER_TLS_VERIFY"))
  #+END_SRC

  Furthermore, on mac, /path_helper/ is messing with the path. I commented the
  calls to path helper in /etc/profile/ and /etc/zshenv/

* Fonts
  #+BEGIN_SRC emacs-lisp
    ;; -*-Operator Mono-bold-italic-normal-*-*-*-*-*-m-0-iso10646-1
    ;; -*-Operator Mono-bold-normal-normal-*-*-*-*-*-m-0-iso10646-1
    ;; -*-Operator Mono-light-italic-normal-*-*-*-*-*-m-0-iso10646-1
    ;; -*-Operator Mono-light-normal-normal-*-*-*-*-*-m-0-iso10646-1
    ;; -*-Operator Mono-normal-italic-normal-*-*-*-*-*-m-0-iso10646-1
    ;; -*-Operator Mono-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1
    ;; -*-Operator Mono-ultralight-italic-normal-*-*-*-*-*-m-0-iso10646-1
    ;; -*-Operator Mono-ultralight-normal-normal-*-*-*-*-*-m-0-iso10646-1

    (set-default-font "-*-Operator Mono-light-normal-normal-*-14-*-*-*-m-0-iso10646-1")
  #+END_SRC

* Tabs

  Tabs can be reproduced as frames or window configurations. You can
  use registers to save windows configurations.
  There is also elscreen available for that

  #+begin_src emacs-lisp
     (use-package elscreen
       :config
       (elscreen-start))
  #+end_src

* org-mode

  Making sure I have the latest /org-mode/.
  #+BEGIN_SRC emacs-lisp
    (use-package org)

    ;; easier completion when refiling org-mode
    (require 'ido)
    (setq ido-everywhere t)
    (ido-mode t)

    (setq org-startup-indented nil)
    (setq org-indent-mode nil)
    (setq org-indent-indentation-per-level 2)
    (setq org-src-fontify-natively t)

    ;;(add-hook 'org-mode-hook '(lambda ()
    ;;                          (turn-on-flyspell)
    ;;                          (writegood-mode t)))
    (add-hook 'org-mode-hook 'turn-on-auto-fill)
    (setq org-completion-use-ido t)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-use-outline-path 'file)
    ;; Targets include current file and any file contributing to the agenda - up to 2 levels deep
    (setq org-refile-targets (quote ((nil :maxlevel . 2)
                                     (org-agenda-files :maxlevel . 2))))
    (defadvice org-refile (after save-refiled-buffer activate compile)
      "saves all org buffers after using refile"
      (org-save-all-org-buffers))

    (setcar (nthcdr 4 org-emphasis-regexp-components) 2)
    (setq org-clock-persist 'history)
    (org-clock-persistence-insinuate)
    (setq org-todo-keywords
          '((sequence "TODO(t)" "WAITING(w!)" "|" "DONE(d!)" "CANCELED(c!)")))
    ;; (setq org-tag-alist '(("next" . ?n)
    ;;                       ("maybe" . ?m)
    ;;                       ("waiting" . ?w)
    ;;                       ("read" . ?r)))
    (setq org-confirm-babel-evaluate nil)
    (setq org-html-doctype "html5")
    (setq org-html-html5-fancy t)
    (setq org-html-allow-name-attribute-in-anchors nil) ; does not validate with wc3 validator
    (setq org-html-head-include-default-style nil)
    (setq org-html-head-extra nil)
    (setq org-html-head-include-scripts nil)


    (setq org-html-head "
        <link rel=\"stylesheet\" type=\"text/css\" href=\"http://aurelienbottazini.com/css/org-export.min.css\">
        <script src=\"http://aurelienbottazini.com/js/org-export.min.js\"></script>")

    (require 'ox-publish)
    (setq org-publish-project-alist
          '(("org-notes-to-html"
             :base-directory "~/projects/aurelienbottazini.com/_org/"
             :base-extension "org"
             :publishing-directory "~/projects/aurelienbottazini.com/"
             :recursive t
             :publishing-function org-html-publish-to-html
             :headline-levels 4
             :auto-preamble t
             :html-extension "html"
             :with-toc nil
             :body-only t
             )
            ("org-notes-to-pdf"
             :base-directory "~/projects/aurelienbottazini.com/_org/"
             :base-extension "org"
             :publishing-directory "~/projects/aurelienbottazini.com/"
             :recursive t
             :publishing-function org-latex-publish-to-pdf
             :headline-levels 4
             :auto-preamble t
             :with-toc nil
             )
            )
          )
    (use-package org-bullets
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
      (set-display-table-slot standard-display-table
                              'selective-display (string-to-vector "  ••• ")))
    (use-package ob-typescript
      :config
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((typescript . t)
         (js . t)
         ))
      )
  #+END_SRC

** Html export
   For colorized source codes with html export
   #+BEGIN_SRC emacs-lisp
  (use-package htmlize
   :config
   (setq org-html-htmlize-output-type (quote css)))
   #+END_SRC

* UI

  #+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
  (column-number-mode)
  (global-hl-line-mode)
  #+END_SRC

  No tabs
  #+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  #+END_SRC

  y and n instead of yes or no
  #+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

  Whenever an external process changes a file underneath emacs, and there
  was no unsaved changes in the corresponding buffer, just revert its
  content to reflect what's on-disk.
  #+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode 1)
  #+END_SRC

  This is how you enable errors with a full backtrace:

  Better print menus.
  #+BEGIN_SRC emacs-lisp
  (use-package printing
   :config
   (pr-update-menus t))
  #+END_SRC

  One space after a period makes a sentence. Not two. Allows sentence
  based commands to work properly.
  #+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)    ; Fix M-e
  #+END_SRC

  To be able to execute commands while in the minibuffer
  #+BEGIN_SRC emacs-lisp
  (setq enable-recursive-minibuffers t)
  #+END_SRC

  Follow symlinks without asking
  #+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
  ;; (setq vc-follow-symlinks (quote ask))
  #+END_SRC

* Multiple cursors

  D: clear the region
  C: clear to end-of-region and go into insert mode
  A: go into insert mode at end-of-region
  I: go into insert mode at start-of-region
  V: select the region
  $: go to end-of-region
  0/^: go to start-of-region
  gg/G: go to the first/last region

  #+begin_src emacs-lisp
  (use-package evil-multiedit
    :config
    ;; Highlights all matches of the selection in the buffer.
    (define-key evil-visual-state-map "R" 'evil-multiedit-match-all)

    ;; Match the word under cursor (i.e. make it an edit region). Consecutive presses will
    ;; incrementally add the next unmatched match.
    (define-key evil-normal-state-map (kbd "M-d") 'evil-multiedit-match-and-next)
    ;; Match selected region.
    (define-key evil-visual-state-map (kbd "M-d") 'evil-multiedit-match-and-next)

    ;; Same as M-d but in reverse.
    (define-key evil-normal-state-map (kbd "M-D") 'evil-multiedit-match-and-prev)
    (define-key evil-visual-state-map (kbd "M-D") 'evil-multiedit-match-and-prev)

    ;; OPTIONAL: If you prefer to grab symbols rather than words, use
    ;; `evil-multiedit-match-symbol-and-next` (or prev).

    ;; Restore the last group of multiedit regions.
    (define-key evil-visual-state-map (kbd "C-M-D") 'evil-multiedit-restore)

    ;; RET will toggle the region under the cursor
    (define-key evil-multiedit-state-map (kbd "RET") 'evil-multiedit-toggle-or-restrict-region)

    ;; ...and in visual mode, RET will disable all fields outside the selected region
    (define-key evil-visual-state-map (kbd "RET") 'evil-multiedit-toggle-or-restrict-region)

    ;; For moving between edit regions
    (define-key evil-multiedit-state-map (kbd "C-n") 'evil-multiedit-next)
    (define-key evil-multiedit-state-map (kbd "C-p") 'evil-multiedit-prev)
    (define-key evil-multiedit-insert-state-map (kbd "C-n") 'evil-multiedit-next)
    (define-key evil-multiedit-insert-state-map (kbd "C-p") 'evil-multiedit-prev)

    ;; Ex command that allows you to invoke evil-multiedit with a regular expression, e.g.
    (evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match)
    )
  #+end_src
* save, delete & restore

  Delete trailing white-space when saving buffer.
  #+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  #+END_SRC


  #+BEGIN_SRC emacs-lisp
  (savehist-mode 1)                       ;saves minibuffer history
  ;; (desktop-save-mode 1)                     ;save opened buffers
                                          ;between emacs sessions
  ;; (setq desktop-restore-eager 5) ; restore only 5 buffers at once
  #+END_SRC


  #+BEGIN_SRC emacs-lisp
  (autoload 'saveplace "saveplace" "automatically remember last edited place in a file")
  (setq-default save-place t)
  (recentf-mode 1)                        ;remembering recent files
  (setq recentf-max-saved-items 200
        recentf-max-menu-items 50)
  #+END_SRC


  #+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t      ; don't clobber symlinks
        backup-directory-alist
        '((".*" . "~/.local/share/emacs-saves"))    ; don't litter my fs tree
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t) ; use versioned backups

  (setq auto-save-file-name-transforms
        `((".*" ,"~/.local/share/emacs-saves" t)))
  #+END_SRC


  Deleted files go to OS’s trash folder.
  #+BEGIN_SRC emacs-lisp
  (setq delete-by-moving-to-trash t)
  #+END_SRC


  Updating time-stamp on save if one is present
  #+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'time-stamp)
  #+END_SRC

* Visual interface
  No bell
  #+BEGIN_SRC emacs-lisp
       (setq ring-bell-function 'ignore)
  #+END_SRC


  I want to hide extra bars. I like my Emacs clean. I don't use the
  mouse and I want to do everything through the keyboard
  #+BEGIN_SRC emacs-lisp
     (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
     (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
     (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
     (when (string-match "apple-darwin" system-configuration)
       ;; on mac, there's always a menu bar drown, don't have it empty
       (when window-system
         (menu-bar-mode 1)))
  #+END_SRC


  Show end of buffer with /q/ left fringe.
  #+BEGIN_SRC emacs-lisp
     (setq default-indicate-empty-lines t)
  #+END_SRC


  Delete selected text when typing
  #+BEGIN_SRC emacs-lisp
     (delete-selection-mode 1)
  #+END_SRC


  Different buffer names when a new buffer has the same name as
  an existing one.
  #+BEGIN_SRC emacs-lisp
     (require 'uniquify)
      (setq uniquify-buffer-name-style 'forward)
  #+END_SRC


  File path in frame title.
  #+BEGIN_SRC emacs-lisp
     (setq frame-title-format
           '((:eval (if (buffer-file-name)
                        (abbreviate-file-name (buffer-file-name))
                      "%b"))))
  #+END_SRC

* guide-key
  Get a visual aid for key sequences.
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
     :config
     (which-key-mode))
  #+END_SRC

* Strange functionality
  “Dangerous” functionality enabled (disabled by default or with a warning).
  #+BEGIN_SRC emacs-lisp
    (put 'narrow-to-region 'disabled nil)
    (put 'upcase-region 'disabled nil)
    (put 'dired-find-alternate-file 'disabled nil)
    (put 'downcase-region 'disabled nil)
    (put 'set-goal-column 'disabled nil)
  #+END_SRC

* Better undo
  Supercharge C-x u. Use ~d~ to see a diff
  #+begin_src emacs-lisp
  (use-package undo-tree
   :config
   (global-undo-tree-mode))
  #+end_src

* Vim

  #+BEGIN_SRC emacs-lisp
  (use-package evil-leader
   :config
   (global-evil-leader-mode)
   (setq evil-toggle-key "C-c e"))

  (use-package evil
   :config
   (evil-mode 1)
(fset 'evil-visual-update-x-selection 'ignore)
(setq x-select-enable-clipboard nil)
  (setq evil-emacs-state-cursor  '("#DC8CC3" box))
  (setq evil-normal-state-cursor '("#94bff3" box))
  (setq evil-visual-state-cursor '("#f0dfaf" box))
  (setq evil-insert-state-cursor '("#94bff3" bar))
  (setq evil-motion-state-cursor '("#afd8af" box))
(evil-declare-key 'normal org-mode-map
    "gk" 'outline-up-heading
    "gj" 'outline-next-visible-heading
    "H" 'org-beginning-of-line ; smarter behaviour on headlines etc.
    "L" 'org-end-of-line ; smarter behaviour on headlines etc.
    "t" 'org-todo ; mark a TODO item as DONE
    ",c" 'org-cycle
    (kbd "TAB") 'org-cycle
    ",e" 'org-export-dispatch
    ",n" 'outline-next-visible-heading
    ",p" 'outline-previous-visible-heading
    ",t" 'org-set-tags-command
    ",u" 'outline-up-heading
    "$" 'org-end-of-line ; smarter behaviour on headlines etc.
    "^" 'org-beginning-of-line ; ditto
    "-" 'org-ctrl-c-minus ; change bullet style
    "<" 'org-metaleft ; out-dent
    ">" 'org-metaright ; indent
    )
  (evil-ex-define-cmd "W"     'evil-write-all)
  (defmacro define-and-bind-text-object (key start-regex end-regex)
    (let ((inner-name (make-symbol "inner-name"))
          (outer-name (make-symbol "outer-name")))
      `(progn
         (evil-define-text-object ,inner-name (count &optional beg end type)
           (evil-select-paren ,start-regex ,end-regex beg end type count nil))
         (evil-define-text-object ,outer-name (count &optional beg end type)
           (evil-select-paren ,start-regex ,end-regex beg end type count t))
         (define-key evil-inner-text-objects-map ,key (quote ,inner-name))
         (define-key evil-outer-text-objects-map ,key (quote ,outer-name)))))

  (define-and-bind-text-object "r" "\\(^\s*def .*\\|^.* do.*\\)\n" "^\s*end\n")

  (eval-after-load 'dired
    '(progn
       ;; use the standard Dired bindings as a base
       (evil-define-key 'normal dired-mode-map
         "-" 'dired-up-directory
         )))

)

  (use-package evil-magit)
  (use-package evil-surround
   :config
   (global-evil-surround-mode 1))

  (use-package evil-commentary
   :config
   (evil-commentary-mode))

  (use-package evil-visualstar
   :config
   (global-evil-visualstar-mode t))

  (use-package evil-indent-plus
   :config
   (evil-indent-plus-default-bindings))

  (use-package relative-line-numbers
   :config
   (defun better-relative-number-format (offset)
    "Another formatting function"
    (format "%3d " (abs offset)))

  (setq relative-line-numbers-format 'better-relative-number-format))
  (add-hook 'prog-mode-hook 'relative-line-numbers-mode)

  (use-package evil-search-highlight-persist
   :config
   (global-evil-search-highlight-persist t))

  (use-package evil-matchit
   :config
  (global-evil-matchit-mode 1))

  #+END_SRC

* Registers
  List of frequently visited files. I can access them using
  ~C-x r j <letter>~.
  #+BEGIN_SRC emacs-lisp
  (dolist
      (r `((?e (file . ,(concat user-emacs-directory "emacs-config.org")))
           (?t (file . ,(expand-file-name "~/.tmux.conf")))
           (?g (file . ,(expand-file-name "~/Dropbox/org/gtd.org")))
           (?i (file . ,(expand-file-name "~/Dropbox/org/inbox.org")))
           (?w (file . ,(expand-file-name "~/projects/aurelienbottazini.com/_org")))
           ))
    (set-register (car r) (cadr r)))
  #+END_SRC

* prog-mode(s)

  #+begin_src emacs-lisp
    (use-package context-coloring
      :config
      (add-hook 'js2-mode-hook #'context-coloring-mode)
      (add-hook 'emacs-lisp-mode-hook #'context-coloring-mode)
      (add-hook 'eval-expression-minibuffer-setup-hook #'context-coloring-mode)
    )
    (use-package emmet-mode
      :config
      (progn
        (evil-define-key 'insert emmet-mode-keymap (kbd "C-j") 'emmet-expand-yas)
        (evil-define-key 'emacs emmet-mode-keymap (kbd "C-j") 'emmet-expand-yas))

      (add-hook 'css-mode-hook
                (lambda ()
                  (emmet-mode)
                  (setq emmet-expand-jsx-className? nil)
                  ))

      (add-hook 'sgml-mode-hook
                (lambda ()
                  (emmet-mode)
                  (setq emmet-expand-jsx-className? nil)
                  ))

      (add-to-list 'auto-mode-alist '("\\.html$" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.htm$" . web-mode))

      (add-hook 'web-mode-hook
                (lambda ()
                  (emmet-mode)
                  (setq emmet-expand-jsx-className? nil)
                  ))

      (add-hook 'js2-jsx-mode-hook
                (lambda ()
                  (emmet-mode)
                  (setq emmet-expand-jsx-className? t)
                  ))
      )


  #+end_src
  Hexadecimal strings colored with corresponding colors in certain
  modes
  #+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
   :config
   (add-hook 'prog-mode-hook 'rainbow-mode)
   (setq rainbow-html-colors-major-mode-list
     (quote
       (html-mode css-mode php-mode nxml-mode xml-mode less-css-mode scss-mode))))
  #+END_SRC


  #+BEGIN_SRC emacs-lisp
    (setq comment-auto-fill-only-comments t)
    ;; (add-hook 'prog-mode-hook
    ;;           (lambda ()
    ;;             ;;(turn-on-auto-fill)
    ;;             ))
    ;; (add-hook 'prog-mode-hook 'flyspell-prog-mode)

    ;; I want to only check spelling inside comments and doc. Not in strings
    (setq flyspell-prog-text-faces '(font-lock-comment-face font-lock-doc-face))

    ;; let's see the 80ish column
    (setq-default fill-column 80)
    (use-package fill-column-indicator
      :config
      (add-hook 'after-change-major-mode-hook
                (lambda () (if (string= major-mode "web-mode")
                               (turn-off-fci-mode) (turn-on-fci-mode))))
      ;; to prevent a bug with some strange character appearing at end of
      ;; line when exporting org files to html with fci-mode installed
      (defun org-html-fontify-code (code lang)
        "Color CODE with htmlize library.
    CODE is a string representing the source code to colorize.  LANG
    is the language used for CODE, as a string, or nil."
        (when code
          (cond
           ;; Case 1: No lang.  Possibly an example block.
           ((not lang)
            ;; Simple transcoding.
            (org-html-encode-plain-text code))
           ;; Case 2: No htmlize or an inferior version of htmlize
           ((not (and (require 'htmlize nil t) (fboundp
                                                'htmlize-region-for-paste)))
            ;; Emit a warning.
            (message "Cannot fontify src block (htmlize.el >= 1.34 required)")
            ;; Simple transcoding.
            (org-html-encode-plain-text code))
           (t
            ;; Map language
            (setq lang (or (assoc-default lang org-src-lang-modes) lang))
            (let* ((lang-mode (and lang (intern (format "%s-mode" lang)))))
              (cond
               ;; Case 1: Language is not associated with any Emacs mode
               ((not (functionp lang-mode))
                ;; Simple transcoding.
                (org-html-encode-plain-text code))
               ;; Case 2: Default.  Fontify code.
               (t
                ;; htmlize
                (setq code (with-temp-buffer
                             ;; Switch to language-specific mode.
                             (funcall lang-mode)

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             (when (require 'fill-column-indicator nil 'noerror)
                               (fci-mode -1))
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                             (insert code)
                             ;; Fontify buffer.
                             (font-lock-fontify-buffer)
                             ;; Remove formatting on newline characters.
                             (save-excursion
                               (let ((beg (point-min))
                                     (end (point-max)))
                                 (goto-char beg)
                                 (while (progn (end-of-line) (< (point) end))
                                   (put-text-property (point) (1+ (point)) 'face nil)
                                   (forward-char 1))))
                             (org-src-mode)
                             (set-buffer-modified-p nil)
                             ;; Htmlize region.
                             (org-html-htmlize-region-for-paste
                              (point-min) (point-max))))
                ;; Strip any enclosing <pre></pre> tags.
                (let* ((beg (and (string-match "\\`<pre[^>]*>\n*" code) (match-end 0)))
                       (end (and beg (string-match "</pre>\\'" code))))
                  (if (and beg end) (substring code beg end) code)))))))))


      )
  #+END_SRC


** CSS
   #+BEGIN_SRC emacs-lisp
  (defun my-css-mode-setup ()
    (setq imenu-generic-expression
          '(("Selectors" "^[[:blank:]]*\\(.*[^ ]\\) *{" 1)))
    (setq imenu-case-fold-search nil)
    (setq imenu-auto-rescan t)
    (setq imenu-space-replacement " ")
    (setq css-indent-offset 2)
    (imenu-add-menubar-index))
  (add-hook 'css-mode-hook 'my-css-mode-setup)
   #+END_SRC


** SASS
   #+BEGIN_SRC emacs-lisp
  (use-package scss-mode
   :config
   (autoload 'scss-mode "scss-mode")
   (add-to-list 'auto-mode-alist '("\\.scss$" . scss-mode))
   (add-hook 'scss-mode-hook 'my-css-mode-setup))

  (use-package sass-mode)
   #+END_SRC


** LESS
   #+begin_src emacs-lisp
  (use-package less-css-mode)
   #+end_src

** shell
   #+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\zshrc$" . shell-script-mode))
  (add-to-list 'auto-mode-alist '("\\zsh$" . shell-script-mode))

  (use-package fish-mode)
   #+END_SRC

** markdown
   #+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :init
    (require 'livedown)
    (evil-define-key 'normal markdown-mode-map
      "vp" 'livedown:preview)

    :config
    (add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
    (setq markdown-imenu-generic-expression
          '(("title"  "^\\(.*\\)[\n]=+$" 1)
            ("h2-"    "^\\(.*\\)[\n]-+$" 1)
            ("h1"   "^# \\(.*\\)$" 1)
            ("h2"   "^## \\(.*\\)$" 1)
            ("h3"   "^### \\(.*\\)$" 1)
            ("h4"   "^#### \\(.*\\)$" 1)
            ("h5"   "^##### \\(.*\\)$" 1)
            ("h6"   "^###### \\(.*\\)$" 1)
            ("fn"   "^\\[\\^\\(.*\\)\\]" 1)
            ))

    (add-hook 'markdown-mode-hook
              (lambda ()
                (setq imenu-generic-expression markdown-imenu-generic-expression)
                (writegood-mode t))))



   #+END_SRC


** JavaScript

   #+BEGIN_SRC emacs-lisp
  (use-package js2-mode
   :config
   (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
   (add-to-list 'auto-mode-alist '("\\.jsx$" . js2-jsx-mode)
   (add-hook 'js2-mode-hook (lambda() (subword-mode t)))
)

  (setq js2-highlight-level 3))

  (use-package typescript-mode)
  (use-package json-mode)
  ;; conmmands to _beautify_ js, css and html
  (use-package web-beautify)
  (use-package js2-refactor
    :config
    (js2r-add-keybindings-with-prefix "C-c C-r"))
  ;;(use-package tern
  ;;  :config
  ;;  (add-hook 'js2-mode-hook (lambda () (tern-mode t))))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package coffee-mode
       :config
       (add-hook 'coffee-mode-hook '(lambda () (highlight-indentation-mode)))
       (add-hook 'coffee-mode-hook '(lambda () (subword-mode +1)))
       (custom-set-variables '(coffee-tab-width 2)))

     (use-package highlight-indentation)
     (use-package babel-repl
       :config
       (require 'comint)
       (add-to-list 'comint-preoutput-filter-functions
                    (lambda (output)
                      (replace-regexp-in-string "\033\\[[0-9]+[A-Z]" "" output)))

       (setq babel-repl-cli-arguments '("--presets=es2015"
                                        ;; "--eval=\"require('repl').start({replMode: require('repl').REPL_MODE_STRICT, ignoreUndefined: true})\""
       ))
       (setq babel-repl-cli-program "org-babel-node")
       (evil-leader/set-key-for-mode 'js2-mode "x" 'babel-repl-send-buffer)
      )
   #+END_SRC

** Ruby

   #+BEGIN_SRC emacs-lisp
          (use-package yaml-mode
           :config
           (add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-mode)))

          (use-package ruby-mode
           :config
          (add-to-list 'auto-mode-alist '("\\.rake\\'" . enh-ruby-mode))
          (add-to-list 'auto-mode-alist '("Rakefile\\'" . enh-ruby-mode))
          (add-to-list 'auto-mode-alist '("\\.gemspec\\'" . enh-ruby-mode))
          (add-to-list 'auto-mode-alist '("\\.ru\\'" . enh-ruby-mode))
          (add-to-list 'auto-mode-alist '("Gemfile\\'" . enh-ruby-mode))
          (add-to-list 'auto-mode-alist '("Guardfile\\'" . enh-ruby-mode))
          (add-to-list 'auto-mode-alist '("Capfile\\'" . enh-ruby-mode))
          (add-to-list 'auto-mode-alist '("\\.cap\\'" . enh-ruby-mode))
          (add-to-list 'auto-mode-alist '("\\.thor\\'" . enh-ruby-mode))
          (add-to-list 'auto-mode-alist '("\\.rabl\\'" . enh-ruby-mode))
          (add-to-list 'auto-mode-alist '("Thorfile\\'" . enh-ruby-mode))
          (add-to-list 'auto-mode-alist '("Vagrantfile\\'" . enh-ruby-mode))
          (add-to-list 'auto-mode-alist '("\\.jbuilder\\'" . enh-ruby-mode))
          (add-to-list 'auto-mode-alist '("Podfile\\'" . enh-ruby-mode))
          (add-to-list 'auto-mode-alist '("\\.podspec\\'" . enh-ruby-mode))
          (add-to-list 'auto-mode-alist '("Puppetfile\\'" . enh-ruby-mode))
          (add-to-list 'auto-mode-alist '("Berksfile\\'" . enh-ruby-mode))
          (add-to-list 'auto-mode-alist '("Appraisals\\'" . enh-ruby-mode))
          (add-to-list 'auto-mode-alist '("\\.rb$" . enh-ruby-mode))
          (add-to-list 'interpreter-mode-alist '("ruby" . enh-ruby-mode))

          (eval-after-load 'ruby-mode '(modify-syntax-entry ?: "." ruby-mode-syntax-table))
          (eval-after-load 'ruby-mode
            '(progn
               (defun ruby-mode-defaults ()
                 (inf-ruby-minor-mode +1)
                 ;; CamelCase aware editing operations
                 (subword-mode +1))))

          (use-package enh-ruby-mode
          :config
          (add-hook 'enh-ruby-mode-hook (lambda ()
          (run-hooks 'ruby-mode-hook))))

          ;; I modify the syntax table to specify ":" as punctuation (and not part of a symbol)
          ;; make it easier to work with global gnu tags
          (define-category ?U "Uppercase")
          (define-category ?u "Lowercase")
          (modify-category-entry (cons ?A ?Z) ?U)
          (modify-category-entry (cons ?a ?z) ?u)
          (make-variable-buffer-local 'evil-cjk-word-separating-categories)
          (add-hook 'subword-mode-hook
                    (lambda ()
                      (if subword-mode
                          (push '(?u . ?U) evil-cjk-word-separating-categories)
                        (setq evil-cjk-word-separating-categories
                              (default-value 'evil-cjk-word-separating-categories)))))

          (eval-after-load 'ruby-mode
            '(progn
               ;; use the standard Dired bindings as a base
               (evil-define-key 'normal ruby-mode-map
                 "[m" 'ruby-beginning-of-defun
                 "]m" 'ruby-end-of-defun
                 )))

          (add-hook 'ruby-mode-hook
                   (lambda ()
                     (set (make-local-variable imenu-generic-expression)
                          '(("Methods"  "^\\( *\\(def\\) +.+\\)"          1)
                            ))))
          ;
          ;(add-hook 'ruby-mode-hook 'rspec-mode)
     )

          (use-package bundler)

          (use-package ruby-interpolation)
          (use-package inf-ruby)

   #+END_SRC

   #+BEGIN_SRC emacs-lisp
  (use-package projectile-rails
   :config
   (add-hook 'projectile-mode-hook 'projectile-rails-on))

  (use-package rspec-mode)
   #+END_SRC

   Hitting ~M-;~ twice adds an xmpfilter comment.
   Hitting xmp keybinding will put the output in this comment
   #+begin_src emacs-lisp
  (use-package rcodetools
   :load-path "/site-lisp/rcodetools.el"
   :pin manual
   :ensure nil
   :config
   (evil-leader/set-key-for-mode 'ruby-mode "x"  'xmp))
   #+end_src


** Haml
   #+BEGIN_SRC emacs-lisp
 (use-package haml-mode
  :config
  (add-hook 'haml-mode-hook '(lambda () (highlight-indentation-mode))))
   #+END_SRC


** Docker

   #+begin_src emacs-lisp
  (use-package dockerfile-mode)
   #+end_src

* Code checker
  On the fly code checking with [[http://flycheck.readthedocs.org/en/latest/guide/introduction.html][FlyCheck]]

  On a large screen you can use ~flycheck-list-errors~ to open a
  buffer listing your errors next to your code.

  #+BEGIN_SRC emacs-lisp
      (use-package flycheck
       :config
       (add-hook 'after-init-hook #'global-flycheck-mode)
       ;; (require-package 'flycheck-typescript-tslint)
       ;; (eval-after-load 'flycheck
         ;; '(add-hook 'flycheck-mode-hook #'flycheck-typescript-tslint-setup))
    )

  #+END_SRC


  Don't forget to install:
  + Ruby
    To respect [[https://github.com/bbatsov/ruby-style-guide][Github ruby style guide]]
    ~$ gem install rubocop~
    If you use a tool like rbenv to install locally a specific version
    of ruby, don't forget to re-install /rubocop/.
  + Javascript
    Syntax checkers seem to have trouble running at the same time. You
    can use ~flycheck-select-checker~ to switch between them.
    - closurelinter (gjslint. Google javascript style guide)
      https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml

      ~$ sudo easy_install http://closure-linter.googlecode.com/files/closure_linter-latest.tar.gz~
    - jshint
      ~$ npm install -g jshint~
  + HTML
    To support HTML5. https://w3c.github.io/tidy-html5/
    ~$ brew install tidy-html5~
  + Coffee Script
    ~Install npm install -g coffeelint~

* Navigation
** Helm
   #+BEGIN_SRC emacs-lisp
  (use-package helm
   :config
   (require 'helm-config))
  (use-package helm-ag)
   #+END_SRC

** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package ag) ;; ultra fast search
     (use-package projectile
      :config
      (projectile-global-mode)
      (setq projectile-indexing-method 'alien)
      (setq projectile-enable-caching nil)
      (setq projectile-switch-project-action 'projectile-dired))

     (require 'wgrep)
     (use-package helm-projectile
      :config
      (setq projectile-completion-system 'helm)
      (helm-projectile-on))
   #+END_SRC

** Setting it up
   Adjusting command, control and option keys on mac.
   #+BEGIN_SRC emacs-lisp
    (when *is-a-mac*
      (setq mac-command-modifier 'meta)
      (setq mac-option-modifier 'none)
      (setq mac-right-control-modifier 'hyper)
      (setq mac-right-option-modifier 'none)
      (setq mac-right-command-modifier 'super)
      ;;(setq ns-function-modifier 'hyper)
  (setq default-input-method "MacOSX"))
   #+END_SRC



   Defining my key-map where I define my keys and give them top priorities.
   #+BEGIN_SRC emacs-lisp
  (defvar my-keys-minor-mode-map (make-keymap) "my-keys-minor-mode keymap.")
  (define-minor-mode my-keys-minor-mode
    "A minor mode so that my key settings override annoying major modes."
    t " my-keys" 'my-keys-minor-mode-map)
  (my-keys-minor-mode 1)

      (defadvice load (after give-my-keybindings-priority)
        "Try to ensure that my keybindings always have priority."
        (if (not (eq (car (car minor-mode-map-alist)) 'my-keys-minor-mode))
            (let ((mykeys (assq 'my-keys-minor-mode minor-mode-map-alist)))
              (assq-delete-all 'my-keys-minor-mode minor-mode-map-alist)
              (add-to-list 'minor-mode-map-alist mykeys))))
  (ad-activate 'load)
   #+END_SRC

** Tmux
   #+BEGIN_SRC emacs-lisp

  (defun tmux-socket-command-string ()
    (concat "tmux -S "
            (replace-regexp-in-string "\n\\'" ""
                                      (shell-command-to-string "echo $TMUX | sed -e 's/,.*//g'"))))

  (defun tmux-move-left ()
      (interactive)
      (condition-case nil
          (evil-window-left 1)
        (error (shell-command (concat (tmux-socket-command-string) " select-pane -L") nil))))
  (defun tmux-move-down ()
      (interactive)
      (condition-case nil
          (evil-window-down 1)
        (error (shell-command (concat (tmux-socket-command-string) " select-pane -D") nil))))
  (defun tmux-move-up ()
      (interactive)
      (condition-case nil
          (evil-window-up 1)
        (error (shell-command (concat (tmux-socket-command-string) " select-pane -U") nil))))
  (defun tmux-move-right ()
      (interactive)
      (condition-case nil
          (evil-window-right 1)
        (error (shell-command (concat (tmux-socket-command-string) " select-pane -R") nil))))


  (define-key evil-normal-state-map (kbd "C-h") 'tmux-move-left)
  (define-key evil-normal-state-map (kbd "C-j") 'tmux-move-down)
  (define-key evil-normal-state-map (kbd "C-k") 'tmux-move-up)
  (define-key evil-normal-state-map (kbd "C-l") 'tmux-move-right)
   #+END_SRC

** Bindings
   #+BEGIN_SRC emacs-lisp
     (evil-leader/set-leader "<SPC>")

     (evil-leader/set-key "gs" 'magit-status)
     (use-package git-link
       :config
       (evil-leader/set-key "gl" 'git-link))
     (evil-leader/set-key "gh" 'magit-log-buffer-file)


     (defun visit-term-buffer ()
       "Create or visit a terminal buffer."
       (interactive)
       (if (not (get-buffer "*ansi-term*"))
           (progn
             (split-window-sensibly (selected-window))
             (other-window 1)
             )

         )
       (switch-to-buffer-other-window "*ansi-term*"))


     (use-package zoom-window)
     (evil-leader/set-key "S" 'helm-multi-swoop)
     (evil-leader/set-key "b" 'helm-projectile-switch-to-buffer)
     (use-package col-highlight)
     (evil-leader/set-key "c" 'flash-column-highlight)
     (evil-leader/set-key "d" 'deft)
     (evil-leader/set-key "e" 'dired-jump)
     (evil-leader/set-key "f" 'helm-projectile-ag)
     (evil-leader/set-key "h" 'helm-mini)
     (evil-leader/set-key "i" 'helm-imenu)
     (evil-leader/set-key "j" 'evil-avy-goto-char-2)
     (evil-leader/set-key "m" 'mu4e)
     (evil-leader/set-key "oh" 'evil-search-highlight-persist-remove-all)
     (evil-leader/set-key "p" 'projectile-commander)
     (evil-leader/set-key "s" 'helm-swoop)
     (evil-leader/set-key "vs" 'visit-term-buffer)
     (evil-leader/set-key "z" 'zoom-window-zoom)

     (define-key my-keys-minor-mode-map (kbd "C-c n")   'evil-normal-state)
     (define-key my-keys-minor-mode-map (kbd "C-c e")   'evil-emacs-state)
     (define-key my-keys-minor-mode-map (kbd "C-c m")   'evil-motion-state)
     (define-key my-keys-minor-mode-map (kbd "M-/")     'hippie-expand)

     (define-key my-keys-minor-mode-map (kbd "M-x")     'helm-M-x)
     (define-key my-keys-minor-mode-map (kbd "C-x C-f") 'helm-find-files)
     (define-key my-keys-minor-mode-map (kbd "M-?")     'help-command)

     (setq x-select-enable-clipboard nil)
     (defun copy-to-clipboard()
       (interactive)
       (setq x-select-enable-clipboard t)
       (kill-ring-save (region-beginning) (region-end))
       (setq x-select-enable-clipboard nil))
     (defun paste-from-clipboard ()
       (interactive)
       (setq x-select-enable-clipboard t)
       (yank)
       (setq x-select-enable-clipboard nil))
     (define-key my-keys-minor-mode-map (kbd "M-c")     'copy-to-clipboard)
     (define-key my-keys-minor-mode-map (kbd "M-v")     'paste-from-clipboard)

     (evil-leader/set-key-for-mode 'org-mode
       "t"  'org-show-todo-tree
       "i"  'helm-org-in-buffer-headings
       "a"  'org-agenda
       "c"  'org-archive-subtree-default
       "r"  'org-refile
       )

     (use-package key-chord
       :config
       (key-chord-mode 1)
       (key-chord-define evil-insert-state-map  "jk" 'evil-normal-state)
       (key-chord-define evil-insert-state-map  "kj" 'evil-normal-state))

     (define-key evil-normal-state-map (kbd "C-p") 'helm-projectile)

     (define-key evil-normal-state-map (kbd "C-w t") 'make-frame-command)
     (define-key evil-normal-state-map (kbd "C-w x") 'delete-frame)
     (use-package windresize
       :config
       (define-key evil-normal-state-map (kbd "C-w r") 'windresize))


     (define-key evil-normal-state-map (kbd "M-a") 'mark-whole-buffer)
     (define-key evil-normal-state-map (kbd "g t") 'other-frame)

     (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-page-up)

     (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
     (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)

     (define-key evil-normal-state-map (kbd "[s") 'flycheck-previous-error)
     (define-key evil-normal-state-map (kbd "]s") 'flycheck-next-error)
     (define-key evil-normal-state-map (kbd "[e") 'previous-error)
     (define-key evil-normal-state-map (kbd "]e") 'next-error)
     (define-key evil-normal-state-map (kbd "]w") 'winner-redo)
     (define-key evil-normal-state-map (kbd "[w") 'winner-undo)
     (define-key evil-normal-state-map (kbd "]b") 'next-buffer)
     (define-key evil-normal-state-map (kbd "[b") 'previous-buffer)

     (use-package helm-gtags
       :config
       (define-key evil-normal-state-map (kbd "]t") 'helm-gtags-dwim))

     (define-key evil-insert-state-map (kbd "C-n") 'hippie-expand)
     (define-key evil-insert-state-map (kbd "C-x C-o") 'company-complete)


     (define-key my-keys-minor-mode-map (kbd "<f5>") 'revert-buffer)
     (define-key my-keys-minor-mode-map (kbd "<f6>") 'langtool-check)
     (define-key my-keys-minor-mode-map (kbd "<f7>") 'langtool-correct-buffer)
     (define-key my-keys-minor-mode-map (kbd "<f8>") 'ispell-buffer)


   #+END_SRC

** Avy
   #+begin_src emacs-lisp
   (use-package avy)
   #+end_src
* Dired
  buffed up dired (emacs). Dired is for directory listing,
  navigation and manipulation inside emacs.
  #+BEGIN_SRC emacs-lisp
  (require 'dired-x)
  (setq ls-lisp-use-insert-directory-program t)
  (setq insert-directory-program "gls")   ; --dired option not
                                          ; supported by ls, gnu ls
                                          ; seems better
  (defun dired-finder-folder ()
    (interactive)
    (shell-command "open ."))
  #+END_SRC

* Terminal
  #+begin_src emacs-lisp
  (setq term-default-bg-color "#3f3f3f")
  (setq term-default-fg-color "#d9d9d6")
  #+end_src

* Spell Check
  https://joelkuiper.eu/spellcheck_emacs

** ~flyspell~

   Requires you to install ~hunspell~ with
   ~brew install hunspell~ and to download dictionaries for it.
   https://wiki.openoffice.org/wiki/Dictionaries.
   #+BEGIN_SRC emacs-lisp
  (when (executable-find "hunspell")
    (setq-default ispell-program-name "hunspell")
    (setq ispell-really-hunspell t)
    ;; making sure I load the correctly dictionary for hunspell
    (setq ispell-dictionary "en_US_aurelien"))
   #+End_SRC


** ~languagetool~

   ~brew install languagetool~
   #+BEGIN_SRC emacs-lisp
(use-package langtool
 :config
(setq langtool-language-tool-jar "/usr/local/Cellar/languagetool/2.8/libexec/languagetool-commandline.jar"
      langtool-mother-tongue "en"
      ;; rules: https://www.languagetool.org/languages/
      langtool-disabled-rules '("WHITESPACE_RULE"
                                "EN_UNPAIRED_BRACKETS"
                                "COMMA_PARENTHESIS_WHITESPACE")))
   #+END_SRC


** ~writegood~

   Mainly to use ~M-x writegood-reading-ease~

   | Reading ease score |                                                     |
   |--------------------+-----------------------------------------------------|
   | 90.0–100.0         | easily understood by an average 11-year-old student |
   | 60.0–70.0          | easily understood by 13- to 15-year-old students    |
   | 0.0–30.0           | best understood by university graduates             |

   Reader's Digest magazine has a readability index of about 65. Time
   magazine scores about 52
   #+BEGIN_SRC emacs-lisp
  (use-package writegood-mode)
   #+END_SRC

** Synonyms
   #+begin_src emacs-lisp
  (use-package synosaurus)
   #+end_src

* IRC
  I use ~erc~ to chat on IRC.

  Setting nickname and default IRC server.
  #+BEGIN_SRC emacs-lisp
  (setq erc-nick "Auray")
  (setq erc-server "irc.freenode.org")
  #+END_SRC


  Hiding some IRC messages.
  #+BEGIN_SRC emacs-lisp
  (setq erc-hide-list (quote ("JOIN" "QUIT" "left")))
  #+END_SRC

* Mode-line / Powerline / Smart line
  #+BEGIN_SRC emacs-lisp
    (use-package smart-mode-line
     :config
     (setq sml/no-confirm-load-theme t)
     (setq sml/theme 'respectful)
     (add-hook 'after-init-hook #'sml/setup)

    ;; change mode-line color by evil state
    (lexical-let ((default-color (cons (face-background 'mode-line)
                                       (face-foreground 'mode-line)))))
    ;; (add-hook 'post-command-hook
    ;;           (lambda ()
    ;;             (let ((color (cond ((minibufferp) '("#fff7c7" . "#212822"))
    ;;                                ((evil-insert-state-p) '("#a4eddd" . "#212822"))
    ;;                                ((evil-visual-state-p) '("#ffe863" . "#212822"))
    ;;                                ((evil-emacs-state-p)  '("#600b92" . "#f1f2f1"))
    ;;                                (t '("#fff7c7" . "#212822")))))
    ;;                   (set-face-background 'mode-line (car color))
    ;;                   (set-face-foreground 'mode-line (cdr color)))))
    (setq rm-blacklist (quote(" FlyC-" " yas" " my-keys" " s-/" " Undo-Tree" " WK" " ARev" " Abbrev" " Fill"))))
  #+END_SRC

* Functions
  #+begin_src emacs-lisp
  (require 'cl)
  (defun sluggify (str)
    (replace-regexp-in-string
     "[^a-z0-9-]" ""
     (mapconcat 'identity
                (remove-if-not 'identity
                               (subseq (split-string
                                        (downcase str) " ")
                                       0 6))
                "-")))

  (defun new-post (title)
    (interactive "MTitle: ")
    (let ((slug (sluggify title))
          (date (current-time)))
      (find-file (concat "/Users/aurelienbottazini/projects/aurelienbottazini.com/_posts/"
                         (format-time-string "%Y-%m-%d") "-" slug
                         ".md"))
      ))

  #+end_src

* Autotyping
  https://www.gnu.org/software/emacs/manual/html_node/autotype/
** Abbrevs

   #+begin_src emacs-lisp
  (setq abbrev-file-name
        (concat user-emacs-directory "abbrev_defs"))
  (setq save-abbrevs t)
  (setq default-abbrev-mode t)
   #+end_src


** Yasnippets

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
      :config
     (yas-global-mode 1)
     (setq yas-snippet-dirs
           '("~/.emacs.d/snippets")))
   #+END_SRC

** Company

   #+begin_src emacs-lisp
     (use-package company-tern)
     (use-package company)
     (global-company-mode t)
     (setq company-minimum-prefix-length 2)
     (setq company-backends '((company-tern)))
     (with-eval-after-load 'company
       ;;company tab to complete instead of enter
       (define-key company-active-map (kbd "TAB") 'company-complete-selection)
       (define-key company-active-map (kbd "<tab>") 'company-complete-selection)
       (define-key company-active-map [tab] 'company-complete-selection)
       ;; ;;disable enter
       (define-key company-active-map [return] nil)
       (define-key company-active-map (kbd "RET") nil)
      )
   #+end_src

* Wiki
  My own personal notes for commands I like/discover/learn.

  helm: space between each words to have matching patterns
  C-x C-z to suspend emacs
  C-z to switch between vim normal state and emacs state

  rgrep to search/replace with C-x C-q like dired to live edit

  to surround word with double quotes with evil-surround: ysiw"

  Emacs Help is accessible with ~F1~

** Org Tips
   +[[http://orgmode.org/manual/Specific-header-arguments.html#Specific-header-arguments][ List of Code block arguments]]
   + [[http://orgmode.org/worg/org-contrib/babel/header-args.html][Header Args]]
   + http://orgmode.org/manual/Breaking-down-tasks.html
   + Disable ~_~ subscripts with ~C-C C-x \~
   + ~C-c ~~ to alternate between org-table and table.el
   + Sometimes you want to escape some characters
     (~|~ inside org-tables)
     http://orgmode.org/worg/org-symbols.html
   + Good tutorial :: http://doc.norang.ca/org-mode.html
   + Markup: http://orgmode.org/manual/Structural-markup-elements.html
   + To add tags ~C-c C-c~ or ~C-c C-q~
   + ~C-c C-w~ org refile
   + archive with ~C-c $~
   + M-C-enter insert heading after current one
   + M-S-enter insert heading before current one
   + ~C-c C-s~ to schedule
   + C-Super-enter insert current heading
   + ~C-c [~ and ~C-c ]~ add and remove agenda files. ~C-c `~ cycle through
     agenda
   + [[http://orgmode.org/manual/Agenda-commands.html][Agenda Commands are amazing]]
     F for agenda-follow-mode
     d focus on day
     w focus on week
     v m view month
     f forward
     b backward
     r reload
     S-Left item date backward
     S-Right item date forward
   + ~Spc a < t~ to see todo view for buffer and ~number r~ to select a type of todo
     ~m~ to mark them and ~B~ to perform an action on them.
** Multiple Selections
   You can use Multiple cursors by selecting a region and
   TODO: add keybindings
+ ~C-c m a~ to select all identical
+ ~C->~ to select next
+ ~C-<~ to select previous

  Hit ~C-g~ where you are done.

  You can also use rectangles with ~C-x spc~. ~C-x r <letter>~
  for rectangle actions.

** Find and replace
   + rgrep
   + ~regex-builder~ to visually build your regex
   + ~query-replace-regex~, ~replace-regex~
   + occur & all
     Find occurrences of a regular expression in your file.
     #+BEGIN_SRC emacs-lisp
       (require-package 'all-ext)
       (require 'all-ext)
     #+END_SRC


   After using helm-occur do ~C-c C-a~ to edit results in all buffer
   You can navigate trough “errors” with previous-error ~M-g p~ and next-error
   ~M-g n~. You can edit “errors” directly in /all/ buffer.
   + ~helm-swoop~ and ~helm-multi-swoop~
     #+begin_src emacs-lisp
       (require-package 'helm-swoop)
     #+end_src

     Replace occur and all? Search and C-c C-e to edit.
     All is still usable with swoop by using the regular shortcut ~C-c C-a~
   + ~helm-ag~. Use ~M--~ to add options
** Bookmarks
   ~C-x r m~
   ~C-x r b~
   ~helm-bookmarks~
** Helm and projectile
   ~c-t~ to switch between helm window configurations
   ~c-z~ to perform/unperform first action for helm entry
   Use ~tab~ to see all actions possible on an entry

   ~projectile-invalidate-cache~ to have a brand new C-p

   First thing to do when Emacs starts: ~helm-projectile-switch-project~
** Completion

   #+begin_src emacs-lisp
  (setq hippie-expand-try-functions-list '(
                                           try-expand-dabbrev-visible
                                           try-expand-dabbrev
                                           try-expand-dabbrev-all-buffers
                                           try-expand-dabbrev-from-kill
                                           try-complete-file-name
                                           try-expand-all-abbrevs
                                           try-expand-list))
   #+end_src

** Windows
   Navigate between windows configurations with C-c Left/Right Arrow
   #+begin_src emacs-lisp
  (winner-mode 1)
   #+end_src

** Cool mode
*** follow-mode
*** indirect buffer
*** Palimpset mode
    C-c C-r send selected text to the bottom
    C-c C-q send selected text to trash file
    #+begin_src emacs-lisp
  (use-package palimpsest)
    #+end_src
*** writeroom-mode

    #+begin_src emacs-lisp
  (use-package writeroom-mode)
  (defun writer-toogle ()
    "switches between writer-mode and normal mode"
    (interactive)
    (if (bound-and-true-p variable-pitch-mode)
        (progn
          (writeroom-mode -1)
          (variable-pitch-mode -1))
      (progn
        (writeroom-mode t)
        (variable-pitch-mode t))))
    #+end_src
** Magit
   - view buffer history: ~magit-log-buffer-file~
* Emoji
  #+begin_src emacs-lisp
  (defun --set-emoji-font (frame)
    "Adjust the font settings of FRAME so Emacs can display emoji properly."
    (if (eq system-type 'darwin)
        ;; For NS/Cocoa
        (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)
      ;; For Linux
      (set-fontset-font t 'symbol (font-spec :family "Symbola") frame 'prepend)))

  ;; For when Emacs is started in GUI mode:
  (--set-emoji-font nil)
  ;; Hook for when a frame is created with emacsclient
  ;; see https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Frames.html
  (add-hook 'after-make-frame-functions '--set-emoji-font)

  ;; (require-package 'emojify)
  ;; (add-hook 'after-init-hook #'global-emojify-mode)
  ;; (require 'company-emoji)
  ;; (add-to-list 'company-backends 'company-emoji)
  #+end_src

* Colors
  #+begin_src emacs-lisp
    (use-package rainbow-identifiers
      :config
      (add-hook 'prog-mode-hook 'rainbow-identifiers-mode))

    (use-package rainbow-delimiters
      :config
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

    (setq custom-theme-directory "~/.emacs.d/themes")
    (use-package zenburn-theme)
    (load-theme 'zenburn)
    (if (daemonp)
        (add-hook 'after-make-frame-functions
                  (lambda (frame)
                    (select-frame frame)
                    (load-theme 'pantone t)))
      (load-theme 'zenburn t))
    (use-package load-theme-buffer-local)
  #+end_src

* Templates
  #+begin_src emacs-lisp
  (use-package yatemplate
   :init
   (auto-insert-mode t)
   (setq auto-insert t)
   :config
   (setq auto-insert-alist nil)
   (setq auto-insert-query nil)
   (yatemplate-fill-alist))
  #+end_src

* Email
** gnus
   #+begin_src emacs-lisp
  (setq nnmail-expiry-target "INBOX.Trash")
  (setq nnmail-expiry-wait 'immediate)
  (setq gnus-select-method
        '(nnimap "Fastmail" ; primary email
                  (nnimap-address "mail.messagingengine.com")
                  (nnimap-server-port 993)
                  (nnimap-authenticator login)
                  (nnimap-expunge-on-close 'never)
                  (nnimap-stream ssl)))
   #+end_src

** mu4e
   Keybindings: http://www.djcbsoftware.nl/code/mu/mu4e/MSGV-Keybindings.html
   #+begin_src emacs-lisp
    (require 'mu4e)
    (setq mu4e-maildir "~/.Mail")
    (setq mu4e-drafts-folder "/fastmail/INBOX.Drafts")
    (setq mu4e-sent-folder   "/fastmail/INBOX.Sent Items")
    (setq mu4e-trash-folder  "/fastmail/INBOX.Trash")

    ;; don't save message to Sent Messages, Gmail/IMAP takes care of this, What
    ;; about fastmail?
    ;; (setq mu4e-sent-messages-behavior 'delete)

    ;; allow for updating mail using 'U' in the main view:
    (setq mu4e-get-mail-command "offlineimap")

    ;; shortcuts
    (setq mu4e-maildir-shortcuts
        '( ("/fastmail/INBOX"               . ?i)
           ("/fastmail/INBOX.Clevertech"   . ?c)
           ("/fastmail/INBOX.Archive"   . ?a)
           ("/fastmail/INBOX.Sent Items"   . ?s)
           ("/fastmail/INBOX.Learn Spam"   . ?j)

  ))

    ;; something about ourselves
    (setq
       mu4e-compose-signature
        (concat
          "Cheers,\n"))

    ;; show images
    (setq mu4e-show-images t)

    ;; use imagemagick, if available
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))

    ;; convert html emails properly
    ;; Possible options:
    ;;   - html2text -utf8 -width 72
    ;;   - textutil -stdin -format html -convert txt -stdout
    ;;   - html2markdown | grep -v '&nbsp_place_holder;' (Requires html2text pypi)
    ;;   - w3m -dump -cols 80 -T text/html
    ;;   - view in browser (provided below)
    ;; (setq mu4e-html2text-command "textutil -stdin -format html -convert txt -stdout")
    (require 'mu4e-contrib)
    (setq mu4e-html2text-command 'mu4e-shr2text)
    ;; spell check
    (add-hook 'mu4e-compose-mode-hook
            (defun my-do-compose-stuff ()
               "My settings for message composition."
               (set-fill-column 72)
               (flyspell-mode)))

    ;; add option to view html message in a browser
    ;; `aV` in view to activate
    (add-to-list 'mu4e-view-actions
      '("ViewInBrowser" . mu4e-action-view-in-browser) t)

    ;; I have a service running that automatically fetches emails
    (setq mu4e-update-interval nil)

  (setq message-send-mail-function 'smtpmail-send-it
       smtpmail-stream-type 'starttls
       smtpmail-default-smtp-server "mail.messagingengine.com"
       smtpmail-smtp-server "mail.messagingengine.com"
       smtpmail-smtp-service 587)

(use-package helm-mu)
   #+end_src
