Emacs is not an ide but I can be pretty close to one.
Here are some tools I use that are IDE oriented.

* Find file in project
** Examples
   #+begin_src emacs-lisp :tangle no
     ;; if the full path of current file is under SUBPROJECT1 or SUBPROJECT2
     ;; OR if I'm reading my personal issue track document,
     (defun my-setup-develop-environment ()
       (interactive)
       (when (ffip-current-full-filename-match-pattern-p "\\(PROJECT_DIR\\|issue-track.org\\)")
         ;; Though PROJECT_DIR is team's project, I care only its sub-directory "subproj1""
         (setq-local ffip-project-root "~/projs/PROJECT_DIR/subproj1")
         ;; well, I'm not interested in concatenated BIG js file or file in dist/
         (setq-local ffip-find-options "-not -size +64k -not -iwholename '*/dist/*'")
         ;; for this project, I'm only interested certain types of files
         (setq-local ffip-patterns '("*.html" "*.js" "*.css" "*.java" "*.xml" "*.js"))
         ;; maybe you want to search files in `bin' directory?
         (setq-local ffip-prune-patterns (delete "*/bin/*" ffip-prune-patterns))
         ;; exclude `dist/' directory
         (add-to-list 'ffip-prune-patterns "*/dist/*"))
       ;; insert more WHEN statements below this line for other projects
       )

     ;; most major modes inherit from prog-mode, so below line is enough
     (add-hook 'prog-mode-hook 'my-setup-develop-environment)
   #+end_src

   All variables may be overridden on a per-directory basis in your
   .dir-locals.el. See (info “(Emacs) Directory Variables”) for
   details.

   You can place .dir-locals.el into your project root directory.

   A sample .dir-locals.el,

   #+begin_src emacs-lisp :tangle no
     ((nil . ((ffip-project-root . "~/projs/PROJECT_DIR")
              ;; ignore files bigger than 64k and directory "dist/" when searching
              (ffip-find-options . "-not -size +64k -not -iwholename '*/dist/*'")
              ;; only search files with following extensions
              (ffip-patterns . ("*.html" "*.js" "*.css" "*.java" "*.xml" "*.js"))
              (eval . (progn
                        (require 'find-file-in-project)
                        ;; ignore directory ".tox/" when searching
                        (setq ffip-prune-patterns `("*/.tox/*" ,@ffip-prune-patterns))
                        ;; Do NOT ignore directory "bin/" when searching
                        (setq ffip-prune-patterns `(delete "*/bin/*" ,@ffip-prune-patterns))))
              )))
   #+end_src

** My config

   To install fd (rust replacement for find), download it
   [[https://github.com/sharkdp/fd/releases][here]] and run ~sudo dpkg -i fd_7.0.0_amd64.deb~. You can then choose
   to use `fd` instead of find.
   #+begin_src emacs-lisp :results silent
   (use-package find-file-in-project
     :bind (:map  my-keys-minor-mode-map
                  ("C-c T" . find-file-in-project)
                  ("C-c t" . counsel-fzf)
                  ;; ("C-c t" . find-file-in-project-by-selected)
                  ("C-c s" . abo-find-file-with-similar-name)
                  :map evil-normal-state-map
                  ("gf" . find-file-in-project-at-point))
     :config
     (setq ffip-ignore-filenames (seq-remove (lambda (astring) (string= astring "*.png")) ffip-ignore-filenames))
     (setq ffip-ignore-filenames (seq-remove (lambda (astring) (string= astring "*.jpg")) ffip-ignore-filenames))
     (setq ffip-ignore-filenames (seq-remove (lambda (astring) (string= astring "*.jpeg")) ffip-ignore-filenames))
     (setq ffip-ignore-filenames (seq-remove (lambda (astring) (string= astring "*.gif")) ffip-ignore-filenames))
     (setq ffip-ignore-filenames (seq-remove (lambda (astring) (string= astring "*.bmp")) ffip-ignore-filenames))
     (setq ffip-ignore-filenames (seq-remove (lambda (astring) (string= astring "*.ico")) ffip-ignore-filenames))
     (setq ffip-prefer-ido-mode nil)
     (setq ffip-use-rust-fd nil) ;; find works better than fd. fd with ffip ignores my .emacs.d directory for some reason
     (setq ffip-strip-file-name-regex "\\(\\.mock\\|_test\\|\\.test\\|\\.mockup\\|\\.spec\\)")
     (add-to-list 'ffip-prune-patterns "*/.git/*")
     (add-to-list 'ffip-prune-patterns "*/dist/*")
     (add-to-list 'ffip-prune-patterns "*/.emacs.d/elpa/*")
     (add-to-list 'ffip-prune-patterns "*/.nuxt/*")
     (add-to-list 'ffip-prune-patterns "*/spec/coverage/*")
     (add-to-list 'ffip-prune-patterns "*/public/*")
     (add-to-list 'ffip-prune-patterns "*/.shadow-cljs/*")
     (add-to-list 'ffip-prune-patterns "node_modules/*"))
   #+end_src

   #+begin_src emacs-lisp :results silent
     (defun abo-find-file-with-similar-name (&optional open-another-window)
       "Use base name of current file as keyword which could be further stripped.
     by `ffip-strip-file-name-regex'.
     If OPEN-ANOTHER-WINDOW is not nil, the file will be opened in new window."
       (interactive "P")
       (when buffer-file-name
         (let* ((keyword (concat (file-name-base buffer-file-name) "") ))
           (if ffip-strip-file-name-regex
               (setq keyword (replace-regexp-in-string ffip-strip-file-name-regex
                                                       ""
                                                       keyword)))
           (ffip-find-files keyword open-another-window))))
   #+end_src
* Switch between projects

  The main command I use with projectile is ~C-c p p~ to switch quickly
  between projects. I keep projectile because I has a lot of functions
  project oriented and I use them from time to time. Also

  ~projectile-commander~ accessible with ~C-c p m~ has a pretty nice UI.
  #+begin_src emacs-lisp :results silent
    (use-package projectile
      :demand
      :bind (:map my-keys-minor-mode-map
             ("C-c p" . projectile-command-map))
      :init
      (setq projectile-switch-project-action 'projectile-dired)
      :config
      (projectile-mode t))
  #+end_src

* Switch between test and implementation

  This defines a new project type, the interesting part is the test suffix. I
  use it to jump quickly between a test and its implementation.
  Default projectile shortcut for that is ~C-c p t~
  #+begin_src emacs-lisp :results silent
    (use-package projectile
      :config
      (projectile-register-project-type 'npm '("package.json")
                                        :compile "npm install"
                                        :test "npm test"
                                        :run "npm start"
                                        :test-suffix ".spec"))
  #+end_src

* Jump

  /dumb-jump/ just do a search through the project to try to guess the
  correct jump location for the current symbol. It is not has good as an
  IDE code analysis but it works surprisingly well.

  I added a small function to make the current line flash just after a jump
  #+begin_src emacs-lisp :results silent
    (use-package dumb-jump
      :bind (:map evil-normal-state-map
                  ("gd" . dumb-jump-go)
                  ("gD" . dumb-jump-go-other-window))
      :init
      (setq dumb-jump-selector 'ivy)
      :config
      (add-hook 'dumb-jump-after-jump-hook
                (defun abo-dumb-jump-pulse-line ()
                  (pulse-momentary-highlight-one-line (point)))))
  #+end_src

* Tags

  Tags are generated through a [[file:~/dotfiles/git/.git_template/hooks/post-commit::.git/hooks/create_ctags%20>/dev/null%202>&1%20&][git hook]] with [[https://ctags.io/][Universal ctags]].
  I use Vim standard ~C-]~ to visit the tag at point.

  To make sure my hooks are used I delete the hooks directory
  ~./git/config~ and run ~git init .~ again from the concerned project
  directory.
  My [[file:~/dotfiles/git/.git_template][templates]] are used thanks to the [[~GIT_TEMPLATE_DIR][~GIT_TEMPLATE_DIR~]] environment variable.
* IntelliSense

  [[https://langserver.org/][lsp]] uses the language mode server created by Microsoft for VsCode.
  To use it you need to install [[https://github.com/emacs-lsp/lsp-mode#supported-languages][lsp servers]].
  However I found that they do too much and slow down my emacs
  configuration so those are disabled for now (with ~:tangle no~ on
  this babel code block).
  #+begin_src emacs-lisp :results silent :tangle no
    (use-package lsp-mode
      :hook ((js2-mode . lsp)
             (web-mode . lsp)
             (html-mode . lsp)
             (css-mode . lsp)
             (scss-mode . lsp)
             (sass-mode . lsp))
      :commands lsp)

    (use-package company-lsp
      :requires company
      :commands company-lsp
      :config
      (push 'company-lsp company-backends)
      (setq company-transformers nil
            company-lsp-async t
            company-lsp-cache-candidates nil))
  #+end_src

  These are my two go commands to navigate between code references.
  If /lsp/ is enabled for the current buffer, those bindings will use lsp.
  #+begin_src emacs-lisp :results silent
  (use-package evil
    :bind (:map evil-normal-state-map
                  ("g." . xref-find-definitions)
                  ("gr" . xref-find-references)))
  #+end_src
