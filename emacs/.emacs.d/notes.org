Some people switch to Emacs just to use org-mode.

It is one of the best tool for note taking and writing

This is a most important binding.
~C-c l~ to store a link and ~C-c C-l~ to insert that link.

If you have a selection, it will be part of the link and Emacs will
actually look for that selection If you visit the link.
#+begin_src emacs-lisp :results silent
  (define-key my-keys-minor-mode-map "\C-cl" 'org-store-link)
#+end_src

Setting the org-directory helps integration with org-agenda and
for org template captures.
#+begin_src emacs-lisp :results silent
  (setq org-directory (expand-file-name "~/Dropbox/org"))
#+end_src

#+begin_src emacs-lisp :results silent
  (add-hook 'org-mode-hook 'turn-on-auto-fill)

  (add-hook 'org-capture-mode-hook 'evil-insert-state)

  (use-package evil
    :init
    (setq org-use-speed-commands nil)
    :config
    (evil-define-key 'normal org-mode-map
      (kbd "M-l") 'org-shiftmetaright
      (kbd "M-h") 'org-shiftmetaleft
      (kbd "M-k") 'org-move-subtree-up
      (kbd "M-j") 'org-move-subtree-down
      (kbd "M-p") 'org-publish-current-project
      "<" 'org-clock-in
      ">" 'org-clock-out
      "4" 'org-archive-subtree
      "2" 'counsel-org-tag
      "3" 'org-refile
      "t" 'org-todo)
    )
  (add-to-list 'org-modules "org-habit")
  (setq org-log-into-drawer t)

  (setq org-todo-keywords
        '((sequence "TODO" "WAITING" "|" "DONE(!)")))
#+end_src

#+begin_src emacs-lisp :results silent
  (use-package palimpsest
    :diminish palimpsest-mode
    :config
    (add-hook 'org-mode-hook 'palimpsest-mode))
#+end_src

* org-babel

  Org babel allows to evaluate code snippets inside org files.
  This is the best way I know of doing [[https://en.wikipedia.org/wiki/Literate_programming][Literate Programming]]

  This loads more programming languages to use with org-babel.
  #+begin_src emacs-lisp :results silent
    (require 'ob-js)
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((shell . t)))
  #+end_src

* org-capture

  #+begin_src emacs-lisp :results silent
    ;; emacsclient -ca "" --frame-parameters='(quote (name . "global-org-capture"))' -e "(counsel-org-capture)"
    ;; https://cestlaz.github.io/posts/using-emacs-24-capture-2/
    ;; Bind Key to: emacsclient -e "(make-capture-frame)"
    (defadvice org-capture-finalize
        (after delete-capture-frame activate)
      "Advise capture-finalize to close the frame"
      (if (equal "global-org-capture" (frame-parameter nil 'name))
          (progn
            (delete-frame))))

    (defadvice org-capture-destroy
        (after delete-capture-frame activate)
      "Advise capture-destroy to close the frame"
      (if (equal "global-org-capture" (frame-parameter nil 'name))
          (progn
            (delete-frame))))

    ;; make the frame contain a single window. by default org-capture
    ;; splits the window.
    (add-hook 'org-capture-mode-hook
              'delete-other-windows)
  #+end_src

* org-publish

  #+begin_src emacs-lisp :results silent
    (setq
     time-stamp-active t
     time-stamp-line-limit 30     ; check first 30 buffer lines for Time-stamp:
     time-stamp-format "%04y-%02m-%02d") ;

    (add-hook 'org-mode-hook
              (lambda ()
                (setq-local time-stamp-start "Updated on[ 	]+\\\\?[\"<]+")
                (add-hook 'before-save-hook 'time-stamp nil 'local)))

    (add-hook 'write-file-hooks 'time-stamp) ; update when saving
    (require 'ox-publish)
    (setq system-time-locale "C") ;; make sure time local is in english when exporting
    (setq org-html-validation-link nil)
  #+end_src
