Some people switch to Emacs just to use org-mode.

It is one of the best tool for note taking and writing

Setting the org-directory helps integration with org-agenda and
for org template captures.
#+begin_src emacs-lisp :results silent
  (setq org-directory (expand-file-name "~/Dropbox/org"))
#+end_src

#+begin_src emacs-lisp :results silent
  (add-hook 'org-mode-hook 'turn-on-auto-fill)

  (add-hook 'org-capture-mode-hook 'evil-insert-state)

  (use-package evil
    :init
    (setq org-use-speed-commands nil)
    :config
    (evil-define-key 'normal org-mode-map
      (kbd "M-l") 'org-shiftmetaright
      (kbd "M-h") 'org-shiftmetaleft
      (kbd "M-k") 'org-move-subtree-up
      (kbd "M-j") 'org-move-subtree-down
      (kbd "M-p") 'org-publish-current-project
      "<" 'org-clock-in
      ">" 'org-clock-out
      "4" 'org-archive-subtree
      "2" 'counsel-org-tag
      "3" 'org-refile
      "t" 'org-todo)
    )
  (add-to-list 'org-modules "org-habit")
  (setq org-log-into-drawer t)

  (setq org-todo-keywords
        '((sequence "TODO" "WAITING" "|" "DONE(!)")))
#+end_src

* Capture Ideas

  This is a most important binding.
  ~C-c l~ to store a link and ~C-c C-l~ to insert that link.

  If you have a selection, it will be part of the link and Emacs will
  actually look for that selection If you visit the link.
  #+begin_src emacs-lisp :results silent
  (define-key my-keys-minor-mode-map "\C-cl" 'org-store-link)
  #+end_src

  Palimpsest makes it easier to quickly discard blocks of text.
  Main use is to just send the block of text at the bottom of the
  buffer. This way I can revise my writing without losing my drafts.
  ~C-c C-q~ move region to trash
  ~C-c C-r~ move region to bottom
  #+begin_src emacs-lisp :results silent
  (use-package palimpsest
    :diminish palimpsest-mode
    :config
    (add-hook 'org-mode-hook 'palimpsest-mode))
  #+end_src

  #+begin_src emacs-lisp :results silent
   (setq org-capture-templates
          '(("n" "Notes" entry (file+headline "~/Dropbox/org/notes.org" "Inbox") "* %?\n")
            ("t" "TDD" checkitem (file "~/Dropbox/org/tdd.org"))))

   (add-hook 'org-capture-mode-hook 'evil-insert-state)
  #+end_src

  To launch an Emacs client with a capture frame selecting the ~n~ template
  ~emacsclient -ca "" --frame-parameters='(quote (name .
  "global-org-capture"))' -e '(org-capture nil "n")'~.

  It works nicely on Linux, however on Mac the focus and input focus
  is sketchy and is not reliable. I much prefer to gather my thoughts
  with a voice recorder and transcribe them the following day in my
  notes first thing in the morning.

  The following takes advantage that I name those capture frame
  ~global-org-capture~ to do some housekeeping around them
  #+begin_src emacs-lisp :results silent
    (defadvice org-capture-finalize
        (after delete-capture-frame activate)
      "Advise capture-finalize to close the frame"
      (if (equal "global-org-capture" (frame-parameter nil 'name))
          (progn
            (delete-frame))))

    (defadvice org-capture-destroy
        (after delete-capture-frame activate)
      "Advise capture-destroy to close the frame"
      (if (equal "global-org-capture" (frame-parameter nil 'name))
          (progn
            (delete-frame))))

    ;; make the frame contain a single window. by default org-capture
    ;; splits the window.
    (add-hook 'org-capture-mode-hook
              'delete-other-windows)
  #+end_src

* Inline Code

  Org babel allows to evaluate code snippets inside org files.
  This is the best way I know of doing [[https://en.wikipedia.org/wiki/Literate_programming][Literate Programming]]

  This loads more programming languages to use with org-babel.
  #+begin_src emacs-lisp :results silent
    (require 'ob-js)
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((shell . t)))
  #+end_src

* Publish
  My strategy is to keep my writings in the same folder
  ~$HOME/Dropbox/org/writing~ and run ~org-publish-current-file~ or
  ~org-publish~ to export to HTML.

  The HTML export has just the body. I then use a tool like ~jekyll~
  or ~hugo~ to make it accessible on internet.
  #+begin_src emacs-lisp :results silent
    (setq
     time-stamp-active t
     time-stamp-line-limit 30     ; check first 30 buffer lines for Time-stamp:
     time-stamp-format "%04y-%02m-%02d") ;

    (setq system-time-locale "C") ;; make sure time local is in english when exporting
    (setq org-html-validation-link nil)
    (setq org-publish-project-alist
          '(
            ("wiki-files"
             :base-directory "~/Dropbox/org/writing/"
             :base-extension "org"
             :publishing-directory "~/Dropbox/org/writing_exported/"
             :recursive t
             :publishing-function org-html-publish-to-html
             :headline-levels 4             ; Just the default for this project.
             :auto-preamble t
             :html-head nil
             :html-head-extra nil
             :body-only true
             )
            ;; ... add all the components here (see below)...
            ;; ("wiki" :components ("wiki-files"))
            )
          org-export-with-toc nil
          org-html-doctype "html5"
          org-html-head nil
          org-html-head-include-default-style nil
          org-html-head-include-scripts nil
          org-html-html5-fancy t
          org-html-postamble nil
          org-html-indent t)

    (add-hook 'org-mode-hook
              (lambda ()
                (setq-local time-stamp-start "Updated on[ 	]+\\\\?[\"<]+")
                (add-hook 'before-save-hook 'time-stamp nil 'local)))

    (add-hook 'write-file-hooks 'time-stamp) ; update when saving
    (require 'ox-publish)
    (setq system-time-locale "C") ;; make sure time local is in english when exporting
    (setq org-html-validation-link nil)
  #+end_src

* Feedback

  Ispell buffer with ~s-:r~
  Ispell word with ~z =~
  #+begin_src emacs-lisp :results silent
 (setq ispell-program-name "aspell")
  ;; Please note ispell-extra-args contains ACTUAL parameters passed to aspell
  (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))

(add-hook 'org-mode-hook 'turn-on-flyspell)
  #+end_src

  Word definition
  #+begin_src emacs-lisp :results silent
  (use-package define-word
    :config
    (evil-define-key 'normal org-mode-map
      (kbd "z w") 'define-word-at-point))
  #+end_src

  Word synonyms.
  #+begin_src emacs-lisp :results silent
  (use-package powerthesaurus
    :config
    (evil-define-key 'normal org-mode-map
      (kbd "z s") 'powerthesaurus-lookup-word-dwim))
  #+end_src

  For most documents, aim for a score of approximately 60 to 70 for
  the reading ease and 7.0 to 8.0 for the grade level.
  #+begin_src emacs-lisp :results silent
  (use-package writegood-mode
   :config
   (evil-define-key 'normal org-mode-map
      (kbd "z g g") 'writegood-mode)
   (evil-define-key 'normal org-mode-map
      (kbd "z g r") 'writegood-reading-ease)
   (evil-define-key 'normal org-mode-map
      (kbd "z g l") 'writegood-grade-level))
  #+end_src

  If you need additional feedback from an external service here is an
  easy way to do it:
  #+begin_src emacs-lisp :results silent :tangle no
  (require 'browse-url) ; part of gnu emacs

  (defun my-lookup-wikipedia ()
    "Look up the word under cursor in Wikipedia.
  If there is a text selection (a phrase), use that.

  This command switches to browser."
    (interactive)
    (let (word)
      (setq word
            (if (use-region-p)
                (buffer-substring-no-properties (region-beginning) (region-end))
              (current-word)))
      (setq word (replace-regexp-in-string " " "_" word))
      (browse-url (concat "http://en.wikipedia.org/wiki/" word))
      ;; (eww myUrl) ; emacs's own browser
      ))
  #+end_src
