Searching is probably the most important thing in a code editor.
Here is how I search.

* Search in current file/buffer

  I have two main way to search in a buffer:

** Vim way
   I use ~evil-search-forward~ (bound to ~/~) and
   ~evil-search-backward~ (bound to ~?~) as it allows me to do
   powerful /vim/ combinations.

   For example I do a search, then navigate through the search list
   with ~n~ or ~N~. Or do a search then replace matches with ~:
   %s//replacement/gc~

** Counsel
   I use ~counsel-isearch~ when I am exploring the buffer or when I
   want to do some search refinements or complex replacements.

   From counsel it is easy to swith to occur with ~C-c C-o~. This
   allows me to have a list of matches in a seperate buffer and edit
   them using:
   - ~C-x C-q~
   - make the changes in the occur buffer
   - ~C-x C-s~ to save the changes

* Search in project

  ~counsel-rg~ is my main way to search. Invoked with an argument, it
  allows you to specify the directory and search options.
  #+begin_src emacs-lisp :results silent
   (use-package counsel
     :bind (:map my-keys-minor-mode-map ("C-c f" . counsel-rg)))
  #+end_src

  When I am investigating things, I like to see a preview of the
  results as I scroll down the search results. I do it with ~C-o~ then
  either ~g~ on the entry I want to preview or ~c~ to automatically
  preview results as I move through the result list.

  A trick I am learning is to use ~C-'~ to jump directly to a
  search results.

** When I need to narrow down my search to specific files

*** Narrowing on the filetype

    Launch ~counsel-rg~ with a prefix and then I can use for example
    ~-tjs~ as an argument to search only inside javascript files.
    ~-Tjs~ searches inside files but javascript ones.

*** From Dired
  ~C-x d~ to launch dired . I mark the files I am interested in with
  ~m~. Then I can grep those files with ~A~ and do a query replace
  with ~Q~.
