Searching is probably the most important thing in a code editor.
Here is how I search.

* Search in current file/buffer

  I have two main way to search in a buffer:

** Vim way
   I use ~evil-search-forward~ (bound to ~/~) and
   ~evil-search-backward~ (bound to ~?~) as it allows me to do
   powerful /vim/ combinations.

   For example I do a search, then navigate through the search list
   with ~n~ or ~N~. Or do a search then replace matches with ~:
   %s//replacement/gc~

** swiper
   I use ~swiper-isearch~ when I am exploring the buffer or when I
   want to do some search refinements or complex replacements.

   From counsel it is easy to swith to occur with ~C-c C-o~. This
   allows me to have a list of matches in a seperate buffer and edit
   them using:
   - ~C-x C-q~
   - make the changes in the occur buffer
   - ~C-x C-s~ to save the changes

   #+begin_src emacs-lisp :results silent
     (use-package ivy
       :diminish ivy-mode
       :bind (("C-s" . swiper-isearch)
              :map my-keys-minor-mode-map
              ("C-c v" . ivy-push-view)
              ("C-c V" . ivy-pop-view))
       :init
       (setq ivy-use-selectable-prompt t)
       ;; enable bookmarks and recent-f
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t)
       (setq ivy-initial-inputs-alist nil)
       (setq ivy-re-builders-alist
             '((t . ivy--regex-plus)))
       :config
       (use-package ivy-hydra)
       (ivy-mode 1)
       (defun ivy-switch-buffer-occur ()
         "Occur function for `ivy-switch-buffer' using `ibuffer'."
         (ibuffer nil (buffer-name) (list (cons 'name ivy--old-re))))
       (ivy-set-occur 'ivy-switch-buffer 'ivy-switch-buffer-occur))
       (eval-after-load "ivy"
         '(define-key ivy-minibuffer-map (kbd "C-c SPC") 'ivy-restrict-to-matches))
   #+end_src

* Search in visible windows
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :bind (:map my-keys-minor-mode-map
              ("C-;" . avy-goto-char-timer)))
   #+END_SRC
* Search in project

  ~counsel-rg~ is my main way to search. Invoked with an argument, it
  allows you to specify the directory and search options.
  #+begin_src emacs-lisp :results silent
   (use-package counsel
     :bind (:map my-keys-minor-mode-map ("C-c f" . counsel-rg)))
  #+end_src

  When I am investigating things, I like to see a preview of the
  results as I scroll down the search results. I do it with ~C-o~ then
  either ~g~ on the entry I want to preview or ~c~ to automatically
  preview results as I move through the result list.

  A trick I am learning is to use ~C-'~ to jump directly to a
  search results.

** When I need to narrow down my search to specific files

*** Narrowing on the file-type

    Launch ~counsel-rg~ with a prefix and then I can use for example
    ~-tjs~ as an argument to search only inside javascript files.
    ~-Tjs~ searches inside files but javascript ones.

*** From Dired
  ~C-x d~ to launch dired . I mark the files I am interested in with
  ~m~. Then I can grep those files with ~A~ and do a query replace
  with ~Q~.
* Search Emacs documentation

  Remplacements for emacs search and completion commands.
  I find the UI better.
  #+begin_src emacs-lisp :results silent
    (use-package counsel
      :bind (("M-x" . counsel-M-x)
             ("C-x C-f" . counsel-find-file)
             ("<f1> f" . counsel-describe-function)
             ("<f1> v" . counsel-describe-variable)
             ("<f1> l" . counsel-find-library)
             ("<f2> i" . counsel-info-lookup-symbol)
             ("<f2> u" . counsel-unicode-char)
             :map minibuffer-local-map
             ("C-r" . counsel-minibuffer-history)
             :map my-keys-minor-mode-map
             ("C-c r" . counsel-recentf)
             ("C-c i" . counsel-imenu)
             ("C-c b" . counsel-ibuffer)
             ("C-c m" . counsel-bookmark))
      :init
      (setq counsel-git-cmd "rg --files")
      (setq counsel-rg-base-command
            "rg --smart-case -M 120 --hidden --no-heading --line-number --color never %s ."))

    (eval-after-load "counsel" '(progn
                                  (defun counsel-imenu-categorize-functions (items)
                                    "Categorize all the functions of imenu."
                                    (let ((fns (cl-remove-if #'listp items :key #'cdr)))
                                      (if fns
                                          (nconc (cl-remove-if #'nlistp items :key #'cdr)
                                                 `((":" ,@fns)))
                                        items)))))

  #+end_src

* Rename

  Prefix with ~0~ to only match in current function.
  Prefix with universal argument to repeat the previous iedit match.
  Select region and press ~F6~ again to restrict to region.
  ~tab~ and ~S-tab~ to navigate between matches. ~M-;~ to clear a match.

  Shows only matching lines with ~C-'~
  #+begin_src emacs-lisp :results silent
    (use-package iedit
     :bind (:map my-keys-minor-mode-map ("<f6>" . iedit-mode)))
  #+end_src

  Sometimes I like to use the mouse to setup multiple cursors. For
  other /multiple-cursors/ usage I prefer to use either
  ~evil-visual-block-mode~ or ~iedit~.
  #+begin_src emacs-lisp :results silent
  (use-package multiple-cursors
  :bind (:map my-keys-minor-mode-map ("C-S-<mouse-1>" . mc/add-cursor-on-click)))
  #+end_src
