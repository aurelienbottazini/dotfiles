I started using Vim to help me prevent [[https://www.emacswiki.org/emacs/RepeatedStrainInjury][emacs RSI.]]
Now I am sticking with it because It makes me feel like beethoven
manipulating text :-)

Here is an awesome [[https://github.com/noctuid/evil-guide][Evil Guide]]

Quit read-only windows with Q instead of trying to register a Vim
Macro.
This is mainly to restore emacs behavior with help windows.
#+begin_src emacs-lisp :results silent
  (use-package evil
    :config
    (defun my-evil-record-macro ()
      (interactive)
      (if buffer-read-only
          (quit-window)
        (call-interactively 'evil-record-macro)))

    (with-eval-after-load 'evil-maps
      (define-key evil-normal-state-map (kbd "q") 'my-evil-record-macro)))
#+end_src

Surround things with
- ~S~ in visual mode
- ~ys<text-object>~ in normal mode
You can also change surroundings ~cs~ or delete surroundings ~ds~.
#+begin_src emacs-lisp :results silent
  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))
#+end_src

Comment things with ~gc~. Comment and copy with ~gy~
#+begin_src emacs-lisp :results silent
  (use-package evil-commentary
    :after evil
    :diminish evil-commentary-mode
    :config
    (evil-commentary-mode))
#+end_src

Start a search from visual selection with ~*~ or ~#~ (backward).
#+begin_src emacs-lisp :results silent
  (use-package evil-visualstar
    :after evil
    :config
    (global-evil-visualstar-mode t))
#+end_src

Jump to matching pairs with ~%~.
#+begin_src emacs-lisp :results silent
  (use-package evil-matchit
    :after evil
    :config
    (global-evil-matchit-mode 1))
#+end_src

Persist highlight from ~evil search~ and ~isearch~
#+begin_src emacs-lisp :results silent
  (use-package evil-search-highlight-persist
    :config
    (global-evil-search-highlight-persist t))
#+end_src

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-toggle-key "C-`")          ;switch between evil and emacs mode
    (setq evil-mode-line-format nil)
    :config

    (evil-mode 1)

    (evil-set-initial-state 'deft-mode 'insert)
    (evil-set-initial-state 'dired-mode 'emacs)
    (evil-set-initial-state 'magit-mode 'emacs)

    (evil-ex-define-cmd "W" 'save-buffer))
#+end_src


Changes modeline color depending on Evil state, if buffer is
modified etc...
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(background-color . "#f1f2f1"))
  (add-to-list 'default-frame-alist '(foreground-color . "#000000"))

     (lexical-let ((default-color (cons (face-background 'mode-line)
                                      (face-foreground 'mode-line))))
     (add-hook 'post-command-hook
               (lambda ()
                 (let ((color (cond ((minibufferp) default-color)
                                    ((evil-emacs-state-p)  '("#ffa2cb" . "#4c4e56"))
                                    ((evil-visual-state-p) '("#adcff1" . "#4c4e56"))
                                    ((evil-insert-state-p)  '("#97d88a" . "#4c4e56"))
                                    ((buffer-modified-p)   '("#f79b2f" . "#4c4e56"))
                                    (t default-color)))
                       )

                   (set-face-attribute 'mode-line nil :box `(:line-width 2 :color ,(car color)))
                   (set-face-background 'mode-line (car color))
                   (set-face-foreground 'mode-line-buffer-id (cdr color))
                   (set-face-foreground 'mode-line (cdr color))))))

#+end_src

Make my cursor match my modeline color
#+begin_src emacs-lisp :results silent
(use-package evil
  :config
    (setq evil-insert-state-cursor '(box "#34855b")
          evil-visual-state-cursor '(box "#4c4e56")
          evil-emacs-state-cursor '(box "#bc3e44")
          evil-normal-state-cursor '(box "#4c4e56")))
#+end_src
