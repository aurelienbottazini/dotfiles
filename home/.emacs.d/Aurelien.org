#+TITLE: Aurelien Bottazini's Emacs configuration
#+OPTIONS: toc:4 h:4
#+PROPERTY: header-args :results silent

Load custom settings before anything else.  It is important to load
those first as it can impact the loading of other packages
#+begin_src emacs-lisp
(setq custom-file (concat user-emacs-directory "custom.el"))
(load custom-file)

(setq *is-linux* (string-equal system-type "gnu/linux"))
(setq *is-mac* (string-equal system-type "darwin"))

(let ((default-directory  "~/.emacs.d/site-lisp/"))
  (normal-top-level-add-to-load-path '("."))
  (normal-top-level-add-subdirs-to-load-path))
#+end_src

* Initialize Packages
#+begin_src emacs-lisp
(setq package-archives
      '(("melpa"       . "http://melpa.milkbox.net/packages/")
	("gnu"         . "http://elpa.gnu.org/packages/")))

(setq package-user-dir (concat user-emacs-directory "elpa"))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(defun require-package (package &optional min-version)
  "Ask elpa to install given PACKAGE. You can specify a MIN-VERSION for your PACKAGE."
  (unless (package-installed-p package min-version)
    (package-install package)))

(require-package 'use-package)
(require 'use-package)

(setq use-package-always-ensure t)

(defun sanityinc/time-subtract-millis (b a)
  (* 1000.0 (float-time (time-subtract b a))))

(defvar sanityinc/require-times nil
  "A list of (FEATURE . LOAD-DURATION).
LOAD-DURATION is the time taken in milliseconds to load FEATURE.")

(defadvice require (around sanityinc/build-require-times (feature &optional filename noerror) activate)
  "Note in `sanityinc/require-times' the time taken to require each feature."
  (let* ((already-loaded (memq feature features))
         (require-start-time (and (not already-loaded) (current-time))))
    (prog1
        ad-do-it
      (when (and (not already-loaded) (memq feature features))
        (let ((time (sanityinc/time-subtract-millis (current-time) require-start-time)))
          (add-to-list 'sanityinc/require-times
                       (cons feature time)
                       t))))))

(defun sanityinc/show-init-time ()
  (message "init completed in %.2fms"
           (sanityinc/time-subtract-millis after-init-time before-init-time)))

(add-hook 'after-init-hook 'sanityinc/show-init-time)
#+end_src

* Better Defaults
#+begin_src emacs-lisp
(setenv "PATH" (concat "/Users/aurelienbottazini/.config/yarn/global/node_modules/.bin/:" "/Users/aurelienbottazini/.nvm/versions/node/v8.9.1/bin/:" (getenv "HOME") "/.rbenv/shims:" (getenv "HOME") "/.rbenv/bin:" (getenv "PATH")))

(setq exec-path '("/Users/aurelienbottazini/.config/yarn/global/node_modules/.bin/" "/Users/aurelienbottazini/.nvm/versions/node/v8.9.1/bin/" "/Users/aurelienbottazini/.rbenv/bin/" "/Users/aurelienbottazini/.rbenv/shims/" "/Users/aurelienbottazini/dotfiles/bin/" "/usr/local/bin/" "/usr/local/sbin/" "/usr/bin/" "/bin/" "/usr/sbin/" "/sbin/"))

(setq delete-by-moving-to-trash t)
(setq-default indent-tabs-mode nil)

(setq backup-by-copying t      ; don't clobber symlinks
      backup-directory-alist
      '((".*" . "~/.local/share/emacs-saves"))    ; don't litter my fs tree
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      auto-save-default t ;files starting with # are generated by autosave
      auto-save-timeout 60 ; number of seconds before auto-saving
      auto-save-interval 200 ; number of keystrokes before auto-saves
      version-control t) ; use versioned backups

(setq auto-save-file-name-transforms
      `((".*" ,"~/.local/share/emacs-saves" t)))

(setq vc-follow-symlinks t)

(defalias 'yes-or-no-p 'y-or-n-p)

;; if file has no change, just load any changes
;; coming from an external process
(global-auto-revert-mode 1)

;; sentences end with one space after point
(setq sentence-end-double-space nil)

;;; replace selected text when typing
(pending-delete-mode 1)

;; show end of buffer on left fringe
(setq default-indicate-empty-lines nil)

(defun check-large-file-hook ()
  "If a file is over a given size, turn off minor modes."
  (when (> (buffer-size) (* 1024 100)) ;; 100K
    (fundamental-mode)
    (font-lock-mode -1)
    (setq buffer-read-only t)
    (buffer-disable-undo)))

(add-hook 'find-file-hooks 'check-large-file-hook)

(prefer-coding-system 'utf-8)
(modify-coding-system-alist 'process "\\*compilation\\*\\'"   'utf-8)

(setq ring-bell-function 'ignore)

(setq create-lockfiles nil)

(when *is-mac*
  (use-package xclip
    :config
    (xclip-mode 1)))
#+end_src
* Vim
#+begin_src emacs-lisp
;; https://github.com/noctuid/evil-guide
(use-package evil
  :ensure t
  :init
  (setq evil-toggle-key "C-`")
  (setq evil-mode-line-format nil)
  :config

  (defun my-evil-paste-indent-advice (orig-fun &rest args)
    "Indent text pasted with evil. Takes default arguments for an advice Function: ORIG-FUN and rest ARGS."
    (progn
      (message "indenting")
      (indent-region (region-beginning) (region-end) nil)))

  (advice-add 'evil-paste-after :after #'my-evil-paste-indent-advice)

  (evil-mode 1)

  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))

  (use-package evil-commentary
    :diminish evil-commentary-mode
    :config
    (evil-commentary-mode))

  (use-package evil-visualstar
    :config
    (global-evil-visualstar-mode t))

  (use-package evil-indent-plus
    :config
    (evil-indent-plus-default-bindings))
  (use-package evil-matchit
    :config
    (global-evil-matchit-mode 1))
  (use-package evil-search-highlight-persist
    :config
    (global-evil-search-highlight-persist t)))

(bind-keys :map evil-normal-state-map :prefix-map my-leader-map :prefix "SPC")

(evil-set-initial-state 'git-commit-mode 'insert)
(evil-set-initial-state 'deft-mode 'insert)

(evil-ex-define-cmd "W" 'save-buffer)
#+end_src
  
* Dired

#+begin_src emacs-lisp

(setq dired-dwim-target t)
(add-hook 'dired-load-hook
	  (lambda ()
	    (load "dired-x")
	    ;; Set dired-x global variables here.  For example:
	    ;; (setq dired-guess-shell-gnutar "gtar")
	    ;; (setq dired-x-hands-off-my-keys nil)
	    (setq dired-recursive-copies (quote always)) ; “always” means no asking
	    (setq dired-recursive-deletes (quote top)) ; “top” means ask once
	    ))

(setq ls-lisp-use-insert-directory-program t)

(when *is-mac*
  (setq insert-directory-program "gls"))

(require 'dired )

(defun my-dired-mode-setup ()
  "to be run as hook for `dired-mode'."
  (dired-hide-details-mode 1))

(eval-after-load "dired"
  '(progn
(define-key dired-mode-map "-" 'dired-up-directory)
(define-key dired-mode-map (kbd "C-u k") 'dired-kill-subdir)
(evil-define-key 'normal dired-mode-map
  "gg" 'evil-goto-first-line)
(define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file) ; was dired-advertised-find-file
(define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file "..")))  ; was dired-up-directory
     (define-key dired-mode-map (kbd "SPC") nil)))

(add-hook 'dired-mode-hook 'my-dired-mode-setup)
#+end_src

* GUI
#+begin_src emacs-lisp
(when window-system
  (when *is-linux*
    (set-frame-font "-*-PragmataPro-normal-normal-normal-*-28-*-*-*-m-0-iso10646-1"))
  (when *is-mac*
    (set-frame-font "-*-PragmataPro-normal-normal-normal-*-14-*-*-*-m-0-iso10646-1"))
  (set-fontset-font t 'unicode "Noto Emoji" nil 'prepend)
  )

(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

(global-hl-line-mode)
(blink-cursor-mode 0)
(column-number-mode)

(electric-indent-mode t)
(electric-pair-mode t)

;; wrap lines when they reach the end of buffer
;; trying to toggle this only manually to see if i like it
;; (global-visual-line-mode)

;; file path in frame title
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))

(show-paren-mode 1)

(fringe-mode 20)

(set-default 'truncate-lines t)

(use-package which-key
  :config
  (which-key-mode))
#+end_src
** Colors
 
#+begin_src emacs-lisp
  (lexical-let ((default-color (cons (face-background 'mode-line)
				   (face-foreground 'mode-line))))
  (add-hook 'post-command-hook
	    (lambda ()
	      (let ((color (cond ((minibufferp) default-color)
				 ((bound-and-true-p lispy-mode) '("#9d7ad2" . "#4c4e56"))
				 ((evil-emacs-state-p)  '("#ffa2cb" . "#4c4e56"))
				 ((evil-visual-state-p) '("#adcff1" . "#4c4e56"))
				 ((evil-insert-state-p)  '("#97d88a" . "#4c4e56"))
				 ((buffer-modified-p)   '("#f79b2f" . "#4c4e56"))
				 (t default-color)))
  		    )

		(set-face-attribute 'mode-line nil :box `(:line-width 2 :color ,(car color)))
		(set-face-background 'mode-line (car color))
		(set-face-foreground 'mode-line-buffer-id (cdr color))
		(set-face-foreground 'mode-line (cdr color))))))

(use-package rainbow-mode)

;; #fff166 101U
;; #fccf61 128u
;; #f79b2f 130u
;; #c97f3a 145u
;; #ffa2cb 210u
;; #f56d9e 213u
;; #dcc6ea 263u
;; #bfa1e3 264u
;; #9d7ad2 265u
;; #adcff1 277u
;; #7ab1e8 284u
;; #5b8edb 279u
;; #8eddeb 304u
;; #00b4e4 395u
;; #93e8d3 331u
;; #97d88a 358u
;; #5cb860 360u
;; #56944f 362u
;; #f1f2f1 11-0601 tpx
;; #e8eae8 11-4800 tpx
;; #dad9d6 cool g r a y 1 u
;; #c5c5c5 cool g r a y 3 u
;; #adaeb0 cool g r a y 5 u
;; #939598 cool g r a y 8 u

;; pastel
;; #e4f4e9 9063u
;; #c5f2e6 9520u
;; #ffcfd8 9284u


;; #69615f 440u
;; #4c4e56 black7u
;; #885a61 195u
;; #f65058 r e d 032u
;; #bc3e44 3517u
;; #34855b 348u
;; #546758 350u
;; #4982cf 285u
;; #3a499c Reflex B l u e U
;; #65428a medium p u r p l e

#+end_src

** Diminish
#+begin_src emacs-lisp
(use-package diminish
  :config
  (diminish 'prettier-js-mode)
  (diminish 'subword-mode)
  (diminish 'eldoc-mode)
  (diminish 'auto-revert-mode)
  (diminish 'indium-interaction-mode)
  (diminish 'paredit-everywhere-mode)
  (diminish 'evil-lispy-mode)
  (diminish 'company-mode)
  (diminish 'paredit-mode)
  (diminish 'my-keys-minor-mode)
  (diminish 'ivy-mode)
  (diminish 'undo-tree-mode)
  (diminish 'evil-commentary-mode)
  (diminish 'evil-mc-mode)
  (diminish 'yas-minor-mode)
  (diminish 'which-key-mode)
  (diminish 'visual-line-mode))
#+end_src
* AutoCompletions
#+begin_src emacs-lisp
(use-package company
  :diminish company-mode
  :init
  (add-hook 'after-init-hook 'global-company-mode)
  :config
  (let ((map company-active-map))
    (define-key map (kbd "C-n") 'company-select-next)
    (define-key map (kbd "C-p") 'company-select-previous)
    (define-key map (kbd "C-f") 'company-complete-selection)
    (define-key map (kbd "TAB") 'company-complete-selection)
    (define-key map (kbd "<tab>") 'company-complete-selection))

  (setq company-backends '(company-files company-capf (company-dabbrev-code company-yasnippet)))
  (use-package company-dict
    :config
    (setq company-dict-dir (concat user-emacs-directory "dict/"))
    (add-to-list 'company-backends 'company-dict))
  )

(use-package yasnippet
  :bind (:map my-leader-map
              ("vs" . yas-describe-tables))
 :diminish yas-minor-mode
 :init
 (setq yas-snippet-dirs
       '("~/.emacs.d/snippets"))
 :config
 (yas-global-mode 1)
 (add-hook 'term-mode-hook (lambda()
                             (yas-minor-mode -1))))

(use-package yatemplate
  :config
  (auto-insert-mode t)
  (yatemplate-fill-alist))
#+end_src
* VCS / Git
  
#+begin_src emacs-lisp
;; ediff in same frame
(setq ediff-window-setup-function 'ediff-setup-windows-plain)

(add-hook 'git-commit-mode-hook 'evil-insert-state)

(use-package magit
  :bind (:map my-leader-map
	      ("gb" . magit-blame)
	      ("gs" . magit-status)
	      ("gh" . magit-log-buffer-file))
  :config
  (use-package fullframe
    :config
    (fullframe magit-status magit-mode-quit-window))

  (use-package evil-magit)

  (use-package diff-hl
    :config
    (add-hook 'prog-mode-hook 'diff-hl-mode)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
    )

  )

(use-package git-link)
(define-key my-leader-map (kbd "gl") 'git-link)

(use-package git-timemachine)
(define-key my-leader-map (kbd "gt") 'git-timemachine-toggle)

(defadvice git-timemachine-mode (after git-timemachine-change-to-emacs-state activate compile)
  "when entering git-timemachine mode, change evil normal state to emacs state"
  (if (evil-normal-state-p)
      (evil-emacs-state)
    (evil-normal-state)))

(ad-activate 'git-timemachine-mode)
#+end_src

* Org
#+begin_src emacs-lisp
(setq org-directory (expand-file-name "~/Dropbox/org"))
(setq org-default-notes-file (concat org-directory "/inbox.org"))
(define-key global-map "\C-cc" 'org-capture)

(setq org-refile-targets '((nil :maxlevel . 9)
                           (org-agenda-files :maxlevel . 9)))
(setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
(setq org-refile-use-outline-path t)                  ; Show full paths for refiling

(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  
#+end_src
* Notes
 
#+begin_src emacs-lisp
(use-package deft
  :config
  (setq deft-extensions '("txt" "tex" "org"))
  (setq deft-directory "~/Dropbox/org/")
  (setq deft-use-filename-as-title t)
  (setq deft-recursive t))
#+end_src

* Modes

#+begin_src emacs-lisp
  (use-package dockerfile-mode
  :mode "\\Dockerfile\\'")
#+end_src
