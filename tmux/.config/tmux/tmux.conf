unbind C-b
set -g prefix C-b
bind-key -r C-b send-prefix

# Easy reloading of the tmux.conf configuration file
bind-key r source-file ~/.config/tmux/tmux.conf \; display-message "~/.tmux.conf reloaded"

set-window-option -g xterm-keys on

set -g default-terminal "xterm-kitty"

# Use emacs / readline key-bindings in the tmux command prompt
set-option -g status-keys "emacs"

set-option -g destroy-unattached off
# set-window-option -g aggressive-resize on
bind -r a resize-pane -L 5
bind -r w resize-pane -U 5
bind -r s resize-pane -D 5
bind -r d resize-pane -R 5

bind -r v copy-mode

# More intuitive pane splitting key-bindings, open all in current path
bind - split-window -v  -c '#{pane_current_path}'
bind \\ split-window -h  -c '#{pane_current_path}'
bind c new-window -c '#{pane_current_path}'

is_vim_or_emacs='echo "#{pane_current_command}" | grep -iqE "vim|emacs|reattach-to-user-namespace"'
bind -n C-h if-shell "$is_vim_or_emacs" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim_or_emacs" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim_or_emacs" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim_or_emacs" "send-keys C-l" "select-pane -R"

# Number windows starting at 1, renumber as windows are added / removed
set-option -g base-index 1
set-option -g renumber-windows on

# Number pages starting at 1
setw -g pane-base-index 1

bind-key b break-pane -d

# Use vi key bindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
unbind [
bind Escape copy-mode
unbind p
bind-key -Tcopy-mode-vi 'v' send -X begin-selection
bind-key -Tcopy-mode-vi 'y' send -X copy-selection

set-option -g set-clipboard on

# Update default binding of `Enter` to also use copy-pipe
unbind -Tcopy-mode-vi Enter

set-option -g default-shell /bin/zsh
set-option -g default-command zsh

# Sample quick-pane configurations
# bind-key t split-window -h -c ~/ "vim todo.md"

bind-key C-r split-window -h -p 50 -c '#{pane_current_path}' ranger
# bind-key C-g split-window -h -p 50 -c '#{pane_current_path}' gitsh
bind-key C-h split-window -h -p 50 -c '#{pane_current_path}' tig
bind-key C-t split-window -h -p 50 htop
bind-key C-d split-window -h -p 50 -c ~/dotfiles "vim ."

# Fuzzy matching session navigation via fzf utility
bind C-j split-window -v "tmux list-sessions | sed -E 's/:.*\$//' | grep -v \"^(tmux display-message -p '#S')\\\$\" | fzf --reverse | xargs tmux switch-client -t"

# Prompted join-pane
bind-key j command-prompt -p "join pane from: "  "join-pane -h -s '%%'"

# Easily swap a pane (targeted by pane number) with the current pane
bind-key m display-panes\; command-prompt -p "pane #: "  "swap-pane -t '%%'"

bind-key -n C-S-Left swap-window -t -1\;
bind-key -n C-S-Right swap-window -t +1\;

# # "break session" and "kill session" without exiting tmux
bind-key C-b send-keys 'tat && exit' 'C-m'
bind-key K run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux kill-session'

# # better delay when sending commands
set -s escape-time 1

setw -g mouse off

# # Colors
set -g status-fg 'black'
set -g status-bg 'blue'

# # command input
set -g message-style bg='brightwhite',fg="#000000"

setw -g window-status-current-style fg='#000000',bg="#ffff00"

set -g pane-active-border-style fg='yellow',bg='yellow'

set -g status-left-length 49
set -g status-left "#S #[bg=#ffff00]#[fg=black] #I#[bg=yellow]#[fg=black] #P"
set -g status-right ""

# # centering window list
set -g status-justify centre

# # changing window color in status bar when there is activity
setw -g monitor-activity on
setw -g window-status-activity-style fg='black',bg="red"

set -g visual-activity on
